<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎参观小灰灰的网站哟 ヾ(◍°∇°◍)ﾉﾞ ~</title>
  
  <subtitle>My Personal blog website —— be founded on March 9, 2019</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-28T13:59:11.331Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>黄宇辉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VOA:Americans`Favorite Thing To Do</title>
    <link href="http://yoursite.com/2019/04/28/VOA-Americans-Favorite-Ting-To-Do/"/>
    <id>http://yoursite.com/2019/04/28/VOA-Americans-Favorite-Ting-To-Do/</id>
    <published>2019-04-28T07:49:03.000Z</published>
    <updated>2019-04-28T13:59:11.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Americans’Favorite-Thing-To-Do"><a href="#Americans’Favorite-Thing-To-Do" class="headerlink" title="Americans’Favorite Thing To Do"></a>Americans’Favorite Thing To Do</h2><p><em>Americans’s favorite activity has long been said to be baseball. But a new study by the U.S. government suggests that is not true. The <code>Bureau</code> of <code>Labor</code> <code>Statistics</code> says Americans seem to enjoy watching television more than anything else.</em></p><ul><li><em>美国人最喜欢的运行据说是棒球,但美国政府的一项新研究表明,事实并非如此.美国劳工统计局说,美国人似乎最喜欢看电视.</em></li></ul><p><em>Researchers <code>examined</code> how Americans age 15 and older spent their free time during the years 2013 to 2017. They learned that Americans spend almost three hours every day watching TV.</em></p><ul><li><em>研究人员调查了15岁及以上的美国人在2013年至2017年期间是如何度过空闲时间的.他们了解到美国人每天几乎花三个小时看电视.</em></li></ul><p><em>The activity includes watching movies,recorded program.and live broadcasts.</em></p><ul><li><em>观看的电视内容包括电影,录制节目和现场直播.</em></li></ul><p><em>So who watches television the most? People over the age of 65,researchers found.Older people clock in at more than four and a half hours of television every day.</em></p><ul><li><em>那么哪个群体看电视最多呢? 研究人员发现,是年龄超过65岁的老人,老年人每天去看电视的时间超过四个半小时.</em></li></ul><p><em>Parents with small children spent the least amount of time in front of the tube,as TV is sometimes called.</em></p><ul><li><em>有小孩的父母花在电视机前的时间最少(电视有时也被称为”TV”)</em></li></ul><p><em>Researchers discovered something else,too : Men watch about 30 minutes more television than women each day.</em></p><ul><li><em>研究人员还发现另一件事: 男性平均每天看电视的时间比女性多30分钟.</em></li></ul><p><em>I’m Kelly Jean Kelly.</em></p><h3 id="重点词汇"><a href="#重点词汇" class="headerlink" title="重点词汇"></a>重点词汇</h3><ol><li>bureau       <code>(n)</code>        局,处.</li><li>labor        <code>(n)</code>        劳动,工作.</li><li>statistics   <code>(n)</code>        统计,统计学.</li><li>examine      <code>(v)</code>        检查,调查.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Americans’Favorite-Thing-To-Do&quot;&gt;&lt;a href=&quot;#Americans’Favorite-Thing-To-Do&quot; class=&quot;headerlink&quot; title=&quot;Americans’Favorite Thing To Do&quot;&gt;
      
    
    </summary>
    
    
      <category term="VOA" scheme="http://yoursite.com/tags/VOA/"/>
    
  </entry>
  
  <entry>
    <title>VOA:A Lifetime of Exercise Slows Aging Process</title>
    <link href="http://yoursite.com/2019/04/27/VOA-A-Lifetime-of-Exercise-Slows-Aging-Process/"/>
    <id>http://yoursite.com/2019/04/27/VOA-A-Lifetime-of-Exercise-Slows-Aging-Process/</id>
    <published>2019-04-27T08:20:30.000Z</published>
    <updated>2019-04-28T01:49:49.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-Lifetime-of-Exercise-Slows-Aging-Process"><a href="#A-Lifetime-of-Exercise-Slows-Aging-Process" class="headerlink" title="A Lifetime of Exercise Slows Aging Process"></a>A Lifetime of Exercise Slows Aging Process</h2><p><em>From VOA learning English,this is the Health&amp;Lifestyle report.</em></p><ul><li><em>这里是美国之音——健康&amp;生活方式节目.</em></li></ul><p><em>If you have been meaning to add more exercise to your daily <code>routine</code>,you may want to start sooner rather than later.</em></p><ul><li><em>如果你已经打算每天增加点锻炼,或许你应该尽早开始.</em></li></ul><p><em>A 2018 study has found a lifetime of regular exercise and activity can slow down the aging process.</em></p><ul><li><em>2018年的一项研究发现,在人的一生中,定期锻炼和参加活动可以减缓衰老过程.</em></li></ul><p><em>Researchers at Britain’s University of Birmingham and King’s Collage London say that getting older should not necessarily mean becoming more weak or sick. Their research shows that a <code>commitment</code> to a life of <code>movement</code> and exercise my help us live ont only longer,but also healthier.</em></p><ul><li><em>英国伯明翰大学和伦敦国王学院的研究人员说,年龄的增长不一定意味着变得更加虚弱.他们的研究表明,坚持运动和锻炼可以使我们的寿命加长,而且身体会更健康.</em></li></ul><p><em>For their study,the researchers looked at two groups.</em></p><ul><li><em>关于他们的研究,研究人员观察了两个小组.</em></li></ul><p><em>The first group <code>was made up</code> of 125 non-professional cyclists between the ages of 55 to 79. This group included 84 healthy men and 41 healthy women. We will call this group the “cyclists”.</em></p><ul><li><em>第一组由125名年龄在55至79岁之间的非职业自行车手组成.该组包括84名健康男性和41名女性.我们将这个组称为: “自行车运动组.”</em></li></ul><p><em>Researchers then found 130 people to make up a second group. Within this group,75 people were aged 57 to 80. The other 55 were between the ages of 20 and 36. The people in this group were also healthy,but they did not exercise regularly. We will call this group the “non-exercisers”.</em></p><ul><li><em>研究人员随后找了130人组成第二组.在这一组中,有75人年龄在57岁至80岁之间.其他55人年龄在20岁至36岁之间.这一群体的人也很健康,但他们没有定期锻炼.我们将这个小组称为: “非运动组”.</em></li></ul><p><em>Smokers,heavy drinkers of alcohol and people with other health issues were not included in the study.</em></p><ul><li><em>吸烟者,酗酒者以及有其他健康问题的人士未参与此次研究.</em></li></ul><p><em>Then,researchers gave both groups a series of tests. They testd their <code>muscle mass</code>,muscular strength,<code>percentage</code> of body fat,<code>cholesterol</code> levels and the strength of their immune system. And male <code>participants</code> had their <code>testosterone</code> levels checked.</em></p><ul><li><em>然后,研究人员对这两组进行了一系列的测试.他们测试他们的肌肉质量,肌肉力量,身体脂肪的百分比,胆固醇水平和他们的免疫系统的强度.还检查了男性参与者的睾酮水平.</em></li></ul><p><em>The the researchers compared the result of the two groups.</em></p><ul><li><em>然后研究人员比较了两组的结果.</em></li></ul><p><em>Result showed that the cyclists did not experience body changes usually <code>equated</code> with a normal aging process. For example,they did not lose muscle mass or strength. Also,their body fat and cholesterol levels did not increase with age.</em></p><ul><li><em>结果表明,骑自行车的人没有经历身体变化,通常等同于正常的老化过程.例如: 他们的肌肉质量或力量没有减少.此外,他们的身体脂肪和胆固醇指标并没有随着年龄增加而上升.</em></li></ul><p><em>The male cyclists’ testosterone levels had also <code>remained</code> high. Researchers say this may mean that they <code>avoided</code> at least one major <code>symptom</code> of male <code>menopause</code>.</em></p><ul><li><em>男性骑行者的睾酮水平也一直很高.研究人员说: 这可能意味着他们至少避免了男性更年期的一个主要症状.</em></li></ul><p><em>The reseachers also found something they had not expected. The study showed that the <code>immune</code> systems of the cyclists did not seem to age either. For this,they looked at an <code>organ</code> called the <code>thymus</code>. The thymus makes immune cells called T-cells.</em></p><ul><li><em>研究人员还发现他们没有预料的事情.该研究表明,骑自行车的免疫系统似乎也没有老化.为此,他们观察了一个称为胸腺的器官.胸腺制造的免疫细胞称为T细胞.</em></li></ul><p><em>The University of Arizona’s biology department explains on its website that T-cells are a type of white blood cell and are made in our bone <code>marrow</code>.</em></p><ul><li><em>亚利桑那大学生物系在其网站上解释说,T细胞是一种白血球,在我们的骨髓中生成.</em></li></ul><p><em>As the article says: “There are two types of T-cells in your body: Helper T-cells and Killer T-cells. Killer T-cells do the work of destorying the <code>infected</code> cells. The Helper T-cells <code>coordinate</code> the attack.”</em></p><ul><li><em>正如文章所说: “你体内有两种类型的T细胞: 辅助型T细胞和杀伤型T细胞. 杀伤型T细胞的工作是消灭感染的细胞.辅助型T细胞协调攻击.”</em></li></ul><p><em>Starting at about the age of 20,the thymus of most people starts to get smaller. It also starts to make fewer T-cells.</em></p><ul><li><em>从大约20岁开始,大多数人的胸腺开始变小.所产生的T细胞也开始相应的减少.</em></li></ul><p><em>Howerver,in this study,the T-cell production by the thymuses of the cyclists had not slowed down with age. They were making as many T-cells as those of a young person.</em></p><ul><li><em>然而,在这项研究中,骑自行车者的胸腺产生的T细胞没有随着年龄增加而减慢.他们正在制造与年轻人一样多的T细胞.</em></li></ul><p><em>Janet Lord is director of the Institute of <code>Inflammation</code> and Ageing at the University of Birmingham. In a press statement,she offers the words of <code>Hippocrates</code>,often called the “father of medicine.”</em></p><ul><li><em>珍妮特爵士是伯明翰大学炎症和老化研究所所长.在新闻发布会上,她引用了通常被称为”医学之父”的希波克拉底的话.</em></li></ul><p><em>She write: “Hippocrates in 400 BC said that exercise is man’s best medicine,but his message has been lost over time and we are an increasingly <code>sedentary</code> society.”</em></p><ul><li><em>她写到: “公元前400年希波克拉底说: 运动是人类最好的药物,但随着时间的流逝,他的话渐渐被大家所遗忘,我们正处在一个日益就久坐的社会.”</em></li></ul><p><em><code>Professor</code> Stephen Harridge is director of the Center of Human &amp; <code>Aerospace</code> <code>Physiological</code><br>Sciences at King’s College London. He addressed the common question of what came first——the chicken or the egg? In this case,the question became,”Which camej first——the healthy behavior or the good health?”</em></p><ul><li><em>斯蒂芬哈里教授是伦敦国王学院人体与航天生理学中心主任.他解释了一个老生常谈的问题——先有鸡还是先有蛋?在这种情况下,这个问题变成了: “有着健康行为,会有一个健康的身体.还是有了健康的身体才会进行健康的行为.”</em></li></ul><p><em>When talking about the findings of the study,he said “the cyclists do not exercise because they are healthy,but that they are healthy because they have been exercising for such a large <code>portion</code> of their lives.”</em></p><ul><li><em>在谈到这项研究的结果时,他说: “骑自行车的人之所以健康,并不是因为他们身体健康,而是因为他们“在生命的大部分时间里一直在锻炼.”</em></li></ul><p><em>The researchers advise us all to find an exercise that we like and to make physical activity a <code>priority</code> in our lives.</em></p><ul><li><em>研究人员建议我们所有人都要找到自己喜欢的运动,并将身体活动作为我们生活中的优先事项.</em></li></ul><p><em>They published their findings in Aging Cell. The study is part of <code>ongoing</code> research by the two universities.</em></p><ul><li><em>他们在《老龄细胞》发表了他们的研究.这项研究是两所大学正在进行研究的一部分.</em></li></ul><p><em>And that’s the Health&amp;Lifestyle report.</em><br><em>I’m Anna Matteo.</em></p><h3 id="重点词汇"><a href="#重点词汇" class="headerlink" title="重点词汇"></a>重点词汇</h3><ol><li>commitment       <code>(n)</code>       承诺,保证.</li><li>routine          <code>(n)</code>       [计]程序,日常工作.</li><li>movement         <code>(n)</code>       运动,活动.</li><li>muscle           <code>(n)</code>       肌肉,力量.</li><li>mass             <code>(n)</code>       块,团.</li><li>percentage       <code>(n)</code>       百分比,百分率.</li><li>cholesterol      <code>(n)</code>       [生化]胆固醇.</li><li>participant      <code>(n)</code>       参与者,关系者.</li><li>cyclist          <code>(n)</code>       骑自行车的人.</li><li>participant     <code>(n)</code>       参与者.</li><li>testosterone    <code>(n)</code>       睾酮,睾丸素.</li><li>symptom         <code>(n)</code>       症状,征兆.</li><li>menopause       <code>(n)</code>       更年期,活动终止期.</li><li>organ           <code>(n)</code>       器官,机构.</li><li>thymus          <code>(n)</code>       胸腺.</li><li>marrow          <code>(n)</code>       髓,骨髓.</li><li>inflammation    <code>(n)</code>       [病理]炎症.</li><li>Hippocrates     <code>(n)</code>       希波克拉底(希腊的名医-称医药之父)</li><li>professor       <code>(n)</code>       教授,教师.</li><li>aerospace       <code>(n)</code>       航空宇宙.[航]航空航天空间.</li><li>physiological   <code>(n)</code>       生理学的,生理的.</li><li>portion         <code>(n)</code>       部分,一份.</li><li>priority        <code>(n)</code>       优先,优先权.</li><li>equate          <code>(v)</code>       使相等,视为平等.</li><li>remain          <code>(v)</code>       保持,留下,剩余.</li><li>avoid           <code>(v)</code>       避免,避开.</li><li>coordinate      <code>(v)</code>       协调.</li><li>immune          <code>(a)</code>       免疫的.</li><li>infected        <code>(a)</code>       被感染的.</li><li>sedentary       <code>(a)</code>       久坐的,坐惯的.</li><li>ongoing         <code>(a)</code>       不间断的,进行的.</li></ol><h3 id="重点短语"><a href="#重点短语" class="headerlink" title="重点短语"></a>重点短语</h3><ol><li>be made up : 由..组成,被构成.</li><li>equate with : 把..等同,使相等,同等相待.</li><li>at least : 至少</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A-Lifetime-of-Exercise-Slows-Aging-Process&quot;&gt;&lt;a href=&quot;#A-Lifetime-of-Exercise-Slows-Aging-Process&quot; class=&quot;headerlink&quot; title=&quot;A Lifeti
      
    
    </summary>
    
    
      <category term="VOA" scheme="http://yoursite.com/tags/VOA/"/>
    
  </entry>
  
  <entry>
    <title>文件上传与下载</title>
    <link href="http://yoursite.com/2019/04/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/04/26/文件上传与下载/</id>
    <published>2019-04-26T02:28:32.000Z</published>
    <updated>2019-04-28T04:18:25.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Java-web之文件的上传与下载"><a href="#学习笔记-Java-web之文件的上传与下载" class="headerlink" title="学习笔记 : Java web之文件的上传与下载"></a>学习笔记 : Java web之文件的上传与下载</h2><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h4 id="如何实现文件上传"><a href="#如何实现文件上传" class="headerlink" title="如何实现文件上传"></a>如何实现文件上传</h4><p><em><code>Apache</code>组织提供了一个开源组件<code>Commons-FileUpload</code>( 依赖于<code>common-io</code> ),该组件可以方便地将<code>multipart/form-data</code>类型请求中的各种表单解析出来,并实现一个或多个文件的上传,同时也可以限制上传文件的大小等内容..并且性能优异,使用简单. FileUpload组件是通过Servlet来实现文件上传功能的,其工作流程如下图所示.</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/26/文件上传与下载/FileUpload.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="文件上传相关API"><a href="#文件上传相关API" class="headerlink" title="文件上传相关API"></a>文件上传相关<code>API</code></h4><h5 id="FileItem-Interface"><a href="#FileItem-Interface" class="headerlink" title="FileItem Interface"></a>FileItem Interface</h5><p><em><code>FileItem</code>接口用于封装单个表单字段元素的数据,一个表单字段元素对应一个FileItem对象.</em></p><h5 id="DiskFileItemFactory-Class"><a href="#DiskFileItemFactory-Class" class="headerlink" title="DiskFileItemFactory Class"></a>DiskFileItemFactory Class</h5><p><em><code>DiskFileItemFactory</code>类用于将请求的消息实体中的每一个文件封装成单独的<code>FileItem</code>对象.如果上传的文件比较小,将直接保存在内存中,如果上传的文件比较大,则会以临时文件的形式,保存在磁盘的临时文件中,默认情况下,文件保存在内存/磁盘临时文件夹的临界值为10240,既10KB.</em></p><h5 id="ServletFileUpload-Class"><a href="#ServletFileUpload-Class" class="headerlink" title="ServletFileUpload Class"></a>ServletFileUpload Class</h5><p><em><code>ServletFileUpload</code>类是Apache组件处理文件上传的核心高级类,通过使用<code>parseRequest(HttpServletRequest)</code>方法可以将HTML中每个表单提交的数据封装成一个<code>FileItem</code>对象,然后以List列表的形式返回.</em></p><h4 id="文件上传案例"><a href="#文件上传案例" class="headerlink" title="文件上传案例"></a>文件上传案例</h4><ol><li><p><em>JSP页面代码</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>file<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>upload the specified the file<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"UploadServlet2"</span> <span class="attr">method</span>=<span class="string">"post"</span>  <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>照片<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"image"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%--</span> 文件上传结果 <span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">String</span> <span class="attr">result</span> = <span class="string">(String)request.getAttribute(</span>"<span class="attr">result</span>");</span></span><br><span class="line"><span class="tag"><span class="attr">if</span>(<span class="attr">result</span>!=<span class="string">null)&#123;</span></span></span><br><span class="line">out.println("&lt;script&gt;alert(' "+result+" ')&lt;/script&gt;");</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>Servlet类 : 获取表单及其上传文件的信息..</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.file.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadBase.SizeLimitExceededException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.filefilter.SuffixFileFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/UploadServlet2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UploadServlet2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">String message = <span class="string">"上传失败 !"</span>;<span class="comment">// 上传结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FileItemFactory fileItemFactory = new DiskFileItemFactory();</span></span><br><span class="line">DiskFileItemFactory fileItemFactory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">fileItemFactory.setSizeThreshold(<span class="number">1024</span> * <span class="number">1024</span>);<span class="comment">// // 设置将上传的文件以临时文件的形式保存在磁盘的临界值</span></span><br><span class="line"><span class="comment">// 默认情况下,采用的是系统默认的临时文件路径,可以通过该方式获取: System.getProperty("java.io.tmpdir");</span></span><br><span class="line">fileItemFactory.setRepository(<span class="keyword">new</span> File(<span class="string">"D:\\Java web\\temporary files"</span>));<span class="comment">// 将上传的文件以临时文件的形式保存在指定的目录下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断请求消息中的内容是否是: multipart/form-data类型</span></span><br><span class="line"><span class="keyword">if</span> (ServletFileUpload.isMultipartContent(request)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件上传的核心高级类</span></span><br><span class="line">ServletFileUpload servletFileUpload = <span class="keyword">new</span> ServletFileUpload(fileItemFactory);</span><br><span class="line">servletFileUpload.setSizeMax(<span class="number">1024</span> * <span class="number">20</span>); <span class="comment">// 设置请求消息实体内容(既上传数据)的最大尺寸限制: 20KB</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 将HTML中每个表单提交的数据封装成一个FileItem对象,然后以List列表的形式返回</span></span><br><span class="line">List&lt;FileItem&gt; fileItems = servletFileUpload.parseRequest(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制上传的文件类型</span></span><br><span class="line">String[] suffixs = <span class="keyword">new</span> String[] &#123; <span class="string">".exe"</span>, <span class="string">".bat"</span>, <span class="string">".c"</span>, <span class="string">".java"</span>, <span class="string">".sh"</span>, <span class="string">"html"</span>, <span class="string">".css"</span>, <span class="string">".js"</span> &#125;;</span><br><span class="line">SuffixFileFilter suffixFileFilter = <span class="keyword">new</span> SuffixFileFilter(suffixs);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历集合</span></span><br><span class="line">File file = <span class="keyword">null</span>;</span><br><span class="line">String sno = <span class="keyword">null</span>;</span><br><span class="line">String sname = <span class="keyword">null</span>;</span><br><span class="line">String fileName = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (FileItem fileItem : fileItems) &#123;</span><br><span class="line">String item = fileItem.getFieldName();</span><br><span class="line"><span class="keyword">if</span> (fileItem.isFormField()) &#123;<span class="comment">// 普通文本表单字段</span></span><br><span class="line"><span class="keyword">if</span> (item.equals(<span class="string">"id"</span>)) &#123;</span><br><span class="line">sno = fileItem.getString();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.contentEquals(<span class="string">"name"</span>)) &#123;</span><br><span class="line">sname = fileItem.getString();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"others value .."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 文件表单字段</span></span><br><span class="line">fileName = fileItem.getName();</span><br><span class="line">file = <span class="keyword">new</span> File(request.getSession().getServletContext().getRealPath(<span class="string">"/upload/"</span> + fileName));</span><br><span class="line"><span class="keyword">if</span> (suffixFileFilter.accept(file)) &#123;</span><br><span class="line">message = <span class="string">"禁止上传此类型文件 !"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">file.getParentFile().mkdirs();<span class="comment">// 创建目录</span></span><br><span class="line">fileItem.write(file);<span class="comment">// 上传文件</span></span><br><span class="line">message = <span class="string">"success to upload !"</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"id: "</span> + sno + <span class="string">"\nname: "</span> + sname + <span class="string">"\nthe file name: "</span> + fileName</span><br><span class="line">+ <span class="string">"\nthe file path: "</span> + file.getAbsolutePath()); <span class="comment">// 上传者及文件信息</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">message = <span class="string">"error : please choose the specified file !"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SizeLimitExceededException e) &#123;</span><br><span class="line">message = <span class="string">"error : the file size exceeds limit !"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将提示信息保留在request对象中</span></span><br><span class="line">request.setAttribute(<span class="string">"result"</span>, message);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"upload.jsp"</span>).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果 : 略..</em></p></li></ol><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><h4 id="文件下载程序流程"><a href="#文件下载程序流程" class="headerlink" title="文件下载程序流程"></a>文件下载程序流程</h4><p><em>浏览器通常会直接处理响应的实体内容,这时需要在<code>HTTP</code>响应消息中设置两个响应消息头字段,指定接收程序处理数据内容的方式为下载方式,当点击”下载”超链接时,系统将请求提交到对应的<code>Servlet</code>.在该Servlet中,程序流程如下 :</em></p><ol><li>根据该地址创建文件字节输入流.</li><li>通过该流读取下载文件的内容.</li><li>将读取的内容通过输出流写到目标文件中.</li></ol><ul><li><em><code>HTTP</code>中设置两个响应消息头,具体如下.</em><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设定接收程序处理数据的方式</span></span><br><span class="line">Content-Disposition: attachment;filename=</span><br><span class="line"><span class="comment">//设定实体内容的MIME类型</span></span><br><span class="line">Content-Type: application/x-msdownload</span><br></pre></td></tr></table></figure></li></ul><h4 id="文件下载案例"><a href="#文件下载案例" class="headerlink" title="文件下载案例"></a>文件下载案例</h4><ol><li><p><em>JSP页面代码</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html"</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>down the file<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"DownloadServlet?filename=文件.png"</span>&gt;</span></span><br><span class="line">Click to download this file ..</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>Servlet类 : 设置所要下载的文件以及文件在浏览器中打开的方式.</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.file.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/DownloadServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DownloadServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取需要下载的文件名</span></span><br><span class="line">String fileName = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line"><span class="comment">// 设定接收程序处理数据的方式( MIME type : application/octet-stream )</span></span><br><span class="line">response.addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 根据不同浏览器进行不同的编码处理,以防乱码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// User-Agent: 首部包含了一个特征字符串,用来让网络协议的对端来识别发起请求的用户代理软件的应用类型、操作系统、软件开发商以及版本号.</span></span><br><span class="line">String agent = request.getHeader(<span class="string">"User-Agent"</span>);</span><br><span class="line"><span class="keyword">if</span> (agent.toLowerCase().indexOf(<span class="string">"firefox"</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">response.addHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename==?UTF-8?B?"</span></span><br><span class="line">+ <span class="keyword">new</span> String(Base64.encodeBase64(fileName.getBytes(<span class="string">"UTF-8"</span>))) + <span class="string">"?="</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 设定实体内容的MIME类型并使用encode(String s, Charset charset)解决乱码问题: Google Chrome,Microsoft Eage ..</span></span><br><span class="line">response.addHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line">InputStream inputStream = getServletContext().getResourceAsStream(<span class="string">"/resource/"</span> + fileName);</span><br><span class="line"><span class="comment">// 获取response对象的输出流</span></span><br><span class="line">OutputStream outputStream = response.getOutputStream();</span><br><span class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">outputStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">outputStream.close();</span><br><span class="line">inputStream.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果 : 略..</em></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Java-web之文件的上传与下载&quot;&gt;&lt;a href=&quot;#学习笔记-Java-web之文件的上传与下载&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Java web之文件的上传与下载&quot;&gt;&lt;/a&gt;学习笔记 : Java web之文件
      
    
    </summary>
    
    
      <category term="Java web" scheme="http://yoursite.com/tags/Java-web/"/>
    
  </entry>
  
  <entry>
    <title>JSP 标准标签库</title>
    <link href="http://yoursite.com/2019/04/26/JSP-%E6%A0%87%E5%87%86%E6%A0%87%E7%AD%BE%E5%BA%93/"/>
    <id>http://yoursite.com/2019/04/26/JSP-标准标签库/</id>
    <published>2019-04-26T02:24:15.000Z</published>
    <updated>2019-04-28T07:34:47.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Java-web之JSTL"><a href="#学习笔记-Java-web之JSTL" class="headerlink" title="学习笔记 : Java web之JSTL"></a>学习笔记 : Java web之<code>JSTL</code></h2><h3 id="JSTL介绍"><a href="#JSTL介绍" class="headerlink" title="JSTL介绍"></a><code>JSTL</code>介绍</h3><p><em>从<code>JSP 1.1</code>规范开始,JSP就支持使用自定义标签,使用自定义标签大大降低了JSP页面的复杂度.同时增加了代码的<code>重用性</code>.因此市面上出现了许多由不同厂商定制的功能相同的标签,继而导致网页制作者无从选择的问题.为了解决该问题,Sun公司制定了一套标准标签库(<code>Java Server Pages Standard Tag Library</code>),简称<code>JSTL</code>.其为一个JSP标签集合,封装了JSP应用的通用核心功能.</em></p><h3 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a><code>JSTL</code>标签库</h3><ol><li><em><code>Core</code> : 核心标签库,它包含实现Web应用中通用操作的标签.</em></li><li><em><code>SQL</code> : 数据库标签库,用于访问数据库和对数据库中的数据进行操作的标签.</em></li><li><em><code>XML</code> : 操作XML文档的标签库,它包含对XML文档中的数据进行操作的标签.</em></li><li><em><code>Functions</code> : 函数标签库,提供了一套自定义<code>EL</code>函数,包含<code>JSP</code>网页制作者经常要用到的字符串操作.</em></li></ol><h3 id="JSTL的使用"><a href="#JSTL的使用" class="headerlink" title="JSTL的使用"></a><code>JSTL</code>的使用</h3><p><em>例如 : 测试<code>&lt;c:out&gt;</code>标签,需要使用<code>taglib</code>指令导入<code>Core</code>标签库.代码如下 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br></pre></td></tr></table></figure></p><p><em>在上述代码中,<code>taglib</code>指令的<code>uri</code>属性用于指定引入标签库描述文件中的<code>URL</code>, 其<code>prefix</code>属性用于指定引入标签库描述符文件的前缀.在JSP文件中使用这个标签时都要使用这个前缀.</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Java-web之JSTL&quot;&gt;&lt;a href=&quot;#学习笔记-Java-web之JSTL&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Java web之JSTL&quot;&gt;&lt;/a&gt;学习笔记 : Java web之&lt;code&gt;JSTL&lt;/co
      
    
    </summary>
    
    
      <category term="Java web" scheme="http://yoursite.com/tags/Java-web/"/>
    
  </entry>
  
  <entry>
    <title>VOA:Researchers Find Clues that Depression May Speed Brain Aging</title>
    <link href="http://yoursite.com/2019/04/26/VOA-Researchers-Find-Clues-that-Depression-May-Speed-Brain-Aging/"/>
    <id>http://yoursite.com/2019/04/26/VOA-Researchers-Find-Clues-that-Depression-May-Speed-Brain-Aging/</id>
    <published>2019-04-25T22:51:42.000Z</published>
    <updated>2019-04-28T01:49:08.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Researchers-Find-Clues-that-Depression-May-Speed-Brain-Aging"><a href="#Researchers-Find-Clues-that-Depression-May-Speed-Brain-Aging" class="headerlink" title="Researchers Find Clues that Depression May Speed Brain Aging"></a>Researchers Find Clues that Depression May Speed Brain Aging</h2><p><em>Memory and thinking skills naturally slow with age. Scientists are now looking inside living brains to tell if <code>depression</code> might speed aging. The scientists report that some of the signs they have found are worrisome.</em></p><ul><li><em>随着年龄增长,人的记忆力和思维能力也随之减退.科学家正在研究活人大脑的内部情况,以判断抑郁症是否会加速大脑老化.科学家报告称,他们发现一些迹象令人十分担忧.</em></li></ul><p><em>Depression has long been linked to some <code>cognitive</code> problems. Depression late in life even may increase the risk of developing <code>Alzheimer&#39;s disease</code>. Yet how depression might harm the ability to remember things and things and think clearly is not yet known.</em></p><ul><li><em>长期以来,抑郁症就与一些认知障碍相关联.在晚年,抑郁症甚至可能增加患增加<code>阿尔兹海默病</code>的风险.而然,关于抑郁症会如何损害记忆力及清晰的思维能力,目前尚不清楚.</em></li></ul><p><em>One pssibility : Brain cells communicate by sending messages across connections called <code>synapses</code>. Generally,good <code>cognition</code> is linked to more and stronger synapses. With a weakening of congnitive ability,those connections slowly <code>shrink</code> and die. But unitl recently,scientists could count synapses only in brain <code>tissue</code> collected after the person dies.</em></p><ul><li><em>一种可能是: 脑细胞间通过被称为突触的连接进行交流.一般来说,良好的认知能力表明突触数量多且强健.随着认知能力的退化,突触会慢慢萎缩并消亡.但直到最近,科学家还仅能通收集逝者的大脑组织来计算出突触的数量.</em></li></ul><p><em>Yale University scientists used a new method to study the brains of living people. They discovered that patients with depression had a lower <code>density</code> of synapses than healthy people of the same age.</em></p><ul><li><em>耶鲁大学科学家采用了一种新方法来研究活人的大脑.他们发现,抑郁症患者的突触密度比同龄的健康人群要低.</em></li></ul><p><em>The lower the density,the more <code>severe</code> the signs of depression. Yele University <code>neuroscientist</code> Irna Esterlis says this is especially true of problems with loss of interest in activities patients once enjoyed. She spoke at a meeting of the American <code>Association</code> for the Advancement of Science.</em></p><ul><li><em>突触密度越低,患抑郁症的迹象越严重.耶鲁大学神经学家伊琳娜·埃斯特曾在美国科学促进会的一次会议发言上说: 病人对曾经喜欢的活动失去兴趣的问题尤其如此.</em></li></ul><p><em>Esterlis was not studying just older adults,but people of all ages,including those too young for any <code>cognitive</code> changes to be noticeable. She was working from a <code>theory</code> that early damage can <code>build up</code>.</em></p><ul><li><em>埃斯特里并不仅仅是在研究老年人,而是所有年龄段的人群,包括那些非常年轻,无法注意到任何认知变化的人群.她的研究建立在”早起伤害会不断积累”这一理论上.</em></li></ul><p><em>“We think depression might be accelerating the normal <code>aging</code>,”she said.</em></p><ul><li><em>她说: “我们认为抑郁症可能正加速正常衰老.”</em></li></ul><p><em>Her studies are small. To prove if depression really does increase the risk of <code>cognitive</code> problem as we age would require more <code>investigation</code>. Jovier Evans is a scientist with the U.S. National Institute of Mental Health. He proposed a study of <code>synaptic</code> density on larger numbers of people as they get older,to see if and how it changes over time in those with and without depression.</em></p><ul><li><em>她进行的是小型研究.要证明随着年龄的增长,抑郁症确实会增加认知障碍的风险需要进行更多的调查.乔维尔·埃文斯是美国国家心理健康研究所的科学家.他提出一项研究: 针对更多的人群,研究他们随着年龄的增长,突触密度的变化,以此来判断在那些患抑郁症和无抑郁症的人群中,随着时间的推移,突触密度是否改变以及如何改变.</em></li></ul><p><em>Eaterlis has announced plans for a larger study to do that. Volunteers would be injected with a <code>radioactive</code> <code>substance</code> that <code>links up</code> to a protein in the <code>vesicles</code>,or storage containers,used by synapses. Then each volunteer would be given an imaging test,known as a PET scan. During the test,areas with synapses light up,enabling researchers to see how many are in different parts of the brain.</em></p><ul><li><em>埃斯特里已宣布要进行大规模对的研究计划.志愿者将注射放射性物质,该物质与囊泡中的蛋白质或突触使用的储存容器相连.然后,每位志愿者将进行影像检查,也就是PET扫描.检查期间,突触区域会亮起来,这样研究人员就能够看到大脑的不同部位有多少突触.</em></li></ul><p><em>Esterlis said there are no medications that <code>target</code> synapse damage.</em></p><ul><li><em>埃斯特里表示目前没有专门治疗突触损伤的药物.</em></li></ul><p><em>Doctor Mary Sano directs the Mount Sinai Alzheimer’s Disease Research Center in New York. She was not <code>involved in</code> the new research.</em></p><ul><li><em>玛丽·萨诺医生是纽约西奈山阿尔茨海默病研究中心的负责人.她没有参与这项新研究.</em></li></ul><p><em>Sano warned that normal cognitive aging is <code>complex</code> process that involves other health problems,such as heart disease. It might be that depression does not worsen synaptic weakening. It could just makes the problem more noticeable,she said.</em></p><ul><li><em>萨诺提醒说,正常的认知衰退是个复杂的过程,设计其他健康问题,比如心脏病.也有可能抑郁症不会加速突触退化.她说,抑郁症可能只是让问题更显而易见.</em></li></ul><p><em>With depression “at any age,there’s a hit on the brain. At an older age hit may be more visible because there may already be some loss,” she explained.</em></p><ul><li><em>患抑郁症 “在任何年纪,都会对大脑造成伤害.对较大年纪的人群而言,这种伤害可能更明显,因为他们的大脑可能已有一些损伤.”</em></li></ul><p><em>I’m Ashley Thompson.</em></p><h3 id="重点词汇"><a href="#重点词汇" class="headerlink" title="重点词汇"></a>重点词汇</h3><ol><li>cognition        <code>(n)</code>       认识,认识能力.</li><li>depression       <code>(n)</code>       抑郁症,精神忧郁.</li><li>Alzheimer        <code>(n)</code>       阿尔茨海默病.</li><li>synapse          <code>(n)</code>       突触.</li><li>tissue           <code>(n)</code>       组织.</li><li>density          <code>(n)</code>       密度.</li><li>neuroscientist   <code>(n)</code>       神经系统科学家.</li><li>association      <code>(n)</code>       协会,联盟.</li><li>theory           <code>(n)</code>       理论,原理.</li><li>aging           <code>(n)</code>       老化,陈化.</li><li>investigation   <code>(n)</code>       调查,调查研究.</li><li>substance       <code>(n)</code>       物质,实质.</li><li>vesicle         <code>(n)</code>       泡,囊.</li><li>target          <code>(n)</code>       目标,指标.</li><li>accelerate      <code>(a)</code>       加速,加快.</li><li>visible         <code>(a)</code>       看的见得.  </li><li>severe          <code>(a)</code>       严峻的,严厉的.</li><li>noticeable      <code>(a)</code>       显著的,显而易见的.</li><li>cognitive       <code>(a)</code>       认知的,认识的.</li><li>synaptic        <code>(a)</code>       突触的.</li><li>radioactive     <code>(a)</code>       [核]放射性的,有辐射的.</li><li>complex         <code>(a)</code>       复杂的,合成的.</li><li>shrink          <code>(v)</code>       收缩,畏缩.</li></ol><h3 id="重点短语"><a href="#重点短语" class="headerlink" title="重点短语"></a>重点短语</h3><ol><li>build up : 增进,加强.</li><li>link up : 会合,连接.</li><li>involved in : 参与,涉及.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Researchers-Find-Clues-that-Depression-May-Speed-Brain-Aging&quot;&gt;&lt;a href=&quot;#Researchers-Find-Clues-that-Depression-May-Speed-Brain-Aging
      
    
    </summary>
    
    
      <category term="VOA" scheme="http://yoursite.com/tags/VOA/"/>
    
  </entry>
  
  <entry>
    <title>JSP 自定义标签</title>
    <link href="http://yoursite.com/2019/04/25/JSP-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2019/04/25/JSP-自定义标签/</id>
    <published>2019-04-25T03:26:47.000Z</published>
    <updated>2019-04-25T13:39:56.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSP-自定义标签"><a href="#JSP-自定义标签" class="headerlink" title="JSP 自定义标签"></a>JSP 自定义标签</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><ol><li>什么是<code>JSP</code>自定义标签?<br><em>自定义标签可以有效地将HTML代码与Java代码分类,从而使不懂Java编程的HTLML设计人员也可以编写出功能强大的JSP页面.JSP复规范中定义了多个用于开发自定义标签的接口和类,它们都位于<code>javax.servlet.jsp.tagext</code>包中,这些接口和类的继承关系如下所示.</em></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/25/JSP-自定义标签/java-servlet-jsp-tagext.png" alt title>                </div>                <div class="image-caption"></div>            </figure><ol start="2"><li>标签分类<br><em>在<code>JSP2.0</code>之前,所有的标签都需要实现<code>Tag</code>接口,这样的标签称为: <code>传统标签( javax.servlet.jsp.tagext.Tag )</code>. 后来为了简化标签的开发,JSP2.0规范又定义了一种新类型的标签,称为<code>简单标签( javax.servlet.jsp.tagext.SimpleTag )</code></em></li></ol><h3 id="自定义标签的开发步骤"><a href="#自定义标签的开发步骤" class="headerlink" title="自定义标签的开发步骤"></a>自定义标签的开发步骤</h3><ol><li><p>编写标签处理器<br><em><code>Tag</code>接口和<code>SimpleTag</code>接口定义了JSP页面与标签处理器类之间的通信规则.如果JSP引擎在编译JSP页面时遇到了自定义标签,<code>传统标签</code>将会调用标签处理器的<code>doStartTag()</code>方法,简单标签将会调用标签处理器类的<code>doTag()</code>方法.</em></p></li><li><p>编写标签库描述符文件<br><em>要想让JSP引擎在遇到自定义标签时,能找到其所对应的标签处理器,还必须编写是一个标签描述符( <code>Tag Library Descriptor</code> )文件.简称: <code>TLD</code>文件.</em></p></li></ol><ul><li><em>注意: 自定义标签的根标签(<code>&lt;taglib&gt;</code>)使用的是schema约束.其标签内容可以从 : <code>&lt;Tomcat安装目录&gt;\webapps\examples\WEB-INF\jsp2\jsp2-example-taglib.tld</code>中复制即可.</em> </li></ul><ol start="3"><li>在JSP页面导入和使用自定义标签<br><em>TLD文件编写完成后,就可以在JSP文件中使用自定义标签.在使用自定义标签之前,首先需要使用<code>taglib</code>指令来引入TLD文件.</em></li></ol><h3 id="传统标签"><a href="#传统标签" class="headerlink" title="传统标签"></a>传统标签</h3><ol><li><code>Tag</code> 接口</li></ol><p><em>Tag接口定义了JSP页面与标签处理器之前的通信规则,当JSP容器将JSP页面翻译成Servlet源文件时,如果遇到JSP标签,会创建标签处理器类的实例对象.然后依次调用标签处理器的如下方法.</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setPageContext() ——&gt; setParent() ——&gt; doStartTag() ——&gt; doEndTag() ---&gt; release()</span><br></pre></td></tr></table></figure></p><ol start="2"><li><code>IterationTag</code> 接口</li></ol><p><em>在自定义标签的开发过程中,其可以对标签体的内容进行重复处理.</em></p><ul><li><em><code>TagSupport</code>类实现了该接口,简化了程序的编写.</em></li></ul><ol start="3"><li><code>BodyTag</code> 接口</li></ol><p><em>在实现自定义标签时,其可以根据需要对标签体的内容进行处理后再向浏览器输出.</em></p><h4 id="案例-实现一个传统自定义标签"><a href="#案例-实现一个传统自定义标签" class="headerlink" title="案例-实现一个传统自定义标签"></a>案例-实现一个<code>传统</code>自定义标签</h4><p><em>描述 : 开发一个显示IP地址的自定义标签</em></p><ol><li><p>编写完成标签功能的标签处理器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.tag.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.TagSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: IpTag</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 传统标签处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 25, 2019 4:06:28 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpTag</span> <span class="keyword">extends</span> <span class="title">TagSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8446674958888389920L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doStartTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException </span>&#123;</span><br><span class="line"></span><br><span class="line">String IP = pageContext.getRequest().getRemoteAddr();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pageContext.getOut().write(<span class="string">"访问用户的IP地址为 : "</span> + IP);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.doStartTag();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写TLD文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标签库的版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签库的名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">short-name</span>&gt;</span>TraditionalTag<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签库的URI --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uri</span>&gt;</span>https://yubuntu0109.github.io<span class="tag">&lt;/<span class="name">uri</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册一个自定义的标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定自定义标签的注册名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>ipTag<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定标签的标签处理器类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>pers.huangyuhui.tag.handler.IpTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定标签的类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body-content</span>&gt;</span>empty<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写JSP文件,并导入和使用自定义标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%--</span> 导入自定义的标签库描述符文件 <span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"https://yubuntu0109.github.io"</span> <span class="attr">prefix</span>=<span class="string">"yu"</span> %&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>测试自定义标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">yu:ipTag</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="简单标签"><a href="#简单标签" class="headerlink" title="简单标签"></a>简单标签</h3><ol><li><code>SimpleTag</code> 接口</li></ol><p><em>SimpleTag接口中的方法和传统标签中定义的签名有所区别,但是功能却基本一致,例如: 都实现了给<code>标签处理器</code>传递<code>pageContext</code>对象和父标签处理器对象的功能.而且<code>JSP容器</code>执行简单标签处理器的顺序也和执行传统标签处理器的顺序一致.简单标签处理器的执行流程如下所示:</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSP容器实例化标签处理器类 ——&gt; setJspContext() ——&gt; setParent() ——&gt; 设置属性的setter方法 ——&gt; setJspBody() ——&gt; doTag()</span><br></pre></td></tr></table></figure></p><ol start="2"><li><code>JspFragment</code> 类</li></ol><p><em>JSP容器在处理简单标签时,会把标签体内容用一个JspFragment对象表示,并调用标签处理器对象的setJspBody()方法将JspFragment对象传递给标签处理器对象,标签开发者可以根据需要调用JspFragment对象的方法来决定是否输出标签体,或者循环多次输出标签体等.其中JspFragment的<code>invoke(Write out)</code>方法是简单标签开发中最重要的一个方法,它用于控制如何执行标签体的内容.</em></p><ol start="3"><li><code>SimpleTagSupport</code> 类</li></ol><p><em>该类实现了<code>SimpleTagSupport</code>接口,继而使得简单标签处理器的编写变得简化.</em></p><h4 id="案例-实现一个自定义简单标签"><a href="#案例-实现一个自定义简单标签" class="headerlink" title="案例-实现一个自定义简单标签"></a>案例-实现一个自定义简单标签</h4><p><em>描述 : 自定义简单标签,实现重复执行标签体的功能.</em></p><ol><li><p>编写标签处理器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.tag.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.JspFragment;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.SimpleTagSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: SimpleIterate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 简单标签处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 24, 2019 4:52:19 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleIterate</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.num = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// 对标签进行逻辑处理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 获取标签体</span></span><br><span class="line">JspFragment jspFragment = <span class="keyword">this</span>.getJspBody();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">jspFragment.invoke(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>编写简单标签库描述符文件</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标签库的版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签库的名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">short-name</span>&gt;</span>SimpleTag<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签库的URI --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uri</span>&gt;</span>/SimpleTag<span class="tag">&lt;/<span class="name">uri</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册一个自定义的标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>simpleIterate<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>pers.huangyuhui.tag.handler.SimpleIterate<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用于描述自定义标签的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定属性的名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>num<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定在JSP页面调用自定义标签时是否必须设置这个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">required</span>&gt;</span>true<span class="tag">&lt;/<span class="name">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写JSP文件,并导入和使用自定义标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"/SimpleTag"</span>  <span class="attr">prefix</span>=<span class="string">"yu"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>测试自定义标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">yu:simpleIterate</span> <span class="attr">num</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">Hello SimpleTag !<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">yu:simpleIterate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="案例-模拟JSTL的-lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签"><a href="#案例-模拟JSTL的-lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签" class="headerlink" title="案例-模拟JSTL的&lt;c:choose&gt;,&lt;c:when&gt;,&lt;c:otherwise&gt;标签"></a>案例-模拟<code>JSTL</code>的&lt;c:choose&gt;,&lt;c:when&gt;,&lt;c:otherwise&gt;标签</h4><p><em>描述 : 通过模仿<code>JSTL</code>核心标签库中的&lt;c:choose&gt;,&lt;c:when test=””&gt;,&lt;c:otherwise&gt;标签,开发一套自己的标签 :  <code>&lt;yu:choose&gt;</code>,<code>&lt;yu:when test=&quot;&quot;&gt;</code>,<code>&lt;yu:otherwise&gt;</code></em></p><ol><li><p><em>编写标签<code>&lt;yu:choose&gt;</code>的标签处理器类 : ChooseTag.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.tag.handler.choose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.SimpleTagSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ChooseTag</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 标签处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 24, 2019 5:15:53 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChooseTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为标识符用于控制&lt;yu:when&gt;和&lt;yu:otherwise&gt;的标签体是否执行</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.flag = flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.getJspBody().invoke(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>编写标签<code>&lt;yu:when test=&quot;&quot;&gt;</code>的标签处理器类 : WhenTag.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.tag.handler.choose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspTagException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.JspTag;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.SimpleTagSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: WhenTag</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 标签处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 24, 2019 5:19:01 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhenTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于接收标签中`test`属性传入的值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> test;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">(<span class="keyword">boolean</span> test)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.test = test;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得父类标签对象</span></span><br><span class="line">JspTag tag = <span class="keyword">this</span>.getParent();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断父标签是否为: ChooseTag</span></span><br><span class="line"><span class="keyword">if</span> (!(tag <span class="keyword">instanceof</span> ChooseTag)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> JspTagException(<span class="string">"ERROR : OUT OF CHOOSE TAG"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将父类标签对象强转成`ChooseTag`类型</span></span><br><span class="line">ChooseTag chooseTag = (ChooseTag) tag;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断`WhenFlag`为true且父标签中的`flag`为false时执行该标签体</span></span><br><span class="line"><span class="keyword">if</span> (test &amp;&amp; !(chooseTag.isFlag())) &#123;</span><br><span class="line"><span class="keyword">this</span>.getJspBody().invoke(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行完标签体后,将父标签中的`flag`置为true,防止其它嵌套标签体继续执行</span></span><br><span class="line">chooseTag.setFlag(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>编写<code>&lt;yu:otherwise&gt;</code>的标签体处理器类 : OtherwiseTag.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.tag.handler.choose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspTagException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.JspTag;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.SimpleTagSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: OtherwishTag</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 标签处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 24, 2019 5:46:33 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherwiseTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得父标签对象</span></span><br><span class="line">JspTag jspTag = <span class="keyword">this</span>.getParent();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断父标签是否是: ChooseTag</span></span><br><span class="line"><span class="keyword">if</span> (!(jspTag <span class="keyword">instanceof</span> ChooseTag)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> JspTagException(<span class="string">"ERROR : OUT OF CHOOSE TAG"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将父类标签对象强转成`ChooseTag`类型</span></span><br><span class="line">ChooseTag chooseTag = (ChooseTag) jspTag;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断父标签中的`flag`为false时,执行该标签体</span></span><br><span class="line"><span class="keyword">if</span> (!chooseTag.isFlag()) &#123;</span><br><span class="line"><span class="keyword">this</span>.getJspBody().invoke(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行完标签体后,将父标签中的`flag`置为true,防止其它嵌套标签体继续执行</span></span><br><span class="line">chooseTag.setFlag(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>编写<code>TLD</code>文件</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>模拟JSTL的choose,when,otherwish标签<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">short-name</span>&gt;</span>SimpleTag<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uri</span>&gt;</span>https://yubuntu0109.github.io<span class="tag">&lt;/<span class="name">uri</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- choose tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>choose<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>pers.huangyuhui.tag.handler.choose.ChooseTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- when tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>when<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>pers.huangyuhui.tag.handler.choose.WhenTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">注意: 属性名一定要和该标签的处理器类中的属性名一致 !</span></span><br><span class="line"><span class="comment">否则抛出异常:  Unable to find setter method for attribute: xxx ..</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">required</span>&gt;</span>true<span class="tag">&lt;/<span class="name">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rtexprvalue</span>&gt;</span>true<span class="tag">&lt;/<span class="name">rtexprvalue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- otherwise tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>otherwise<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>pers.huangyuhui.tag.handler.choose.OtherwiseTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>编写两个JSP文件,对三个自定义标签进行测试.</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>测试自定义标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>请选择你热爱的运动哟 (づ￣3￣)づ╭❤～<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"choose_when_otherwise.jsp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>  <span class="attr">name</span> = <span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"badminton"</span>/&gt;</span>羽毛球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>  <span class="attr">name</span> = <span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"footall"</span>/&gt;</span>足球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>  <span class="attr">name</span> = <span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"basketball"</span>/&gt;</span>篮球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>  <span class="attr">name</span> = <span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"others"</span>/&gt;</span>其它<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%--</span> 导入自定义的标签库描述符文件 <span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"https://yubuntu0109.github.io"</span>  <span class="attr">prefix</span>=<span class="string">"yu"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>测试自定义标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">yu:choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">yu:when</span> <span class="attr">test</span>=<span class="string">"$&#123;param.hobby=='badminton' &#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你热爱的运动是: 羽毛球<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">yu:when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">yu:when</span> <span class="attr">test</span>=<span class="string">"$&#123;param.hobby=='footall' &#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你热爱的运动是: 足球<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">yu:when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">yu:when</span> <span class="attr">test</span>=<span class="string">"$&#123;param.hobby=='basketball' &#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你热爱的运动是: 篮球<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">yu:when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">yu:otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>哎哟 ~ 难道你只会coding ! ヾ(◍°∇°◍)ﾉﾞ<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">yu:otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">yu:choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JSP-自定义标签&quot;&gt;&lt;a href=&quot;#JSP-自定义标签&quot; class=&quot;headerlink&quot; title=&quot;JSP 自定义标签&quot;&gt;&lt;/a&gt;JSP 自定义标签&lt;/h2&gt;&lt;h3 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="JSP" scheme="http://yoursite.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>VOA:5 Habits of Very Successful People</title>
    <link href="http://yoursite.com/2019/04/25/VOA-5-Habits-of-Very-Successful-People/"/>
    <id>http://yoursite.com/2019/04/25/VOA-5-Habits-of-Very-Successful-People/</id>
    <published>2019-04-25T02:08:13.000Z</published>
    <updated>2019-04-25T14:06:53.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="5-Habits-of-Very-Successful-People"><a href="#5-Habits-of-Very-Successful-People" class="headerlink" title="5 Habits of Very Successful People"></a>5 Habits of Very Successful People</h2><p><em>From VOA Learning English,this is Health&amp;Lifestyle report.</em></p><ul><li><em>欢迎收听VOA慢速英语健康及生活方式报道.</em></li></ul><p><em>Having success and being able to meet one’s goals requires knowledge,a sense of direction,hard work and resources. Some people might add to that list luck,connections and <code>perhaps</code> a strong belief in yourself.</em></p><ul><li><em>获得成功以及达到某人的目标需要知识,方向感,努力付出和资源.一些人也许会将幸运,关系和自信加入其中.</em></li></ul><p><em>We accomplish our goals one step at a time,doing a little each day. So,using your day effectively is important.</em></p><ul><li><em>我们一步步完成自己的目标,每天完成一点.所以高效率地过好每天很重要.</em></li></ul><p><em>On many websites——from Forbes <code>magazine</code> and Fast Commpany to health and physical fitness sites——<code>productivity</code> experts share advice on how to achieve your career and life goals. Most of the experts agree on one thing: Starting your day on the right foot is most important.</em></p><ul><li><em>很多网站上,从福布斯杂志,快递公司到健康网站,专家都分享如何能够实现职业和生活目标的建议.很多专家都同意一点: 每一天开一个好头最重要.</em></li></ul><p><em>Collected from these websites,here are five ideas on how to start your day <code>off right</code>.</em></p><ul><li><em>根据这些网站整理出五点,关于如何做到开门大吉.</em></li></ul><ol><li>Get up an hour early.</li></ol><ul><li><em>第一: 早起一小时.</em></li></ul><p><em>People who get up early in the morning have a jump on the day. For starters,they’s awake! And some studies show that our <code>willpower</code> and attention <code>span</code> are strongest in the morning. In fact,the morning may be the most <code>productive</code> part of your day.</em></p><ul><li><em>早起的人们在那一天就已经领先一步.首先,他们已经清醒了.一些研究显示,我们的意志力和注意力在早上最集中.事实上,早晨可能是你一天当中效率最高的时候.</em></li></ul><p><em>In American English,we like to say,”The early bird gets the <code>worm</code>.” Here,if you’re a bird,the worm is the reward. So,this expression means that people who rise up early have a head start and,therefore,are more likely to succeed.</em></p><ul><li><em>在美式英语中,我们喜欢说: “早起的鸟儿有虫吃.” 如果你是一只鸟,虫子就是你早起的回报.这个表达是指早起的人们捷足先登,因此更可能成功.</em></li></ul><p><em><code>Inventor</code>,<code>philosopher</code> and writer Benjamin Franklin would probably agree. Americans like to use Franklin’s <code>memorable</code> expressions. One of them is “Early to bed,early to rise,makes a man healthy,wealthy and wise.”</em></p><ul><li><em>发明家,哲学家及作家的本杰明·富兰克林可能会同意这一点.美国人喜欢引用富兰克林的经典语录.其中一条是: “早睡早起会让人聪明,富有及智慧.”</em></li></ul><p><em>Of course,there are exceptions. People who are “night <code>owls</code>“ do their best work and their best thinking at night.</em></p><ul><li><em>当然也有例外.”夜猫子”型的人在晚上的工作效率最高.思维最活跃.</em></li></ul><ol start="2"><li>Drink a glass of with lemon juice.</li></ol><ul><li><em>第二: 喝一杯柠檬水.</em></li></ul><p><em>While your coffee is being prepared or waiting for your tea water to heat up,drink a glass of water with lemon juice.</em></p><ul><li><em>当你在煮咖啡或蒸茶时,先喝一杯柠檬水.</em></li></ul><p><em>Why? Health experts say that drinking a <code>combination</code> of lemon juice and water first thing in the morning jump-starts the body’s <code>metabolism</code>. Not only does it jump start your body’s cells,but this kind keeps them moving throughout the day.</em></p><ul><li><em>为什么呢? 健康专家表示,早上先喝一杯柠檬会激活身体的新陈代谢.不仅会激活你身体的细胞,还会让这些细胞整天保持运转.</em></li></ul><ol start="3"><li>Don’t answer emial or jump into social media as soon as you get up.</li></ol><ul><li><em>第三: 一起床不要先回邮件或查看社交媒体.</em></li></ul><p><em>Your coffee or tea is ready. So,you decide to look at your email quickly or open up your Facebook account. Well,don’t. This is a great way to forget about the day ahead.</em></p><ul><li><em>你的咖啡或茶煮好了.你决定先快速浏览一遍邮件或打开你的社交账户.不要这么做.这会让你忘记这是全新的一天.</em></li></ul><p><em>We’ve all done it. You see a Facebook post from a friend you haven’t seen in a long time. He is angry about some <code>political</code> issue and the heated discussion pulls you in. Before you know it,an hour has passed,you’re angry with <code>lawmakers</code> and it’s not even nine in the morning yet! You hurry out the door so as not to be later for work. This is not the best way to start your day.</em></p><ul><li><em>我们都这么做过.你看到很久不见的朋友发了一条状态.他对某个政治问题感到很气愤,然后拉你进入热烈的讨论.不知不觉中,一个小时过去了,你对立法者感到很生气,这时早上还不到九点.你为了避免上班迟到而急匆匆地冲出门外.这绝不是开启一天的最佳方式.</em></li></ul><ol start="4"><li>Exercise !</li></ol><p><em>Some people may disagree with this one. Exercising in the morning may not be for everyone. Some people like to exercise after work or at night.</em></p><ul><li><em>一些人可能不同意.在早上锻炼并不适合所有人.一些人喜欢下班后或晚上锻炼.</em></li></ul><p><em>Physical fitness experts and trainers often suggest some form of exercise in the morning because the middle of the day is busy time for most people. By the day’end,you may not have the time or energy to exercise. How many times have you finished work and said to yourself. “I’m too tired to exercise! I’ll do it tomorrow.”</em></p><ul><li><em>健身专家和教练通常会建议在早上做一些形式的运动,因为白天对大多数人来说就是最繁忙的时候.白天结束后,你可能就没有时间或精力去运动了.有多少次你下班后告诉自己: “我太累了,不能再锻炼了,明天再去锻炼吧!”</em></li></ul><p><em>Exercising in the morning prevents that from happening.</em></p><ul><li><em>在早上锻炼可以防止这一点.</em></li></ul><ol start="5"><li>Think about your day…at night.</li></ol><ul><li><em>第五,在晚上思考你白天做的事情.</em></li></ul><p><em><code>Meditate</code>,<code>visualize</code>——whatever you call it——take time at the day to think back on all the things that have happened. Give thanks,if you want. And spend a little time to think about tomorrow. Some people who talk about “living in the present” may <code>criticize</code> this. But it may help you to prepare if you take a few minutes to think about what you need to do the next day.</em></p><ul><li><em>冥想,思考——无论你将其称为什么—— 一天结束前花点时间想想今天发生过的事.感恩这一天.然后花点时间想想明天.一些坚持”活在当下”的人可能会批判这一点.但如果你能花几分钟想想第二天需要做些什么,可能会帮助你提前进行准备继而提高效率.</em></li></ul><p><em>Also,know that your day will probably change. You probably won’t have time to do everything you planned. But that’s fine. If you did one thing, that means you are one step closer in reaching one of your goals. And if you follow this advise,at least you’ve already gotten your exercise <code>out of the way !</code></em></p><ul><li><em>同时要知道,这一天也许会发生某些变化,你也许没有时间做完你所计划的所有的事,但这也没关系.如果你做完一件事,就离你完成这个目标近了一步.如果你遵循这些建议,至少你不会忘了锻炼.</em></li></ul><p><em>And that’s the Health&amp;Lifestyle report.</em><br><em>I’m Anna Matteo.</em></p><h3 id="重点词汇"><a href="#重点词汇" class="headerlink" title="重点词汇"></a>重点词汇</h3><ol><li>willpowr         <code>(n)</code>           意志力,毅力.</li><li>perhaps          <code>(n)</code>           假定,猜想.</li><li>magazine         <code>(n)</code>           杂志.</li><li>productivity     <code>(n)</code>           生产力,生产率,生产能力.</li><li>willpower        <code>(n)</code>           意志力,毅力.</li><li>owl              <code>(n)</code>           猫头鹰,惯于晚上活动的人.</li><li>span             <code>(n)</code>           跨度,跨距,范围.</li><li>worm             <code>(n)</code>           虫,蠕虫.</li><li>inventor        <code>(n)</code>           发明家,[专利]发明人.</li><li>philosopher     <code>(n)</code>           哲学家,哲人.</li><li>lawmaker        <code>(n)</code>           立法者.</li><li>combination     <code>(n)</code>           结合,组合.</li><li>metabolism      <code>(n)</code>           [生理]新陈代谢.</li><li>memorable       <code>(a)</code>           显著的,难忘的,值得纪念的.</li><li>political       <code>(a)</code>           政治的,党派的.</li><li>meditate        <code>(v)</code>           考虑,计划,冥想.</li><li>visualize       <code>(v)</code>           形象,想像,设想.</li><li>criticize       <code>(v)</code>           批评,评论,苛求.  </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;5-Habits-of-Very-Successful-People&quot;&gt;&lt;a href=&quot;#5-Habits-of-Very-Successful-People&quot; class=&quot;headerlink&quot; title=&quot;5 Habits of Very Success
      
    
    </summary>
    
    
      <category term="VOA" scheme="http://yoursite.com/tags/VOA/"/>
    
  </entry>
  
  <entry>
    <title>详解Java对象的引用及赋值</title>
    <link href="http://yoursite.com/2019/04/23/%E8%AF%A6%E8%A7%A3Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%95%E7%94%A8%E5%8F%8A%E8%B5%8B%E5%80%BC/"/>
    <id>http://yoursite.com/2019/04/23/详解Java对象的引用及赋值/</id>
    <published>2019-04-23T10:21:00.000Z</published>
    <updated>2019-04-23T14:16:50.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="细节-详解Java中对象的引用及赋值"><a href="#细节-详解Java中对象的引用及赋值" class="headerlink" title="细节 : 详解Java中对象的引用及赋值"></a>细节 : 详解<code>Java</code>中对象的引用及赋值</h2><h3 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h3><ol><li><em>前言</em></li></ol><p><em>前些天学习数据结构与算法时特意写了一篇名为<code>详解Linked-list的实现方式及其应用</code>的文章,其中<code>循环链表</code>的代码中就淋漓尽致地体现了Java中<code>对象</code>的引用与赋值</em></p><ol start="2"><li><p><em>循环链表的实现</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: CircularLinkedList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 操作循环链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 16, 2019 7:25:36 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircularLinkedList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the length of the circular linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(ListNode&lt;T&gt; headNode)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line"><span class="keyword">while</span> (currentNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">currentNode = currentNode.getNext();</span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">if</span> (currentNode == headNode) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// traverse the node of the circular linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverseNode</span><span class="params">(ListNode&lt;T&gt; headNode)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"\n### [headNode]-address : "</span> + headNode + <span class="string">"\n"</span>);</span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line"><span class="keyword">while</span> (currentNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.print(currentNode.getData() + <span class="string">" -&gt; "</span>);</span><br><span class="line">currentNode = currentNode.getNext();</span><br><span class="line"><span class="keyword">if</span> (currentNode == headNode) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">"headNode("</span> + currentNode.getData() + <span class="string">")\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add new node at the tail of linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAtListTail</span><span class="params">(ListNode&lt;T&gt; headNode, ListNode&lt;T&gt; newNode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line"><span class="keyword">while</span> (currentNode.getNext() != headNode) &#123;</span><br><span class="line"><span class="comment">//// 注意: 由于`currentNode`无变化,导致`currentNode.getNext() != headNode`继而进入进入死循环 !////</span></span><br><span class="line"><span class="comment">// currentNode.setNext(currentNode.getNext());</span></span><br><span class="line">currentNode = currentNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line">newNode.setNext(newNode);</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">headNode = newNode;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">newNode.setNext(headNode);</span><br><span class="line">currentNode.setNext(newNode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add new node at the header of linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode&lt;T&gt; <span class="title">insertAtListHeader</span><span class="params">(ListNode&lt;T&gt; headNode, ListNode&lt;T&gt; newNode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line"><span class="keyword">while</span> (currentNode.getNext() != headNode) &#123;</span><br><span class="line">currentNode = currentNode.getNext();<span class="comment">// 尾节点</span></span><br><span class="line">&#125;</span><br><span class="line">newNode.setNext(newNode);<span class="comment">// 指针指向自身</span></span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">headNode = newNode;</span><br><span class="line">&#125;</span><br><span class="line">newNode.setNext(headNode);</span><br><span class="line">currentNode.setNext(newNode);</span><br><span class="line"><span class="comment">// 注意: 此时链表头结点已更新! 所以应该返回更新后的头节点继而避免遍历时出现死循环!!!</span></span><br><span class="line">headNode = newNode;</span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add the new node by the specified index</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode&lt;T&gt; <span class="title">insertNodeByIndex</span><span class="params">(ListNode&lt;T&gt; headNode, ListNode&lt;T&gt; newNode, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Error: the circular list is empty !"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">1</span>) &#123;</span><br><span class="line">insertAtListHeader(headNode, newNode);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == getLength(headNode)) &#123;</span><br><span class="line">insertAtListTail(headNode, newNode);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line">ListNode&lt;T&gt; temp = headNode;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; position - <span class="number">1</span>; i++) &#123;</span><br><span class="line">temp = currentNode;<span class="comment">// 待插节点的前节点</span></span><br><span class="line">currentNode = currentNode.getNext();<span class="comment">// 待插节点</span></span><br><span class="line">&#125;</span><br><span class="line">temp.setNext(newNode);</span><br><span class="line">newNode.setNext(currentNode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete the last node</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteLastNode</span><span class="params">(ListNode&lt;T&gt; headNode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ListNode&lt;T&gt; temp = headNode;</span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"Error: the circular list is empty !"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (currentNode.getNext() != headNode) &#123;</span><br><span class="line">temp = currentNode; <span class="comment">// 尾节点的前一个节点</span></span><br><span class="line">currentNode = currentNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line">temp.setNext(headNode);</span><br><span class="line">currentNode = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete the header node</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode&lt;T&gt; <span class="title">deleteHeaderNode</span><span class="params">(ListNode&lt;T&gt; headNode)</span> </span>&#123;</span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"Error: the circular list is empty !"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (currentNode.getNext() != headNode) &#123;</span><br><span class="line"><span class="comment">// currentNode.setNext(currentNode.getNext());//死循环</span></span><br><span class="line">currentNode = currentNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line">currentNode.setNext(headNode.getNext());</span><br><span class="line"><span class="comment">// 注意: 此时链表头结点已更新! 所以应该返回更新后的头节点继而避免遍历时出现死循环!!!</span></span><br><span class="line">headNode = headNode.getNext();</span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete the node by the specified index</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode&lt;T&gt; <span class="title">deleteNodeByIndex</span><span class="params">(ListNode&lt;T&gt; headNode, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Error: the circular linked list is empty !"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">1</span>) &#123;</span><br><span class="line">deleteHeaderNode(headNode);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == getLength(headNode)) &#123;</span><br><span class="line">deleteLastNode(headNode);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line">ListNode&lt;T&gt; temp = headNode;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; position - <span class="number">1</span>; i++) &#123;</span><br><span class="line">temp = currentNode;<span class="comment">// 待删节点的前节点</span></span><br><span class="line">currentNode = currentNode.getNext();<span class="comment">// 待删节点</span></span><br><span class="line">&#125;</span><br><span class="line">temp.setNext(currentNode.getNext());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链表头结点</span></span><br><span class="line">CircularLinkedList&lt;Integer&gt; list = <span class="keyword">new</span> CircularLinkedList&lt;&gt;();</span><br><span class="line">ListNode&lt;Integer&gt; headNode = <span class="keyword">new</span> ListNode&lt;&gt;();</span><br><span class="line">headNode.setData(<span class="number">1</span>);<span class="comment">// 初始化链表头结点</span></span><br><span class="line">headNode.setNext(headNode);<span class="comment">// 节点指针指向自身</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化待插入的链表节点</span></span><br><span class="line">ListNode&lt;Integer&gt; a = <span class="keyword">new</span> ListNode&lt;&gt;();</span><br><span class="line">a.setData(<span class="number">2</span>);</span><br><span class="line">ListNode&lt;Integer&gt; b = <span class="keyword">new</span> ListNode&lt;&gt;();</span><br><span class="line">b.setData(<span class="number">3</span>);</span><br><span class="line">ListNode&lt;Integer&gt; c = <span class="keyword">new</span> ListNode&lt;&gt;();</span><br><span class="line">c.setData(<span class="number">4</span>);</span><br><span class="line">ListNode&lt;Integer&gt; d = <span class="keyword">new</span> ListNode&lt;&gt;();</span><br><span class="line">d.setData(<span class="number">100</span>);</span><br><span class="line">ListNode&lt;Integer&gt; e = <span class="keyword">new</span> ListNode&lt;&gt;();</span><br><span class="line">e.setData(<span class="number">101</span>);</span><br><span class="line">ListNode&lt;Integer&gt; f = <span class="keyword">new</span> ListNode&lt;&gt;();</span><br><span class="line">f.setData(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向链表的尾部添加三个节点</span></span><br><span class="line">System.out.print(<span class="string">"the origin node: "</span>);</span><br><span class="line">list.insertAtListTail(headNode, a);</span><br><span class="line">list.insertAtListTail(headNode, b);</span><br><span class="line">list.insertAtListTail(headNode, c);</span><br><span class="line">list.traverseNode(headNode);</span><br><span class="line">System.out.println(<span class="string">"the length of the list: "</span> + list.getLength(headNode));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向链表中添加两个头结点( 头结点被更新 )</span></span><br><span class="line">System.out.print(<span class="string">"add two header node: "</span>);</span><br><span class="line">ListNode&lt;Integer&gt; newHeadNode = list.insertAtListHeader(headNode, d);</span><br><span class="line"><span class="comment">// 注意: 由于`头结点`已在`insertAtListHeader`中已更新所以要向`traverseNode`传入新的头结点</span></span><br><span class="line">ListNode&lt;Integer&gt; newHeadNode2 = list.insertAtListHeader(newHeadNode, e);</span><br><span class="line">list.traverseNode(newHeadNode2);</span><br><span class="line">System.out.println(<span class="string">"the length of the list: "</span> + list.getLength(headNode));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表的指定位置上插入新的节点</span></span><br><span class="line">System.out.print(<span class="string">"Insert the new node at position 3: "</span>);</span><br><span class="line">list.insertNodeByIndex(headNode, f, <span class="number">3</span>);</span><br><span class="line">list.traverseNode(newHeadNode2);</span><br><span class="line">System.out.println(<span class="string">"the length of the list: "</span> + list.getLength(headNode));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除链表的尾节点</span></span><br><span class="line">System.out.print(<span class="string">"delete the tail node:  "</span>);</span><br><span class="line">list.deleteLastNode(newHeadNode2);</span><br><span class="line">list.traverseNode(newHeadNode2);</span><br><span class="line">System.out.println(<span class="string">"the length of the list: "</span> + list.getLength(headNode));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意: 由于`头结点`已在`deleteHeaderNode`中已更新所以要向`traverseNode`传入新的头结点对象</span></span><br><span class="line">ListNode&lt;Integer&gt; newHeadNode3 = list.deleteHeaderNode(newHeadNode2);</span><br><span class="line">System.out.print(<span class="string">"delete the header node:  "</span>);</span><br><span class="line">list.traverseNode(newHeadNode3);</span><br><span class="line">System.out.println(<span class="string">"the length of the list: "</span> + list.getLength(headNode));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除链表中指定位置的节点</span></span><br><span class="line">ListNode&lt;Integer&gt; newHeadNode4 = list.deleteNodeByIndex(newHeadNode3, <span class="number">4</span>);</span><br><span class="line">System.out.print(<span class="string">"delete the fourth node: "</span>);</span><br><span class="line">list.traverseNode(newHeadNode4);</span><br><span class="line">System.out.println(<span class="string">"the length of the list: "</span> + list.getLength(headNode));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">the origin node: </span><br><span class="line">### [headNode]-address : pers.huangyuhui.linkedlist.ListNode@16f65612</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span> -&gt; headNode(<span class="number">1</span>)</span><br><span class="line">the length of the list: <span class="number">4</span></span><br><span class="line">add two header node: </span><br><span class="line">### [headNode]-address : pers.huangyuhui.linkedlist.ListNode@311d617d</span><br><span class="line"></span><br><span class="line"><span class="number">101</span> -&gt; <span class="number">100</span> -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span> -&gt; headNode(<span class="number">101</span>)</span><br><span class="line">the length of the list: <span class="number">6</span></span><br><span class="line">Insert the <span class="keyword">new</span> node at position <span class="number">3</span>: </span><br><span class="line">### [headNode]-address : pers.huangyuhui.linkedlist.ListNode@311d617d</span><br><span class="line"></span><br><span class="line"><span class="number">101</span> -&gt; <span class="number">100</span> -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">0</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span> -&gt; headNode(<span class="number">101</span>)</span><br><span class="line">the length of the list: <span class="number">7</span></span><br><span class="line">delete the tail node:  </span><br><span class="line">### [headNode]-address : pers.huangyuhui.linkedlist.ListNode@311d617d</span><br><span class="line"></span><br><span class="line"><span class="number">101</span> -&gt; <span class="number">100</span> -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">0</span> -&gt; <span class="number">3</span> -&gt; headNode(<span class="number">101</span>)</span><br><span class="line">the length of the list: <span class="number">6</span></span><br><span class="line">delete the header node:  </span><br><span class="line">### [headNode]-address : pers.huangyuhui.linkedlist.ListNode@7c53a9eb</span><br><span class="line"></span><br><span class="line"><span class="number">100</span> -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">0</span> -&gt; <span class="number">3</span> -&gt; headNode(<span class="number">100</span>)</span><br><span class="line">the length of the list: <span class="number">5</span></span><br><span class="line">delete the fourth node: </span><br><span class="line">### [headNode]-address : pers.huangyuhui.linkedlist.ListNode@7c53a9eb</span><br><span class="line"></span><br><span class="line"><span class="number">100</span> -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; headNode(<span class="number">100</span>)</span><br><span class="line">the length of the list: <span class="number">4</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="基本数据类型作为参数传递"><a href="#基本数据类型作为参数传递" class="headerlink" title="基本数据类型作为参数传递"></a>基本数据类型作为参数传递</h3><ol><li><p><em>示例程序</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">"before change, i="</span> + i);</span><br><span class="line">change(i);</span><br><span class="line">System.out.println(<span class="string">"after change, i="</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">i = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">before change, i=<span class="number">1</span></span><br><span class="line">after change, i=<span class="number">1</span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. *结论*</span><br><span class="line">   </span><br><span class="line">*当`基本数据类型`作为参数传递时,传递时的是`实参的副本`,既传的是`值`,无论在函数中怎么操作这个副本,实参的值是不会被改变的.*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 对象作为参数传递</span><br><span class="line"><span class="number">1</span>. *第一个示例程序*</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"Hello"</span>);</span><br><span class="line">System.out.println(<span class="string">"before change: "</span> + sb);</span><br><span class="line">change(sb);</span><br><span class="line">System.out.println(<span class="string">"after change: "</span> + sb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(StringBuffer stringBuffer)</span> </span>&#123;</span><br><span class="line">stringBuffer.append(<span class="string">" world !"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before change: Hello</span><br><span class="line">after change: Hello world !</span><br></pre></td></tr></table></figure></li><li><p><em>探究结论</em><br><em>从上述程序运行结果可知<code>sb</code>所指的对象的值被改变了!那么我们是否就可以认为Java中的对象作为参数传递时,传递的是该对象的引用呢 <code>?</code> 那我们再来看第二个示例程序.</em></p></li><li><p><em>第二个示例程序</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"Hello"</span>);</span><br><span class="line">System.out.println(<span class="string">"before change: "</span> + sb);</span><br><span class="line">change(sb);</span><br><span class="line">System.out.println(<span class="string">"after change: "</span> + sb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(StringBuffer stringBuffer)</span> </span>&#123;</span><br><span class="line">stringBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">"Hi"</span>);</span><br><span class="line">stringBuffer.append(<span class="string">" world !"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果</em></p></li></ol><p><em>如果上面的<code>推论</code>:(Java中对象作为参数传递时,实际传递的是该对象的引用)是正确的,那么在调用<code>change</code>函数后,原对象的值应该会被改变,既变为:<code>Hi World !</code>,但是,该程序的运行结果如下 !!!</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before change: Hello</span><br><span class="line">after change: Hello</span><br></pre></td></tr></table></figure></p><p><em>可知原对象(<code>sb</code>)的值并没有被改变,这是为什么呢? 下面让我们来<code>分析</code>一下其中的原因吧嘿嘿 ~</em></p><ol start="6"><li>结论分析</li></ol><p><em>当我们执行<code>StringBuffer sb = new StringBuffer(&quot;Hello&quot;)</code>时,我们便创建了一个指向新建对象<code>new StringBuffer(&quot;Hello&quot;)</code>的引用<code>sb</code>,如下所示.</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb ——————&gt; [Hello]</span><br></pre></td></tr></table></figure></p><p><em>在<code>第二个示例程序</code>中,当我们调用<code>change</code>函数后,实际上,形参<code>stringBuffer</code>也指向了实参<code>sb</code>所指的对象! 如下所示.</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb ——————&gt; [Hello] &lt;—————— stringBuffer</span><br></pre></td></tr></table></figure></p><p><em>那么当我们执行<code>stringBuffer.append(&quot;world!&quot;)</code>后,便通过对象的引用(<code>stringBuffer</code>)修改了对象的值,使之修改成了: <code>Hello world !</code>,如下所示:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb ——————&gt; [Hello world !] &lt;—————— stringBuffer</span><br></pre></td></tr></table></figure></p><p><em>但是在<code>第二个示例程序</code>中的<code>change</code>函数中,我们又新建了一个对象:<code>new StringBuffer(&quot;Hi&quot;)</code>(该操作实际上是在内存中开辟了一块在原对象地址之外的<code>新区域</code>),这让形参<code>stringBuffer</code>实际指向了这个新建的对象,并将新对象的值设置为了<code>Hi world !</code>,如下所示:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sb ——————&gt; [Hello]</span><br><span class="line">stringBuffer ——————&gt; [Hi World !]</span><br></pre></td></tr></table></figure></p><ul><li><em>综上所述,可以得出结论: <code>在Java中,当对象作为参数传递时,实际上传递的是一份&quot;引用&quot;的拷贝 !</code></em></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><em>在Java中, <code>=</code> 不能看成一个赋值语句,因为它并不是把一个对象赋给另一个对象的过程,它的执行过程实质上是将右边对象的<code>地址</code>传给了左边的引用,使得左边的引用指向了右边的对象.Java表面上看起来没有指针,但它的引用实质上就是一个<code>指针</code>,引用里面存放的并不是对象,而是存放该对象的地址,使得该引用指向了该对象.</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;细节-详解Java中对象的引用及赋值&quot;&gt;&lt;a href=&quot;#细节-详解Java中对象的引用及赋值&quot; class=&quot;headerlink&quot; title=&quot;细节 : 详解Java中对象的引用及赋值&quot;&gt;&lt;/a&gt;细节 : 详解&lt;code&gt;Java&lt;/code&gt;中对象的引用
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>VOA:One in Five Deaths Linked to Unhealthy Diet</title>
    <link href="http://yoursite.com/2019/04/23/VOA-One-in-Five-Deaths-Linked-to-Unhealthy-Diet/"/>
    <id>http://yoursite.com/2019/04/23/VOA-One-in-Five-Deaths-Linked-to-Unhealthy-Diet/</id>
    <published>2019-04-23T01:06:07.000Z</published>
    <updated>2019-04-24T02:43:09.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="One-in-Five-Deaths-Linked-to-Unhealthy-Diet"><a href="#One-in-Five-Deaths-Linked-to-Unhealthy-Diet" class="headerlink" title="One in Five Deaths Linked to Unhealthy Diet"></a>One in Five Deaths Linked to Unhealthy Diet</h2><p><em>In 2017,eleven million deaths worldwide were linked to people eating diets high in sugar,salt and processed meat.</em></p><ul><li><em>2017年,全国范围内有1100个死亡案例与摄入含糖,含盐,加工肉制品最高的食物有关.</em></li></ul><p><em>Those foods were partly to blam for heart disease,cancer and <code>diabetes</code>,a new study found.</em></p><ul><li><em>上述食物是导致心脏病,癌症,糖尿病的部分原因,这是一项新研究的发现.</em></li></ul><p><em>The study is called the Global Burden of Disease,It followed eating trends in 195 countries 1990 to 2017. The findings were reported in the publication The Lancet.</em></p><ul><li><em>该研究名为”全国疾病负担研究”.该研究在1990-2017年间跟进了195个国家的饮食趋势.该研究的发现成果以报告的形式发布在了《柳叶刀》杂志上.</em></li></ul><p><em>Researchers considered 15 <code>dietary</code> elements,such as diets low in fruits,vegetables,whole <code>grains</code> and milk. They also looked at diets high in red meat,processed meat,sugar-sweetend drinks and <code>sodium</code>.</em></p><ul><li><em>研究人员考量了15中饮食元素,比如水果,蔬菜,全谷类,牛奶含量少的食谱.研究人员还考量了红肉,加工肉制品,含糖饮料,含钠量高的食谱.</em></li></ul><p><em>The study found that Uzbekistan had the highest <code>percentage</code> of <code>diet-related</code> deaths.</em></p><ul><li><em>该研究发现: 乌兹别斯坦因食谱而导致死亡的比例是最高的.</em></li></ul><p><em>Israel had the lowest <code>proportion</code> of diet-related deaths, while the United Stated reted 43rd in the study.</em></p><ul><li><em>以色列则恰恰相反,美国则名列第43位.</em></li></ul><p><em><code>Consumption</code> of foods such as <code>nuts</code> and seeds,milk and whole gains was on average too low,the researchers found.</em></p><ul><li><em>研究人员发现,平均来看,坚果,种子,牛奶,全谷类的摄入太低.</em></li></ul><p><em>Chris Murrary is <code>director</code> of the Institute for Health <code>Metrics</code> and <code>Evaluation</code> at the University of Washington,which led the work.</em></p><ul><li><em>克里斯·默里是华盛顿大学健康指标和评估研究所的负责人,他也是这项研究的负责人.</em></li></ul><p><em>“Poor diet is reponsible for more deaths than any other risk <code>factor</code> in the world,”he said.</em></p><ul><li><em>他表示,”食谱不健康是导致死亡案例增加的罪魁祸首,比其他的风险都要致命.”</em></li></ul><p><em>The study found people are only 12 percent of the recommended amount of nuts and seeds——an average <code>intake</code> of 3 grams a day. For good health,experts say,you should eat 21 grams of nuts and seeds every day.</em></p><ul><li><em>研究发现,人们摄入坚果和种子的总量只达到了推荐摄入量的12%——平均每天只有3克.多位专家表示,为了保持身体健康,每天应该摄入21克的坚果和种子类食物.</em></li></ul><p><em>The study also found that people drank more than 10 times the recommened amount of <code>sugary</code> drinks.</em></p><ul><li><em>该研究还返现:含糖饮料的摄入量是推荐摄入量的10倍以上.</em></li></ul><p><em>Another study published in January suggested an “ideal diet” for the health of people and the planet would a doubling of the <code>consumption</code> of nuts,fruits,vegetables and <code>legumes</code>. Such a diet would also include reducing by half the amount of meat and sugar <code>consumed</code>.</em></p><ul><li><em>一月份发布的另一个研究提出了一份”理想食谱”来保证人类的身体健康,而且全国范围内的所有人都应该加倍摄入坚果,水果,蔬菜,豆类食品.这样的健康食谱还应该包括将肉类和糖分摄入量减少一半.</em></li></ul><p><em>I’m John Russell.</em></p><h3 id="重点单词"><a href="#重点单词" class="headerlink" title="重点单词"></a>重点单词</h3><ol><li>trend            <code>(n)</code>       潮流,趋势.</li><li>proportion       <code>(n)</code>       比例.</li><li>consumption      <code>(n)</code>       摄入,消耗.</li><li>factor           <code>(n)</code>       因素.</li><li>legume           <code>(n)</code>       豆类,豆科植物.</li><li>diabetes         <code>(n)</code>       糖尿病,多尿症.</li><li>percentage       <code>(n)</code>       百分比,百分率,百分数.</li><li>grain            <code>(n)</code>       粮食,颗粒,[作物]谷物.</li><li>sodium           <code>(n)</code>       [化学]钠.</li><li>proportion      <code>(n)</code>       比例,占比.部分.</li><li>Consumption     <code>(n)</code>       消费,消耗.</li><li>nut             <code>(n)</code>       坚果.</li><li>director        <code>(n)</code>       主任,主管,导演.</li><li>metric          <code>(n)</code>       度量标准.</li><li>evaluation      <code>(n)</code>       评价,[审计]评估,估价.</li><li>factor          <code>(n)</code>       因素,要素.</li><li>intake          <code>(n)</code>       摄取量,通风口.</li><li>consumption     <code>(n)</code>       消费,消耗.</li><li>dietary         <code>(a)</code>       饮食的,饭食的,规定食物的.</li><li>sugary          <code>(a)</code>       含糖的,甜的.</li><li>consume         <code>(v)</code>       消耗,消费.</li><li>recommend       <code>(v)</code>       推荐.</li><li>diet-related                与饮食有关的.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;One-in-Five-Deaths-Linked-to-Unhealthy-Diet&quot;&gt;&lt;a href=&quot;#One-in-Five-Deaths-Linked-to-Unhealthy-Diet&quot; class=&quot;headerlink&quot; title=&quot;One in
      
    
    </summary>
    
    
      <category term="VOA" scheme="http://yoursite.com/tags/VOA/"/>
    
  </entry>
  
  <entry>
    <title>自定义EL函数防止HTML注入</title>
    <link href="http://yoursite.com/2019/04/22/%E8%87%AA%E5%AE%9A%E4%B9%89EL%E5%87%BD%E6%95%B0%E9%98%B2%E6%AD%A2HTML%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2019/04/22/自定义EL函数防止HTML注入/</id>
    <published>2019-04-22T10:19:18.000Z</published>
    <updated>2019-04-22T13:02:32.602Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习笔记-自定义EL函数防止HTML注入"><a href="#学习笔记-自定义EL函数防止HTML注入" class="headerlink" title="学习笔记 : 自定义EL函数防止HTML注入"></a>学习笔记 : 自定义<code>EL</code>函数防止<code>HTML</code>注入</h3><h4 id="防止HTML注入前"><a href="#防止HTML注入前" class="headerlink" title="防止HTML注入前"></a>防止<code>HTML</code>注入前</h4><ol><li><p><em><code>JSP</code>程序代码</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>`HTML`注入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"ResultServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">姓 名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">留 言: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"6"</span> <span class="attr">cols</span>=<span class="string">"50"</span> <span class="attr">name</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em><code>Servlet</code>程序代码</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.el.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ResultServlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 跳转页面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 21, 2019 3:03:53 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ResultServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6692198599916433288L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">String name = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">String message = req.getParameter(<span class="string">"message"</span>);</span><br><span class="line">req.setAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">req.setAttribute(<span class="string">"message"</span>, message);</span><br><span class="line">req.getRequestDispatcher(<span class="string">"result.jsp"</span>).forward(req, resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>所跳转的<code>JSP</code>页面的程序代码</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML注入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">用户名: $&#123;name &#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">留言内容: $&#123;message &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>运行结果示例图</em></p></li></ol><ul><li><em><code>JSP</code>页面</em><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/22/自定义EL函数防止HTML注入/JSP-HTMLInjection.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><em><code>HTML</code>注入结果</em><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/22/自定义EL函数防止HTML注入/JSP-HTMLInjectionResult1.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><h4 id="防止HTML注入后"><a href="#防止HTML注入后" class="headerlink" title="防止HTML注入后"></a>防止<code>HTML</code>注入后</h4><ol><li><p><em>过滤<code>HTML</code>中特殊字符的程序代码</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.el.util;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: HTMLFilter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 过滤特殊字符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 21, 2019 3:42:04 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HTMLFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">filter</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy</span></span><br><span class="line"><span class="keyword">char</span> content[] = <span class="keyword">new</span> <span class="keyword">char</span>[message.length()];</span><br><span class="line">message.getChars(<span class="number">0</span>, message.length(), content, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">StringBuffer result = <span class="keyword">new</span> StringBuffer(content.length + <span class="number">50</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; content.length; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (content[i]) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">result.append(<span class="string">"&amp;lt;"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">result.append(<span class="string">"&amp;gt;"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&amp;'</span>:</span><br><span class="line">result.append(<span class="string">"&amp;amp;"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">result.append(<span class="string">"&amp;quot;"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">result.append(content[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>描述自定义<code>EL</code>函数的<code>mytaglib.tld</code>文件</em></p></li></ol><ul><li><em><code>&lt;taglib&gt;</code>元素是tld文件的根元素,用于声明该JSP文件使用了标签库,不需要对其进行修改,只需要从目录<code>&lt;Tomacat安装目录&gt;\webapps\examples\WEB-INF\jsp2\jsp2-example-taglib.tld</code>中复制即可.</em></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>A tag library exercising SimpleTag handlers.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">short-name</span>&gt;</span>SimpleTagLibrary<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uri</span>&gt;</span>https://yubuntu0109.github.io<span class="tag">&lt;/<span class="name">uri</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>filter<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">function-class</span>&gt;</span></span><br><span class="line">    pers.huangyuhui.el.util.HTMLFilter</span><br><span class="line">    <span class="tag">&lt;/<span class="name">function-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">function-signature</span>&gt;</span></span><br><span class="line">    java.lang.String filter(java.lang.String)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">function-signature</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p><em><code>JSP</code>页面的程序代码</em></p><pre><code class="html"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span><span class="tag"> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span>&lt;%-- uri: 既tld文件中&lt;uri&gt;元素的内容.  prefix: 为引用的tld文件定义一个"代号"(作为自定义EL函数的前缀) --%&gt;<span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">prefix</span>=<span class="string">"demo"</span> <span class="attr">uri</span>=<span class="string">"https://yubuntu0109.github.io"</span> %&gt;</span><span class="meta">&lt;!DOCTYPE html&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span> <span class="tag">&lt;<span class="name">head</span>&gt;</span>     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>     <span class="tag">&lt;<span class="name">title</span>&gt;</span>防止`HTML`注入<span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">body</span>&gt;</span>     <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>         姓名: ${name }<span class="tag">&lt;<span class="name">br</span>&gt;</span>         留言内容: ${demo:filter(message) }     <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre></li><li><p><em>运行效果示例图</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/22/自定义EL函数防止HTML注入/JSP-HTMLInjectionResult2.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;学习笔记-自定义EL函数防止HTML注入&quot;&gt;&lt;a href=&quot;#学习笔记-自定义EL函数防止HTML注入&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : 自定义EL函数防止HTML注入&quot;&gt;&lt;/a&gt;学习笔记 : 自定义&lt;code&gt;EL&lt;/code
      
    
    </summary>
    
    
      <category term="JSP" scheme="http://yoursite.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>VOA:Paris`Notre-Dame Cathedral Burning</title>
    <link href="http://yoursite.com/2019/04/22/VOA-Paris-Notre-Dame-Cathedral-Burning/"/>
    <id>http://yoursite.com/2019/04/22/VOA-Paris-Notre-Dame-Cathedral-Burning/</id>
    <published>2019-04-22T01:26:31.000Z</published>
    <updated>2019-04-24T02:51:41.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Paris’-Notre-Dame-Cathedral-Burning"><a href="#Paris’-Notre-Dame-Cathedral-Burning" class="headerlink" title="Paris’ Notre-Dame Cathedral Burning"></a>Paris’ Notre-Dame Cathedral Burning</h2><p><em>A major fire began to burn on Monday at France’s world-famous <code>Notre-Dame</code> de <code>Paris Cathedral</code>.</em></p><ul><li><em>周一,法国著名的巴黎圣母院大教堂发生大火.</em></li></ul><p><em>Flames could be seen rising through the top of the <code>monument</code>. It tall,<code>narrow</code> <code>spire</code> later <code>collapsed</code>.</em></p><ul><li><em>可以看到纪念碑的顶部火焰冲天,又高又窄的尖塔随后倒塌了.</em></li></ul><p><em>The cathedral dates back to the 12th century. Frech writer <code>Victor Hugo</code> used it as the setting of his famous story,The Hunchback of Notre-Dame,first published in 1831.</em></p><ul><li><em>这座大教堂可追溯到12世纪.法国作家维克多·雨果把它作为其著名小说《巴黎圣母院》的背景,该书于1831年首次出版.</em></li></ul><p><em>The capthedral is one of world’s most famous tourist sites. About 12 million people visit Notre-Dame each year. It’s sits in the center of Paris,along the <code>Seine River</code>.</em></p><ul><li><em>这座大教堂是世界上最著名的旅游景点之一.每年大约有1200万人参观巴黎圣母院.它位于巴黎市中心,塞纳河沿岸.</em></li></ul><p><em>The <code>mayor</code> of Paris,Anne Hidalgo wrote on <code>Twitter</code> Monday,”A terrible fire is <code>underway</code> at Notre-Dame Cathedral in Paris.” Hidalgo added that Paris firefighters were still trying to <code>contain</code> the fire. She <code>urged</code> people to stay away from the area.</em></p><ul><li><em>巴黎市长安妮·伊达尔戈周一在推特上表示:”巴黎圣母院发生可怕的火灾.” 伊达尔戈补充说,巴黎消防员仍在努力控制火势.她督促人们远离该区域.</em></li></ul><p><em>As the cathedral’s roof <code>continued</code> to burn. a police officer near the scene told Reuters news <code>agency</code>, “Everying is <code>collapsing.</code>“</em></p><ul><li><em>随着大教堂的屋顶火势不断地蔓延,一名靠近现场的警官告诉路透社,”一切都在坍塌.”</em></li></ul><p><em>French President Emmanuel Macron <code>delayed</code> a planned scheduled speech to the nation because of the fire. The speech was to present his answers to the <code>yellow vest crisis</code> that has <code>taken over</code> the country since November.</em></p><ul><li><em>法国总统艾玛纽埃尔·马克龙因火灾推迟了原定的全国讲话.此次演讲是为了回应自去年11月以来席卷全国的黄背心危机.</em></li></ul><p><em>Macron arrived at the scene of the fire Monday nigth.</em></p><ul><li><em>马克龙于周一晚上抵达火灾现场.</em></li></ul><p><em>The cause off the fire was not immediately knownn. France 2 television reported that police was <code>treating</code> it as <code>accidental</code>.</em></p><ul><li><em>火灾发生的原因尚不清楚.法国第二电视台报道说,警方认为这是一起意外事故.</em></li></ul><p><em>Workers had been <code>renovating</code> parts of Notre-Dame. Parts of the monument surrounded by <code>metal</code> and wood support structure. The cathedral’s <code>bronze statues</code> had been removed last week for repairs.</em></p><ul><li><em>此前,人工们一直在修缮巴黎圣母院的部分建筑.纪念碑的一部分被金属和木头组成的支护结构包围.大教堂的青铜雕像上周已被移走进行修复.</em></li></ul><p><em>Notre-Dame’s first stone was laid in 1163 by Pope Alexander III,It’s main spire was added during repairs in the 19th century.</em></p><ul><li><em>巴黎圣母院的第一块基石是1163年由教皇亚历山大三世奠基的.它的主尖塔是在19世纪修缮时加上去的.</em></li></ul><h3 id="重点词汇"><a href="#重点词汇" class="headerlink" title="重点词汇"></a>重点词汇</h3><ol><li>cathedral        <code>(n)</code>       大教堂.</li><li>flame            <code>(n)</code>       火焰.</li><li>spire            <code>(n)</code>       尖顶,塔尖.</li><li>tourist          <code>(n)</code>       旅游者,观光者.</li><li>statue           <code>(n)</code>       雕像,塑像.</li><li>Seine            <code>(n)</code>       塞纳河(法国北部河流，流经巴黎)</li><li>agency           <code>(n)</code>       代理,中介,代理处,经销处.</li><li>vest             <code>(n)</code>       背心,汗衫.</li><li>crisis           <code>(n)</code>       危机,危险期,决定性时刻.</li><li>metal           <code>(n)</code>       金属,合金.</li><li>statue          <code>(n)</code>       雕像,塑像.</li><li>mayor           <code>(n)</code>       市长.</li><li>monument        <code>(n)</code>       纪念碑,历史遗迹,不朽的作品.</li><li>accidental      <code>(a)</code>       意外的,偶然的.</li><li>narrow          <code>(a)</code>       狭窄的,有限的.</li><li>underway        <code>(a)</code>       进行中的,起步的.</li><li>bronze          <code>(a)</code>       青铜色的,青铜制的.</li><li>urged           <code>(v)</code>       怂恿,催促.</li><li>collapsed       <code>(v)</code>       倒塌,崩溃.</li><li>contain         <code>(v)</code>       控制,容纳.</li><li>continue        <code>(v)</code>       继续,延续.</li><li>collapse        <code>(v)</code>       崩溃,塌陷.</li><li>delay           <code>(v)</code>       延期,耽搁.</li><li>treat           <code>(v)</code>       对待,处理.</li><li>renovate        <code>(v)</code>       更新,修复.</li></ol><h3 id="重点短语"><a href="#重点短语" class="headerlink" title="重点短语"></a>重点短语</h3><ol><li><code>urged</code> to do sth : 催促做某事.</li><li>news <code>agency</code> : 通讯社,新闻通讯社.</li><li>take over : 接管,接收.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Paris’-Notre-Dame-Cathedral-Burning&quot;&gt;&lt;a href=&quot;#Paris’-Notre-Dame-Cathedral-Burning&quot; class=&quot;headerlink&quot; title=&quot;Paris’ Notre-Dame Cath
      
    
    </summary>
    
    
      <category term="VOA" scheme="http://yoursite.com/tags/VOA/"/>
    
  </entry>
  
  <entry>
    <title>VOA:The Woman Behind the Image of the Black Hole</title>
    <link href="http://yoursite.com/2019/04/21/VOA-The-Woman-Behind-the-Image-of-the-Black-Hole/"/>
    <id>http://yoursite.com/2019/04/21/VOA-The-Woman-Behind-the-Image-of-the-Black-Hole/</id>
    <published>2019-04-21T13:51:03.000Z</published>
    <updated>2019-04-24T02:42:30.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Woman-Behind-the-Image-of-the-Black-Hole"><a href="#The-Woman-Behind-the-Image-of-the-Black-Hole" class="headerlink" title="The Woman Behind the Image of the Black Hole"></a>The Woman Behind the Image of the Black Hole</h2><p><em>Trying to capture an image of a black hole is like trying to take a picture of an orange sitting on the <code>surface</code> of the moon from Earth——with your smartphone.</em></p><ul><li><em>试图捕捉黑洞的一张图片就好比在地球上试图用智能手机去拍摄在月f球表面放着的一个橙子.</em></li></ul><p><em>That is what Dr.Katie Bouman said two years ago during her TED talk called “How to take a picture of a black hole.”</em></p><ul><li><em>这是两年前凯蒂·布曼博士在她的TED演讲《如果拍一张黑洞的照片》中所说的话.</em></li></ul><p><em>Bouman is 29 years old. She received her <code>doctoral</code> degrees in computer science and enginnering from the Masschusetts Institute of Technology. She later became a <code>postdoctoral</code> researcher with the international <code>Event Horizon Telescope</code>,or <code>EHT</code>,project. The project scientists produced a black hole image from data collected from a series of telecopes around the world. Together,they formed an Earth-sized “virtual” telescope——on powerful enough to do what had once seemed impossible.</em></p><ul><li><em>布曼今年29岁,她在麻省理工学院获得了计算机科学和计算机工程博士学位.后来,她成为了国际事件视界望远镜(简称<code>EHT</code>)项目的博士后研究院.研究该项目的科学家们从世界各地各种望远镜收集的数据中的得出了一张黑洞图像.他们一起组成了一个地球大小的虚拟望远镜,这个望远镜强大到足以让他们完成曾经看起来不可能完成的任务.</em></li></ul><p><em>This week,the team of scientists,led by Sheperd S.Doeleman of Harvard University,<code>released to</code> the public the first-ever image of a black hole.</em></p><ul><li><em>本周,由哈佛大学的谢泼德S.杜勒曼领导的科学家团队向公众发布了史上第一张黑洞图片.</em></li></ul><p><em>Soon after,another image was spreading over ssocial media and the news. It’s showed a smiling Bouman with the black hole image on her computer screen. She wrote on Facebook, “Watching in <code>disbelief</code> as the first image I ever made of a black hole was in the process of being <code>reconstructed</code>.”</em></p><ul><li><em>不久之后,另一个照片在社交媒体和新闻上传播开来.照片上布曼在微笑,她后面的电脑屏幕上是黑洞的图像.她的脸书上写到: “看着我制作的第一张黑洞图片正在重新,这简直难以置信.”</em></li></ul><p><em>Bouman led a team that helped create an algorithm,or set of computer processes that turned the huge amout of <code>telescopic</code> data into one image.</em></p><ul><li><em>布曼领导者的团队帮助创建了一种算法,或一组计算机处理程序,其能将望远镜观察到的大量数据转换为一张图像.</em></li></ul><p><em>Bouman quickly became a symbol for woman in science.</em></p><ul><li><em>布曼很快成为了科学界女性的象征.</em></li></ul><p><em>One especially pupular Twitter post showed a <code>side-by-side</code> picture of Bouman with hard drives of black hole image data next to another woman scientist: Margarget Hamilton. In 1969,Hamilton helped write <code>on-board</code> computer code for NASA’s Apollo space program.</em></p><ul><li><em>一条特别受欢迎的推特帖子展示了一张布曼与另一位女科学家玛格丽特·汉密尔顿并列的照片,布曼的硬盘里存有黑洞图像数据.1969年,汉密尔顿为美国宇航局的阿波罗太空计划编写了随行对计算机代码.</em></li></ul><p><em>Twitter user Tammy Emma Pepin wrote of Bouman,”Here’s to more women in science——getting their credit and being remembered in history.”</em></p><ul><li><em>推特用户塔米·艾玛·佩平这样评论布曼: “让更多的科学女性获得荣誉,并被载入史册.”</em></li></ul><p><em>And Twitter user Pooja Chandrakekar,who recently completed her studies in <code>engineering</code> at Harvard,wrote, “So many young girls will see Dr.Katie Bouman as an inspiration and go on to make their own discoveries in space,physis,and computer science. A <code>historic</code> moment not just for science,but for women in science.”</em></p><ul><li><em>推特用户普贾·钱德拉斯卡最近最哈佛大学工程学系毕业,她写到: “很多年轻女性都因凯蒂·布曼博士而大受鼓舞,决定在太空,物理和计算机科学领域做深入研究.这不仅是科学界的历史性时刻,也是科学领域中女性的历史时刻.”</em></li></ul><p><em>But Boman herself quickly noted that she was not the only one responsible for the image off the black hole. She posted on Facebook, “No one algorithm or person made this image,it required the amazing talent of a team of scientists from around the globe and years of hard work…”</em></p><ul><li><em>但布曼本人很快指出,她并不是黑洞图像的唯一功臣. 她在Facebook上写到: “并不是什么算法或者人制作了这幅图像.这幅图像的的问世得益于世界各地的科学家团队的惊人才能和多年的辛勤工作···”</em></li></ul><p><em>After the <code>press</code> event Wednesday,Bouman spoke with members of the media. She said she is looking forward to developing more algorithms and methods that will help lead to an even better,<code>sharper</code> image of a black hole.</em></p><ul><li><em>周期三的新闻发布会后,布曼对媒体说,她期待着开发更多的算法和方法,以帮助生成一幅更好,更清晰的黑洞图像.</em></li></ul><p><em>Bouman will begin her teaching career at the California Institute of Technology later this year.</em></p><ul><li><em>今天晚些时候,布曼将在加州理工学院开始地她的教学生涯.</em></li></ul><p><em>I’m Ashley Thompson.</em></p><h3 id="重点词汇"><a href="#重点词汇" class="headerlink" title="重点词汇"></a>重点词汇</h3><ol><li>symbol           <code>(n)</code>           象征.</li><li>inspiration      <code>(n)</code>           鼓舞.</li><li>talent           <code>(n)</code>           才能.</li><li>telescope        <code>(n)</code>           望远镜.</li><li>disbelief        <code>(n)</code>           怀疑,不信.</li><li>engineering      <code>(n)</code>           工程,工程学.</li><li>horizon          <code>(n)</code>           [天]地平线,视野.</li><li>surface          <code>(n)</code>           表面,表层,外观.</li><li>press            <code>(n)</code>           压,按.新闻,出版社.</li><li>sharper         <code>(n)</code>           骗子,赌棍,欺诈犯.</li><li>virtual         <code>(a)</code>           虚拟的.    </li><li>postdoctoral    <code>(a)</code>           博士后的.</li><li>doctoral        <code>(a)</code>           博士的,博士学位的.</li><li>historic        <code>(a)</code>           有历史意义的,历史上著名的.</li><li>reconstruct     <code>(v)</code>           重建,改造,修复,重现.</li><li>on-board                        随行.          </li><li>side-by-side                    并肩的,并行的.   </li></ol><h3 id="重点短语"><a href="#重点短语" class="headerlink" title="重点短语"></a>重点短语</h3><ol><li>Event Horizon Telescope : 视界望远镜.</li><li>released to : 发布.</li><li>Brightness sharper : 亮度更清晰.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;The-Woman-Behind-the-Image-of-the-Black-Hole&quot;&gt;&lt;a href=&quot;#The-Woman-Behind-the-Image-of-the-Black-Hole&quot; class=&quot;headerlink&quot; title=&quot;The 
      
    
    </summary>
    
    
      <category term="VOA" scheme="http://yoursite.com/tags/VOA/"/>
    
  </entry>
  
  <entry>
    <title>VOA:咖啡到底好不好?研究人员也说不清</title>
    <link href="http://yoursite.com/2019/04/19/VOA-%E5%92%96%E5%95%A1%E5%88%B0%E5%BA%95%E5%A5%BD%E4%B8%8D%E5%A5%BD-%E7%A0%94%E7%A9%B6%E4%BA%BA%E5%91%98%E4%B9%9F%E8%AF%B4%E4%B8%8D%E6%B8%85/"/>
    <id>http://yoursite.com/2019/04/19/VOA-咖啡到底好不好-研究人员也说不清/</id>
    <published>2019-04-19T10:45:07.000Z</published>
    <updated>2019-04-24T02:44:13.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Large-Review-of-Coffee-Studies-Finds…Not-Much-New"><a href="#Large-Review-of-Coffee-Studies-Finds…Not-Much-New" class="headerlink" title="Large Review of Coffee Studies Finds…Not Much New"></a>Large Review of Coffee Studies Finds…Not Much New</h2><p><em>From VOA Learning English,this is the Health&amp;Lifestyle report.</em></p><ul><li><em>这里是美国之音慢速英语与健康报道.</em></li></ul><p><em>Which is more popular —— coffee or tea ?</em><br><em>If you are on Team Coffee,you team may be ahead.</em></p><ul><li><em>如果你站在咖啡队,那就加一分.</em></li></ul><p><em>The well-known U.S. coffee shop <code>Starbucks</code> just opened its largest store in the land of tea: China!</em></p><ul><li><em>美国著名的咖啡店星巴克在茶叶之国中国开了一家最大的门店!</em></li></ul><p><em>The Shanghai Starbucks is 2,700 square meters and employs more than 400 people.</em></p><ul><li><em>上海星巴克占地2700平方米,员工400多人.</em></li></ul><p><em>But nw for the health question: Is coffee good for us ?</em></p><ul><li><em>但现在从健康出发,咖啡对我们有好处吗?</em></li></ul><p><em>There have been many studies on the health benefits of coffee. Recently,researchers at the University of <code>Southampton&#39;s Faculty of Medicine</code> in Great Britain looked at results from 201 <code>observational</code> coffee studies and 17 <code>clinical trial</code> of coffee</em></p><ul><li><em>有很多关于咖啡对健康的益处的研究.最近,英国南安普顿大学医学院的研究人员对咖啡进行了研究,他们观察了201项观测性研究和17项临床试验的结果.</em></li></ul><p><em>With this “<code>umbrella review</code>“ researchers wanted to find a clear answer on whether coffee is good for us or not.</em></p><ul><li><em>在”撒网式研究”的帮助下,研究人员想找到一个明确的答案: 咖啡对我们是否有益.</em></li></ul><p><em>They discovered that coffee drinkers had a lower risk of heart and <code>liver</code> disease and some cancers. Coffee drinkers also had a lower risk of dying from <code>stroke</code>.</em></p><ul><li><em>它们发现和咖啡的人患心脏病,肝病和一些癌症的风险较低.喝咖啡的人死于中风的风险也较低.</em></li></ul><p><em>However,their findings are uncertain. The researchers could not prove coffee was the cause of these lowered risks.</em></p><ul><li><em>然而,他们的发现还不确定,研究人员不能证明咖啡是降低这些风险的原因.</em></li></ul><p><em>One of the researchers of this umbrella review is Robin Poole. Poole’s team notes that their umbrella review included mainly observational data. Therefore,they could not prove any cause and effect relationship.</em></p><ul><li><em>“撒网式研究”的其中一位研究人员是罗宾·普尔.普尔的团队注意到,它们的”撒网式研究”主要是观测数据.因此他们无法证明任何因果关系.</em></li></ul><p><em>The National <code>Institutes</code> of Health in the United States define an “observational uncontrolled study” as a study where “researchers simply watch what happens to a series of people in one group.”,There is no control group.</em></p><ul><li><em>根据美国国家卫生研究院的定义,”不受控制的观测性研究”指的是”研究人员仅观察一组人中一部分人的情况”的研究.这种研究没有试验控制组.</em></li></ul><p><em>Still,researchers found that the benefits of <code>moderate</code> coffee drinking seem to outweght the risks. Their report says drinking coffee “was more often <code>associated with</code> benefit than harm.”</em></p><ul><li><em>不过,研究人员发现,适度应用咖啡的好处似乎大于风险.它们的报告指出,喝咖啡”好处多于坏处”.</em></li></ul><p><em>Poole calls these findings “Handline benefits.”</em></p><ul><li><em>普尔称这些发现为”看得见的益处”.</em></li></ul><p><em>There are some headline benefits such as a lower risk of <code>dying</code> from any cause,a lower risk of dying from heart disease and stroke and lower risk of <code>developing heart diease</code> in the first place.</em></p><ul><li><em>有一些看得见的益处,比如降低死亡的风险,降低死于心脏病和中风的风险,以及降低患早期心脏病的风险.对于这些结果,每天喝三到四杯咖啡就可以带来最大的好处.</em></li></ul><p><em>Poole means that if people read only the headline,they may think that the result are simply positive. But he warns that the coffee story is much more <code>complicated</code>.</em></p><ul><li><em>普尔的意思是：如果人们只看表面,他们可能会认为结果是积极的.但他提醒我们,咖啡要复杂得多.</em></li></ul><p><em>He advises people to not drink more than four cups a day. And not everyone should drink so much coffee.</em></p><ul><li><em>他建议人们每天最多和四杯咖啡,而且不是每个人都应该喝这么多.</em></li></ul><p><em>Researchers found that: Too much coffee during <code>pregnancy</code> can be dangerous.</em></p><ul><li><em>研究人员发现: 怀孕期间喝太多咖啡会很危险.</em></li></ul><p><em>People,esecially woman,whose bones break easily should limit how much coffee they drink.</em></p><ul><li><em>人们,尤其是女性,骨头容易骨折,应该限制她们饮用咖啡的量.</em></li></ul><p><em>People with <code>abnormal</code> heart beat patterns are advised to drink <code>decaffeinated</code> coffee.</em></p><ul><li><em>心脏跳动不规律的人建议饮用无咖啡因的咖啡.</em></li></ul><p><em>In addition,the scientists point out that the research was only about coffee. Yet many coffee drinkers don’t just drink coffee. They put sugar into it. They add milk or cream. They may have a <code>baked treat on the side</code>.</em></p><ul><li><em>此外,科学家们指出这项研究是关于咖啡的.然而,许多和咖啡的人并不只是喝咖啡.他们往里面放糖.他们家牛奶或奶油.他们还可能还同时吃一些烘焙食品.</em></li></ul><p><em>Researcher Robin Poole warns that to get the full health benefits of coffee,keep it simple.Drinking it black is the healthiest. And skip the <code>pastries</code>.</em></p><ul><li><em>研究人员罗宾·普尔提醒我们,要想充分享受咖啡的健康益处,要尽量简单.喝黑咖啡是最健康的.糕点就放弃吧.</em></li></ul><p><em>It’s not about the sugar and the <code>syrups</code> and the <code>biscuits</code>,cakes and pastries. And we should <code>urge</code> people who are already drinking moderate <code>amounts of</code> coffee——about the three or four cups per day mark——to enjoy it,but try and make it as healthy as possible because standard health message still apply to those other things.</em></p><ul><li><em>这本身与糖,糖浆,饼干,蛋糕和糕点无关,我们会监督那些已经喝了适量咖啡的人——大约每天喝三到四杯咖啡——可以尽情享受这些食物,但是尽量保持健康饮食,因为标准的健康饮食也同样适用于其他食物.</em></li></ul><p><em>The researchers found that the greatest benefit to drinking coffee seemed to be in fighting livers diseases. Based on that finding. They are planning a clinical test using coffee as a treatment for <code>cirrhosis</code>,a serious liver disease.</em></p><ul><li><em>研究人员发现和咖啡最大的好处似乎是对抗肝脏疾病.基于这一发现,他们计划用咖啡来对肝硬化进行临床试验,肝硬化是一种严重的肝病.</em></li></ul><p><em>But the <code>final takeaway</code> is the same as before: if you drink coffee,keep it simple and don’t eat the pastries or other baked treats that often come with a cup of coffee.</em></p><ul><li><em>但最终的结论还是和以前一样: 如果你和咖啡,保持简单,不要同时吃糕点或其他烘焙食品.</em></li></ul><p><em>And if you’re not coffee drinker,you don’t need to start drinking coffee to be healthier.</em></p><ul><li><em>如果你不喝咖啡,你也不必用喝咖啡来保持健康.</em></li></ul><p><em>And that’s the Health &amp; Lifestyle report. I’m Anna Matteo.</em></p><ul><li><em>这就是健康与生活报道,我是安娜·马特奥.</em></li></ul><p><em>The coffee <code>versus</code> tea argument is always interesting. Let us know In the Comments Section,which drink you prefer.</em></p><ul><li><em>人们对咖啡和茶总是争论不休.欢迎在评论区留言.告诉我们你更喜欢咖啡还是茶.</em></li></ul><h3 id="重点单词"><a href="#重点单词" class="headerlink" title="重点单词"></a>重点单词</h3><ol><li>Starbuck         <code>(n)</code>           星巴克(咖啡公司).</li><li>trial            <code>(n)</code>           试验,审讯,努力,磨炼.</li><li>liver            <code>(n)</code>           肝脏,生活者,居民.</li><li>stroke           <code>(n)</code>           中风.</li><li>Institute        <code>(n)</code>           学会,协会,学院.</li><li>dying            <code>(n)</code>           死,死亡.</li><li>pregnancy        <code>(n)</code>           怀孕,丰富,多产.</li><li>pastry           <code>(n)</code>           油酥点心,面粉糕饼.</li><li>syrup            <code>(n)</code>           糖浆,果汁,含药糖浆.</li><li>biscuit         <code>(n)</code>           小点心,饼干.</li><li>amount          <code>(n)</code>           数量,总额,总数.</li><li>cirrhosis       <code>(n)</code>           硬化,[内科]肝硬化.</li><li>observational   <code>(a)</code>           观测的,根据观察的.</li><li>clinical        <code>(a)</code>           临床的,诊所的.</li><li>moderate        <code>(a)</code>           稳健的,温和的,适度的,中等的,有节制的.</li><li>associated      <code>(a)</code>           关联的,联合的.</li><li>complicated     <code>(a)</code>           难懂的,复杂的.</li><li>decaffeinated   <code>(a)</code>           无因咖啡的.</li><li>abnormal        <code>(ad)</code>          反常的,不规则的,变态的.</li><li>baked           <code>(v)</code>           烤的,烘焙的.</li><li>urge            <code>(v)</code>           力劝,催促,驱策,推进.</li></ol><h3 id="重点短语"><a href="#重点短语" class="headerlink" title="重点短语"></a>重点短语</h3><ol><li>Southampton’s Faculty of Medicine : 南安普敦医学院</li><li>clinical trial : 临床试验,诊治试验.</li><li>associated with : 与..有关系,与..相联系.</li><li>amounts of : 大量的,相当数量的.</li><li>final takeaway : 最终的结论.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Large-Review-of-Coffee-Studies-Finds…Not-Much-New&quot;&gt;&lt;a href=&quot;#Large-Review-of-Coffee-Studies-Finds…Not-Much-New&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="VOA" scheme="http://yoursite.com/tags/VOA/"/>
    
  </entry>
  
  <entry>
    <title>详解Linked list的实现方式及其应用</title>
    <link href="http://yoursite.com/2019/04/19/%E8%AF%A6%E8%A7%A3Linked-list%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/04/19/详解Linked-list的实现方式及其应用/</id>
    <published>2019-04-19T03:54:07.000Z</published>
    <updated>2019-04-25T22:50:07.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h3><p><em><code>链表</code>是一种物理存储单元上非连续、非顺序的存储结构,数据元素的逻辑顺序是通过链表中的指针链接次序实现的.链表由一系列<code>结点</code>(链表中每一个元素称为结点)组成,结点可以在运行时动态生成.每个结点包括两个部分: 一个是存储数据元素的<code>数据域</code>,另一个是存储下一个结点地址的<code>指针域</code>.</em></p><h3 id="链表的使用场景"><a href="#链表的使用场景" class="headerlink" title="链表的使用场景"></a>链表的使用场景</h3><ol><li>数据量较小.</li><li>不需要预先知道数据规模.</li><li>适应于频繁的插入操作.</li></ol><h3 id="链表的实现方式"><a href="#链表的实现方式" class="headerlink" title="链表的实现方式"></a>链表的实现方式</h3><h4 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h4><ol><li><p><em>首先定义一个链表</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ListNode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 单向链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 15, 2019 8:59:50 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglyListNode</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> E data;</span><br><span class="line"><span class="keyword">private</span> SinglyListNode&lt;E&gt; next;<span class="comment">// the pointer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> SinglyListNode&lt;E&gt; <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(SinglyListNode&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>操作单向链表的示例程序</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: SinglyLinkedList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 操作单向链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 15, 2019 8:54:46 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">SinglyListNode&lt;T&gt; headNode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">headNode = <span class="keyword">new</span> SinglyListNode&lt;T&gt;();</span><br><span class="line"><span class="comment">// headNode.setData(0);// attention: the header node is zero default</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the header node of the linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getHeaderNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> headNode.getData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the length of the linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getListLength</span><span class="params">(<span class="comment">/* ListNode headNode */</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">SinglyListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line"><span class="keyword">while</span> (currentNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">currentNode = currentNode.getNext();</span><br><span class="line">length++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add a new node into the linked list by specified position</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SinglyListNode&lt;T&gt; <span class="title">insertInLinked</span><span class="params">(SinglyListNode&lt;T&gt; nodeToInsert, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"Error: the linked list is empty !"</span>);</span><br><span class="line"><span class="keyword">return</span> nodeToInsert;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = getListLength();</span><br><span class="line"><span class="keyword">if</span> (position &gt; size + <span class="number">1</span> || position &lt; <span class="number">1</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"Position of node to insert is invalid. The vaild inputs are 1 to "</span> + (size + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (position == <span class="number">1</span>) &#123;</span><br><span class="line">nodeToInsert.setNext(headNode);</span><br><span class="line">headNode = nodeToInsert;</span><br><span class="line"><span class="keyword">return</span> nodeToInsert;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">SinglyListNode&lt;T&gt; previousNode = headNode;</span><br><span class="line"><span class="keyword">while</span> (count &lt; position - <span class="number">1</span>) &#123;</span><br><span class="line">previousNode = previousNode.getNext();<span class="comment">// 待插节点的前节点</span></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SinglyListNode&lt;T&gt; currentNode = previousNode.getNext();<span class="comment">// 待插节点的后节点</span></span><br><span class="line">nodeToInsert.setNext(currentNode);</span><br><span class="line">previousNode.setNext(nodeToInsert);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete the node by the specified position in the linked node</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteNodeFromLinkedList</span><span class="params">(<span class="comment">/* ListNode headNode, */</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = getListLength();</span><br><span class="line"><span class="keyword">if</span> (position &gt; size || position &lt; <span class="number">1</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"Position of node to insert is invalid. The vaild inputs are 1 to"</span> + (size + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (position == <span class="number">1</span>) &#123;</span><br><span class="line">SinglyListNode&lt;T&gt; currentNode = headNode.getNext();</span><br><span class="line">headNode = currentNode;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 删除中间或表尾结点</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">SinglyListNode&lt;T&gt; previousNode = headNode.getNext();</span><br><span class="line"><span class="keyword">while</span> (count &lt; position) &#123;</span><br><span class="line">previousNode = previousNode.getNext(); <span class="comment">// 找到待删节点的前节点</span></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SinglyListNode&lt;T&gt; currentNode = previousNode.getNext();<span class="comment">// 待删节点</span></span><br><span class="line">previousNode.setNext(currentNode.getNext());</span><br><span class="line">currentNode = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete the singly linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">destroyLinkedList</span><span class="params">(<span class="comment">/* ListNode headNode */</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"Error: the singly linked list is empty !"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">"delete the node: "</span>);</span><br><span class="line"><span class="keyword">while</span> (headNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.print(headNode.getData() + <span class="string">" , "</span>);</span><br><span class="line">headNode = headNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterate through all the data in the linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">traverseNode</span><span class="params">( <span class="comment">/* ListNode headNode */</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"Error: the linked node is empty !"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">SinglyListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line">System.out.print(<span class="string">"All of node: "</span>);</span><br><span class="line"><span class="keyword">while</span> (currentNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.print(currentNode.getData() + <span class="string">" , "</span>);</span><br><span class="line">currentNode = currentNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">SinglyLinkedList&lt;String&gt; list = <span class="keyword">new</span> SinglyLinkedList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义待插入链表的节点</span></span><br><span class="line">SinglyListNode&lt;String&gt; a = <span class="keyword">new</span> SinglyListNode&lt;String&gt;();</span><br><span class="line">a.setData(<span class="string">"A"</span>);</span><br><span class="line">SinglyListNode&lt;String&gt; b = <span class="keyword">new</span> SinglyListNode&lt;String&gt;();</span><br><span class="line">b.setData(<span class="string">"B"</span>);</span><br><span class="line">SinglyListNode&lt;String&gt; c = <span class="keyword">new</span> SinglyListNode&lt;String&gt;();</span><br><span class="line">c.setData(<span class="string">"C"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向单向链表中添加新的节点</span></span><br><span class="line">list.createLinkedList();</span><br><span class="line">list.insertInLinked(a, <span class="number">1</span>);</span><br><span class="line">list.insertInLinked(b, <span class="number">2</span>);</span><br><span class="line">list.insertInLinked(c, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"The size of linked list: "</span> + list.getListLength());</span><br><span class="line">System.out.println(<span class="string">"The header node : "</span> + list.getHeaderNode());</span><br><span class="line">list.traverseNode();</span><br><span class="line">System.out.println(<span class="string">"Delete the node which the position is first: "</span> + list.deleteNodeFromLinkedList(<span class="number">1</span>));</span><br><span class="line">list.traverseNode();</span><br><span class="line">System.out.println(<span class="string">"Delete all of node: "</span> + list.destroyLinkedList());</span><br><span class="line">System.out.println(<span class="string">"The size of linked list: "</span> + list.getListLength());</span><br><span class="line">list.traverseNode();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">The size of linked list: <span class="number">4</span></span><br><span class="line">The header node : C</span><br><span class="line">All of node: C , A , B , <span class="keyword">null</span> , </span><br><span class="line">Delete the node which the position is first: <span class="keyword">true</span></span><br><span class="line">All of node: A , B , <span class="keyword">null</span> , </span><br><span class="line">delete the node: A , B , <span class="keyword">null</span> , </span><br><span class="line">Delete all of node: <span class="keyword">true</span></span><br><span class="line">The size of linked list: <span class="number">0</span></span><br><span class="line">Error: the linked node is empty !</span><br></pre></td></tr></table></figure></li></ol><h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><ol><li><p><em>定义链表</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: BidirectionalLinkList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 双向链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 16, 2019 2:31:09 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleListNode</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> E data;</span><br><span class="line"><span class="keyword">private</span> DoubleListNode&lt;E&gt; next;<span class="comment">// the pointer</span></span><br><span class="line"><span class="keyword">private</span> DoubleListNode&lt;E&gt; previous;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> DoubleListNode&lt;E&gt; <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(DoubleListNode&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> DoubleListNode&lt;E&gt; <span class="title">getPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> previous;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrevious</span><span class="params">(DoubleListNode&lt;E&gt; previous)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.previous = previous;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>操作双向链表的示例程序</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: CircularList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 操作循环链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 16, 2019 2:28:27 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">DoubleListNode&lt;T&gt; headNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize the circular list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCircularList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">headNode = <span class="keyword">new</span> DoubleListNode&lt;T&gt;();<span class="comment">// Attention: the header node is empty default</span></span><br><span class="line"><span class="comment">// headNode.setData(0);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the length of the circular list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">DoubleListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line"><span class="keyword">while</span> (currentNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">currentNode = currentNode.getNext();</span><br><span class="line">length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the header node of the double linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getHeaderNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"Error: the double linked list is empty !"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> headNode.getData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add new node into the double linked list by the specified position</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DoubleListNode&lt;T&gt; <span class="title">insertNode</span><span class="params">(DoubleListNode&lt;T&gt; newNode, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"Error: the double linked list is empty !"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = getLength();</span><br><span class="line"><span class="keyword">if</span> (position &lt; <span class="number">1</span> || position &gt; size + <span class="number">1</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"Position of node to insert is invalid. The vaild inputs are 1 to "</span> + (size + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (position == <span class="number">1</span>) &#123;</span><br><span class="line">newNode.setNext(headNode);</span><br><span class="line">headNode.setPrevious(newNode);</span><br><span class="line">headNode = newNode;<span class="comment">// 更新头结点</span></span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">DoubleListNode&lt;T&gt; previousNode = headNode;</span><br><span class="line"><span class="keyword">while</span> (count &lt; position - <span class="number">1</span>) &#123;</span><br><span class="line">previousNode = previousNode.getNext();</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">DoubleListNode&lt;T&gt; currentNode = previousNode.getNext();<span class="comment">// 找到待插位置的节点</span></span><br><span class="line">newNode.setNext(currentNode);</span><br><span class="line"><span class="keyword">if</span> (currentNode != <span class="keyword">null</span>) &#123;<span class="comment">// 如果待插位置的节点不是尾节点</span></span><br><span class="line">currentNode.setPrevious(newNode);</span><br><span class="line">&#125;</span><br><span class="line">previousNode.setNext(newNode);</span><br><span class="line">newNode.setPrevious(previousNode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete node by the spcified position in the double linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteNode</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"Error: the circular list is empty !"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (position == <span class="number">1</span>) &#123;</span><br><span class="line">DoubleListNode&lt;T&gt; secondNode = headNode.getNext();</span><br><span class="line">secondNode.setPrevious(<span class="keyword">null</span>);</span><br><span class="line">headNode = secondNode;<span class="comment">// as the header node</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//// `previousNode`与`headNode`操作的是同一个对象哟 ! ////</span></span><br><span class="line">DoubleListNode&lt;T&gt; previousNode = headNode;</span><br><span class="line"><span class="keyword">while</span> (count &lt; position - <span class="number">1</span>) &#123;</span><br><span class="line">previousNode = previousNode.getNext();<span class="comment">// 待删节点的前节点</span></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DoubleListNode&lt;T&gt; currentNode = previousNode.getNext();<span class="comment">// 待删节点</span></span><br><span class="line">DoubleListNode&lt;T&gt; laterNode = currentNode.getNext();<span class="comment">// 待删节点的后节点</span></span><br><span class="line"></span><br><span class="line">previousNode.setNext(laterNode);</span><br><span class="line"><span class="keyword">if</span> (laterNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">laterNode.setPrevious(previousNode);</span><br><span class="line">currentNode = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterate through all the data in the linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverseNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">DoubleListNode&lt;T&gt; node = headNode;</span><br><span class="line"><span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"Error: the circular list is empty !"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"the node: "</span> + node.getData());</span><br><span class="line">node = node.getNext();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// destroy the double linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Error: the circular list is empty !"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (headNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"delete the node: "</span> + headNode.getData());</span><br><span class="line">headNode = headNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CircularList&lt;Integer&gt; list = new CircularList&lt;Integer&gt;();</span></span><br><span class="line">DoubleLinkedList&lt;Character&gt; list = <span class="keyword">new</span> DoubleLinkedList&lt;Character&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化待插节点</span></span><br><span class="line">DoubleListNode&lt;Character&gt; a = <span class="keyword">new</span> DoubleListNode&lt;Character&gt;();</span><br><span class="line">a.setData(<span class="string">'a'</span>);</span><br><span class="line">DoubleListNode&lt;Character&gt; b = <span class="keyword">new</span> DoubleListNode&lt;Character&gt;();</span><br><span class="line">b.setData(<span class="string">'b'</span>);</span><br><span class="line">DoubleListNode&lt;Character&gt; c = <span class="keyword">new</span> DoubleListNode&lt;Character&gt;();</span><br><span class="line">c.setData(<span class="string">'c'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向双向链表中添加新节点</span></span><br><span class="line">list.createCircularList();</span><br><span class="line">list.insertNode(a, <span class="number">1</span>);</span><br><span class="line">list.insertNode(b, <span class="number">2</span>);</span><br><span class="line">list.insertNode(c, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-------- traverse --------"</span>);</span><br><span class="line">list.traverseNode();</span><br><span class="line">System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"The header node: "</span> + list.getHeaderNode());</span><br><span class="line">System.out.println(<span class="string">"The length of the circular list: "</span> + list.getLength());</span><br><span class="line">System.out.println(<span class="string">"Delete the node which the position is one: "</span> + list.deleteNode(<span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">"-------- traverse --------"</span>);</span><br><span class="line">list.traverseNode();</span><br><span class="line">System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"The header node: "</span> + list.getHeaderNode());</span><br><span class="line">System.out.println(<span class="string">"The length of the circular list: "</span> + list.getLength());</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">list.destroyList();</span><br><span class="line">System.out.println(<span class="string">"The header node: "</span> + list.getHeaderNode());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">-------- traverse --------</span><br><span class="line">the node: a</span><br><span class="line">the node: b</span><br><span class="line">the node: c</span><br><span class="line">the node: <span class="keyword">null</span></span><br><span class="line">--------------------------</span><br><span class="line">The header node: a</span><br><span class="line">The length of the circular list: <span class="number">4</span></span><br><span class="line">Delete the node which the position is one: <span class="keyword">true</span></span><br><span class="line">-------- traverse --------</span><br><span class="line">the node: b</span><br><span class="line">the node: c</span><br><span class="line">the node: <span class="keyword">null</span></span><br><span class="line">--------------------------</span><br><span class="line">The header node: b</span><br><span class="line">The length of the circular list: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">delete the node: b</span><br><span class="line">delete the node: c</span><br><span class="line">delete the node: <span class="keyword">null</span></span><br><span class="line">The header node: <span class="keyword">null</span></span><br><span class="line">Error: the <span class="keyword">double</span> linked list is empty !</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">#### 循环链表</span><br><span class="line"><span class="number">1</span>. *定义一个链表*</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">package</span> pers.huangyuhui.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: CircularListNode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 循环链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 17, 2019 9:52:23 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> T data;</span><br><span class="line"><span class="keyword">private</span> ListNode&lt;T&gt; next;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode&lt;T&gt; <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(ListNode&lt;T&gt; next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>操作循环链表的示例程序</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: CircularLinkedList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 操作循环链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 16, 2019 7:25:36 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircularLinkedList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the length of the circular linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(ListNode&lt;T&gt; headNode)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line"><span class="keyword">while</span> (currentNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">currentNode = currentNode.getNext();</span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">if</span> (currentNode == headNode) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// traverse the node of the circular linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverseNode</span><span class="params">(ListNode&lt;T&gt; headNode)</span> </span>&#123;</span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line"><span class="keyword">while</span> (currentNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.print(currentNode.getData() + <span class="string">" -&gt; "</span>);</span><br><span class="line">currentNode = currentNode.getNext();</span><br><span class="line"><span class="keyword">if</span> (currentNode == headNode) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">"headNode("</span> + currentNode.getData() + <span class="string">")\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add new node at the tail of linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAtListTail</span><span class="params">(ListNode&lt;T&gt; headNode, ListNode&lt;T&gt; newNode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line"><span class="keyword">while</span> (currentNode.getNext() != headNode) &#123;</span><br><span class="line"><span class="comment">//// 注意: 由于`currentNode`无变化,导致`currentNode.getNext() != headNode`继而进入进入死循环 !////</span></span><br><span class="line"><span class="comment">// currentNode.setNext(currentNode.getNext());</span></span><br><span class="line">currentNode = currentNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line">newNode.setNext(newNode);</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">headNode = newNode;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">newNode.setNext(headNode);</span><br><span class="line">currentNode.setNext(newNode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add new node at the header of linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode&lt;T&gt; <span class="title">insertAtListHeader</span><span class="params">(ListNode&lt;T&gt; headNode, ListNode&lt;T&gt; newNode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line"><span class="keyword">while</span> (currentNode.getNext() != headNode) &#123;</span><br><span class="line">currentNode = currentNode.getNext();<span class="comment">// 尾节点</span></span><br><span class="line">&#125;</span><br><span class="line">newNode.setNext(newNode);<span class="comment">// 指针指向自身</span></span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">headNode = newNode;</span><br><span class="line">&#125;</span><br><span class="line">newNode.setNext(headNode);</span><br><span class="line">currentNode.setNext(newNode);</span><br><span class="line"><span class="comment">// 注意: 此时链表头结点已更新! 所以应该返回更新后的头节点继而避免遍历时出现死循环!!!</span></span><br><span class="line">headNode = newNode;</span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add the new node by the specified index</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode&lt;T&gt; <span class="title">insertNodeByIndex</span><span class="params">(ListNode&lt;T&gt; headNode, ListNode&lt;T&gt; newNode, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Error: the circular list is empty !"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">1</span>) &#123;</span><br><span class="line">insertAtListHeader(headNode, newNode);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == getLength(headNode)) &#123;</span><br><span class="line">insertAtListTail(headNode, newNode);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line">ListNode&lt;T&gt; temp = headNode;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; position - <span class="number">1</span>; i++) &#123;</span><br><span class="line">temp = currentNode;<span class="comment">// 待插节点的前节点</span></span><br><span class="line">currentNode = currentNode.getNext();<span class="comment">// 待插节点</span></span><br><span class="line">&#125;</span><br><span class="line">temp.setNext(newNode);</span><br><span class="line">newNode.setNext(currentNode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete the last node</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteLastNode</span><span class="params">(ListNode&lt;T&gt; headNode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ListNode&lt;T&gt; temp = headNode;</span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"Error: the circular list is empty !"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (currentNode.getNext() != headNode) &#123;</span><br><span class="line">temp = currentNode; <span class="comment">// 尾节点的前一个节点</span></span><br><span class="line">currentNode = currentNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line">temp.setNext(headNode);</span><br><span class="line">currentNode = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete the header node</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode&lt;T&gt; <span class="title">deleteHeaderNode</span><span class="params">(ListNode&lt;T&gt; headNode)</span> </span>&#123;</span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"Error: the circular list is empty !"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (currentNode.getNext() != headNode) &#123;</span><br><span class="line"><span class="comment">// currentNode.setNext(currentNode.getNext());//死循环</span></span><br><span class="line">currentNode = currentNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line">currentNode.setNext(headNode.getNext());</span><br><span class="line"><span class="comment">// 注意: 此时链表头结点已更新! 所以应该返回更新后的头节点继而避免遍历时出现死循环!!!</span></span><br><span class="line">headNode = headNode.getNext();</span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete the node by the specified index</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode&lt;T&gt; <span class="title">deleteNodeByIndex</span><span class="params">(ListNode&lt;T&gt; headNode, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Error: the circular linked list is empty !"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">1</span>) &#123;</span><br><span class="line">deleteHeaderNode(headNode);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == getLength(headNode)) &#123;</span><br><span class="line">deleteLastNode(headNode);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ListNode&lt;T&gt; currentNode = headNode;</span><br><span class="line">ListNode&lt;T&gt; temp = headNode;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; position - <span class="number">1</span>; i++) &#123;</span><br><span class="line">temp = currentNode;<span class="comment">// 待删节点的前节点</span></span><br><span class="line">currentNode = currentNode.getNext();<span class="comment">// 待删节点</span></span><br><span class="line">&#125;</span><br><span class="line">temp.setNext(currentNode.getNext());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链表头结点</span></span><br><span class="line">CircularLinkedList&lt;Integer&gt; list = <span class="keyword">new</span> CircularLinkedList&lt;&gt;();</span><br><span class="line">ListNode&lt;Integer&gt; headNode = <span class="keyword">new</span> ListNode&lt;&gt;();</span><br><span class="line">headNode.setData(<span class="number">1</span>);<span class="comment">// 初始化链表头结点</span></span><br><span class="line">headNode.setNext(headNode);<span class="comment">// 节点指针指向自身</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化待插入的链表节点</span></span><br><span class="line">ListNode&lt;Integer&gt; a = <span class="keyword">new</span> ListNode&lt;&gt;();</span><br><span class="line">a.setData(<span class="number">2</span>);</span><br><span class="line">ListNode&lt;Integer&gt; b = <span class="keyword">new</span> ListNode&lt;&gt;();</span><br><span class="line">b.setData(<span class="number">3</span>);</span><br><span class="line">ListNode&lt;Integer&gt; c = <span class="keyword">new</span> ListNode&lt;&gt;();</span><br><span class="line">c.setData(<span class="number">4</span>);</span><br><span class="line">ListNode&lt;Integer&gt; d = <span class="keyword">new</span> ListNode&lt;&gt;();</span><br><span class="line">d.setData(<span class="number">100</span>);</span><br><span class="line">ListNode&lt;Integer&gt; e = <span class="keyword">new</span> ListNode&lt;&gt;();</span><br><span class="line">e.setData(<span class="number">101</span>);</span><br><span class="line">ListNode&lt;Integer&gt; f = <span class="keyword">new</span> ListNode&lt;&gt;();</span><br><span class="line">f.setData(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向链表的尾部添加三个节点</span></span><br><span class="line">System.out.print(<span class="string">"the origin node: "</span>);</span><br><span class="line">list.insertAtListTail(headNode, a);</span><br><span class="line">list.insertAtListTail(headNode, b);</span><br><span class="line">list.insertAtListTail(headNode, c);</span><br><span class="line">list.traverseNode(headNode);</span><br><span class="line">System.out.println(<span class="string">"the length of the list: "</span> + list.getLength(headNode));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向链表中添加两个头结点</span></span><br><span class="line">System.out.print(<span class="string">"add two header node: "</span>);</span><br><span class="line">ListNode&lt;Integer&gt; newHeadNode = list.insertAtListHeader(headNode, d);</span><br><span class="line"><span class="comment">// 注意: 由于`头结点`已在`insertAtListHeader`中已更新所以要向`traverseNode`传入新的头结点</span></span><br><span class="line">ListNode&lt;Integer&gt; newHeadNode2 = list.insertAtListHeader(newHeadNode, e);</span><br><span class="line">list.traverseNode(newHeadNode2);</span><br><span class="line">System.out.println(<span class="string">"the length of the list: "</span> + list.getLength(headNode));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表的指定位置上插入新的节点</span></span><br><span class="line">System.out.print(<span class="string">"Insert the new node at position 3: "</span>);</span><br><span class="line">list.insertNodeByIndex(headNode, f, <span class="number">3</span>);</span><br><span class="line">list.traverseNode(newHeadNode2);</span><br><span class="line">System.out.println(<span class="string">"the length of the list: "</span> + list.getLength(headNode));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除链表的尾节点</span></span><br><span class="line">System.out.print(<span class="string">"delete the tail node:  "</span>);</span><br><span class="line">list.deleteLastNode(newHeadNode2);</span><br><span class="line">list.traverseNode(newHeadNode2);</span><br><span class="line">System.out.println(<span class="string">"the length of the list: "</span> + list.getLength(headNode));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意: 由于`头结点`已在`deleteHeaderNode`中已更新所以要向`traverseNode`传入新的头结点</span></span><br><span class="line">ListNode&lt;Integer&gt; newHeadNode3 = list.deleteHeaderNode(newHeadNode2);</span><br><span class="line">System.out.print(<span class="string">"delete the header node:  "</span>);</span><br><span class="line">list.traverseNode(newHeadNode3);</span><br><span class="line">System.out.println(<span class="string">"the length of the list: "</span> + list.getLength(headNode));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除链表中指定位置的节点</span></span><br><span class="line">ListNode&lt;Integer&gt; newHeadNode4 = list.deleteNodeByIndex(newHeadNode3, <span class="number">4</span>);</span><br><span class="line">System.out.print(<span class="string">"delete the fourth node: "</span>);</span><br><span class="line">list.traverseNode(newHeadNode4);</span><br><span class="line">System.out.println(<span class="string">"the length of the list: "</span> + list.getLength(headNode));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">the origin node: <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span> -&gt; headNode(<span class="number">1</span>)</span><br><span class="line">the length of the list: <span class="number">4</span></span><br><span class="line">add two header node: <span class="number">101</span> -&gt; <span class="number">100</span> -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span> -&gt; headNode(<span class="number">101</span>)</span><br><span class="line">the length of the list: <span class="number">6</span></span><br><span class="line">Insert the <span class="keyword">new</span> node at position <span class="number">3</span>: <span class="number">101</span> -&gt; <span class="number">100</span> -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">0</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span> -&gt; headNode(<span class="number">101</span>)</span><br><span class="line">the length of the list: <span class="number">7</span></span><br><span class="line">delete the tail node:  <span class="number">101</span> -&gt; <span class="number">100</span> -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">0</span> -&gt; <span class="number">3</span> -&gt; headNode(<span class="number">101</span>)</span><br><span class="line">the length of the list: <span class="number">6</span></span><br><span class="line">delete the header node:  <span class="number">100</span> -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">0</span> -&gt; <span class="number">3</span> -&gt; headNode(<span class="number">100</span>)</span><br><span class="line">the length of the list: <span class="number">5</span></span><br><span class="line">delete the fourth node: <span class="number">100</span> -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; headNode(<span class="number">100</span>)</span><br><span class="line">the length of the list: <span class="number">4</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h3><ul><li><em>上述示例程序主要参考本书籍：《数据结构与算法经典问题解析》—— 纳拉辛哈·卡路曼希[著]</em></li><li><em>很认真的说这是我大二至今看过的最好的一本关于数据结构与算法的书籍哟 ! 其针对不同问题提供多个具有不同复杂度的解决方案.兼顾自学教材和面试辅导的不同需求呢 !</em></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;h3 id=&quot;链表的定义&quot;&gt;&lt;a href=&quot;#链表的定义&quot; class=&quot;headerlink&quot; title=&quot;链表的定义&quot;&gt;&lt;/a&gt;链表的定
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Data Structures and Algorithms" scheme="http://yoursite.com/tags/Data-Structures-and-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>VOA:Google`s Lookout App Helps Blind People Experience the World</title>
    <link href="http://yoursite.com/2019/04/18/VOA-Google-s-Lookout-App-Helps-Blind-People-Experience-the-World/"/>
    <id>http://yoursite.com/2019/04/18/VOA-Google-s-Lookout-App-Helps-Blind-People-Experience-the-World/</id>
    <published>2019-04-18T00:12:55.000Z</published>
    <updated>2019-04-19T02:29:36.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="谷歌推出Lookout-应用帮助盲人看世界"><a href="#谷歌推出Lookout-应用帮助盲人看世界" class="headerlink" title="谷歌推出Lookout 应用帮助盲人看世界"></a>谷歌推出<code>Lookout</code> 应用帮助盲人看世界</h2><p><em>Google has launched a new app desgined to help blind people explore their surroundings.</em></p><ul><li><em>谷歌推出了一款新应用,旨在帮助盲人探索周围环境.</em></li></ul><p><em>The free app,called Lookout,is currently available to users in the United States who own a Google Pixel device. The company says it hopes to bring Lookout to more devices and additional countries soon.</em></p><ul><li><em>这款名为Lookout的免费应用,目前在美国拥有Google Pixel设备的用户都可以使用.谷歌公司表示,希望尽快让更多设备和国家可以使用Lookout应用.</em></li></ul><p><em>The app was first announced at Google’s I/O developer conference in May 2018. Since then,the company says it has been testing and working to improve te quality of its results.</em></p><ul><li><em>该应用程序于2018年5月在谷歌的I/O开发者大会上首次发布.自那以后,该公司表示一直进行测试,并努力提高其结果质量.</em></li></ul><p><em>The app uses technology similar to Google Lens. That produt uses machine learning to recognize text and objects through device’s camera. Users can then receive information about or take actions related to the text and recognized objects.</em></p><ul><li><em>该应用程序所使用的技术与Google Lens类似,Google Lens通过设备上的相机利用机器学习技术来识别文本和物体,然后,用户可以通过接收有关文本和可识别物体的信息继而采取相应的行动.</em></li></ul><p><em>Lookout builds on this same technology,but aims to provide assistance to people who are blind or have low vision.</em></p><ul><li><em>Lookout基于同样的技术,但这款应用旨在为盲人或视力低下的人提供帮助.</em></li></ul><p><em>The app users a devices’s camera to recognize text and objects and then provide voice descriptions about what is sees.</em></p><ul><li><em>该应用程序使用设备的摄像头来识别文本和物体,然后提供对所见内容的语音描述.</em></li></ul><p><em>Lookout is not designed to describe everything,but instead seeks to search out things that people would most likely care about. The app can learn to judge what things are most important to a person <code>over time</code>.</em></p><ul><li><em>Lookout应用程序并不会对所有事务进行描述,而是寻找人们最关心的事情.随着时间的推移,这个应用程序可以学会判断什么是对用户来说是最重要的事情.</em></li></ul><p><em>Google says the app operates best when the wears a device around the neck or inside a pocket,with the camera <code>lens</code> pointed outward.</em></p><ul><li><em>谷歌表示,当用户将设备戴在脖子上或放入口袋里,摄像头朝外时,应用程序运行效果最好.</em></li></ul><p><em>Lookout was thress main settings for people to use.</em></p><ul><li><em>Lookout应用有三种主要模式可供人们使用.</em></li></ul><p><em>The Explore setting is designed to provide assistance for people carrying out daily activities or for identifying things in new place. A Shopping setting can capture products and help users identify their money. The Quick Read setting can help users go through their email,read signs or identify other printed <code>materials</code>.</em></p><ul><li><em>探索模式旨在为人们进行日常活动或识别新地方的事物提供帮助,购物模式可以捕获产品并帮助用户识别产品价格.快速阅读模式可以帮助用户浏览邮件,读取指示牌或识别其他印刷材料.</em></li></ul><p><em>User can control parts of the app through a fingeprint <code>sensor</code>. For example,the sensor can be used to change operating settings or go through recent result captured by the camera. The app has three different detail levels that can be activated to provide more or less information about objects.</em></p><ul><li><em>用户可以通过指纹传感器控制应用程序的部分功能.例如,传感器可以用来改变操作模式或查看相机最近拍到的结果.这款应用提供三种不同的信息详细程序,激活后可以提供物体或多或少的信息.</em></li></ul><p><em>There are other apps and devices designed to assist these people,too.</em></p><ul><li><em>还有其他的应用和设备为这些人提供帮助.</em></li></ul><p><em>Microsoft’s free Seeing AI app works similary to Google Lookout. Microsoft calls its system——launched for iPhone users in 2017 -a “talking camera for the blind.”,Seeing AI can recognize text,objects and people and speaks results to users.</em></p><ul><li><em>微软的免费Seeing AI应用程序的工作原理与谷歌的Lookout应用乐类似.微软称其于2017年为iPhone用户推出的系统为: “盲人的语音相机”.Seeing AI可以识别文本,物体和人,并向用户播报结果.</em></li></ul><p><em>Microsoft says the system can provide audio sounds that relate to current light levels around the user. A recently released version also reportedly lets uers put their fingers over a photo of something to get a sense of how the object feels. The app produces smail <code>vibrations</code> sounds to help this process.</em></p><ul><li><em>微软表示,该系统可以提供与当前用户周围光线水平相关的音频.据报道,最近发布的一个版本还允许用户将手指放在物体的照片上,以感知照片中的物体.这款应用程序会产生微小的震动和声音,为这一过程提供帮助.</em></li></ul><p><em>Another free app,called Be My Eyes,connects blind or low-sight individuals with sighted volunteers through live video calls.</em></p><ul><li><em>另一款名为: “Be My Eyes”的免费应用程序通过实时的视频通话,将盲人或视力较低的人与视力正常的志愿者联系起来.</em></li></ul><p><em>I’m Bryan Lynn.</em></p><h3 id="重点单词"><a href="#重点单词" class="headerlink" title="重点单词"></a>重点单词</h3><ol><li>lens         <code>(n)</code>           透镜,镜头,眼睛中的水晶体.</li><li>material     <code>(n)</code>           材料,原料,物资,布料.</li><li>sensor       <code>(n)</code>           传感器.</li><li>vibration    <code>(n)</code>           振动,犹豫,心灵感应.</li></ol><h3 id="重点短语"><a href="#重点短语" class="headerlink" title="重点短语"></a>重点短语</h3><ol><li>over time : 随着时间的过去,久而久之,加班,超时.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;谷歌推出Lookout-应用帮助盲人看世界&quot;&gt;&lt;a href=&quot;#谷歌推出Lookout-应用帮助盲人看世界&quot; class=&quot;headerlink&quot; title=&quot;谷歌推出Lookout 应用帮助盲人看世界&quot;&gt;&lt;/a&gt;谷歌推出&lt;code&gt;Lookout&lt;/code
      
    
    </summary>
    
    
      <category term="VOA" scheme="http://yoursite.com/tags/VOA/"/>
    
  </entry>
  
  <entry>
    <title>VOA:Napping May Improve Learning,Memory</title>
    <link href="http://yoursite.com/2019/04/17/VOA-Napping-May-Improve-Learning-Memory/"/>
    <id>http://yoursite.com/2019/04/17/VOA-Napping-May-Improve-Learning-Memory/</id>
    <published>2019-04-17T00:44:57.000Z</published>
    <updated>2019-04-17T15:22:04.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VOA-午休对学习记忆有益"><a href="#VOA-午休对学习记忆有益" class="headerlink" title="VOA : 午休对学习记忆有益"></a>VOA : 午休对学习记忆有益</h2><p><em>From VOA Learning English,this is the Health &amp; Lifestyle Report.</em></p><ul><li><em>这里是美国之音慢速英语健康和生活报道.</em></li></ul><p><em>March 16 is International Sleep Day.</em></p><ul><li><em>3月16日是国际睡眠日.</em></li></ul><p><em>And we should all celebrate the act of sleeping. Studies have shown that a good night’s rest helps us stay healthy,both <code>mentally</code> and physically. And researchers say sleep is probably the best tool we have for memeory and learning.</em></p><ul><li><em>我们大家都应该庆祝睡眠这一行为.研究表明,晚上睡得好有益身心健康,研究人员说睡眠对记忆与学习来说也许是最佳的工具.</em></li></ul><p><em>Michael Twery is director of National Center on Sleep Disorders Research at Americal’s National <code>Institutes</code> of Health.Twery is an expert on the sicence of sleep and sleep <code>disorders</code>. He told me that a good night’s sleep helps to lean better.</em></p><ul><li><em>迈克尔·特维里是美国国立卫生研究院睡眠絮乱研究中心的负责人,他是睡眠与睡眠障碍科学方面的专家,他跟我说晚间好的睡眠有助于学习.</em></li></ul><p><em>Getting a good night’s sleep is important for the learning and memory process. It’s important because it stores the training exercises and the learning exercises into our more <code>permanent</code> memory while we’re sleeping 7-8 hours in bed. And then the next morning when you wake up,your mind is better prepared to act on that information.</em></p><ul><li><em>睡个好觉对于学习和记忆来说很重要,睡眠能够更加长久地存储我们的训练与学习信息,因为当我们睡七八个小时的时候,第二天早上起来时,你的大脑可以更好地准备处理那些信息.</em></li></ul><p><em>But what about getting durig the middle of the day? Short <code>periods</code> of sleep my help our brains work better,or so says a recent study on mapping.</em></p><ul><li><em>不过在中午休息会如何? 最近,一项关于睡眠的调查表明,短时间睡眠有助于大脑的运转.</em></li></ul><p><em>Past studies have shown that mapping can help babies and young children learn better And napping can help brain performance in older adults.</em></p><ul><li><em>以前的研究表明,宝宝和儿童午休有助于学习.对于年纪稍长的成年人来说,午休能够让大脑更好地运转.</em></li></ul><p><em>Taking a nap may also help this group of people <code>fight off</code> <code>age-related</code> memory loss.</em></p><ul><li><em>午休也许能够帮助这些年轻人应对因年龄增长带来的记忆衰退.</em></li></ul><p><em>Many Americans do nap. But one-third of all adult in the United States are also <code>chronically</code> tired,notes the U.S. Centers for Disease Control and Prevention(<code>CDC</code>). It found that 50 million to 70 million Americans have <code>chronic</code> sleep disorders.</em></p><ul><li><em>许多美国人都有午休的习惯.不过,美国疾病控制和预防中心指出,三分之一的美国成年人都有慢性疲劳,有5000万到7000万的美国人患有慢性睡眠絮乱症.</em></li></ul><p><em>So,someone who naps as a way of paying off a sleep debt may not experience the same improvements from mapping as a healthy,<code>well-rested</code> person would.</em></p><ul><li><em>所以,同样是午休,缺乏睡眠的人与睡眠充足的健康人士相比,效果没有那么好.</em></li></ul><p><em>Also,many people may not want to admit that they take naps. They may think that napping shows they are weak or lack energy. They only children,the very old,sick or lazy people nap is not an uncommon opinion.</em></p><ul><li><em>很多人也不想承认他们有午休的习惯.他们也许认为午休说明自己身体很弱,没有精力.人们普遍认为,只有小孩,老人,多病的人和懒人才会午休.</em></li></ul><p><em>In fact,we Americans somethimes do a very strange thing. Some <code>brag</code> about how few hours of sleep they need each night.</em></p><ul><li><em>事实上,美国人有时候会做一件非常奇怪的事,有人会吹嘘自己一晚休息的时间是如果如何得少.</em></li></ul><p><em>Health <code>experts</code> suggest that adults get seven to eight hours of sleep each night. People who claim they only sleep four or five hours a night,they may think thery are somehow stronger than the average human -  superhuman,if you will.</em></p><ul><li><em>健康专家建议成年人一晚睡七到八个小时.那些说自己一晚只睡四五个小时的人,他们自认为比常人更加强壮——或者说是超人.</em></li></ul><p><em>However,that may be changing. Many offices now offer napping rooms and napping cafes are appearning in many U.S. cities,including Washington,D.C.</em></p><ul><li><em>然而,情况不同的.美国城市许多办公室都在提供午休的房间和休息咖啡室,包括华盛顿地区.</em></li></ul><p><em>While resting in the middle of the work day may seem like a <code>luxury</code> to Americans,napping is very much part of normal,everyday life in other parts of the world.</em></p><ul><li><em>工作日午睡对于美国人来说也许很奢侈,但是对于全世界上其它国家与地区来说,午睡是日常生活的一部分.</em></li></ul><p><em>Take China,for example: While it depends on the age and job,China,generally speaking,is a land of nappers.</em></p><ul><li><em>就拿中国来说吧,午睡因年龄和职业而异,中国可以说是一个”午睡之国”.</em></li></ul><p><em>So,researchers receently looked at information provided by nearly 3000 Chinese adults,aged 65 year or older. They wanted to learn if napping after a <code>min-day</code> meal,a tradition in many areas,had any effect on the <code>mental</code> performance of the subjects.</em></p><ul><li><em>所以,近期研究人员查阅了由3000名65岁及以上的中国人所提供的信息.他们想知道午餐(许多地区的传统)是否会对身体有影响.</em></li></ul><p><em>First,the researchers asked the people if they napped and for how long. Then based on their answers,researchers put them into four groups: non-nappers(0 minutes),short nappers(less than 30 minutes),moderate nappers(30-90 minutes),and <code>extended</code> nappers(more than 90 minutes).</em></p><ul><li><em>首先,研究人员问这些参与调查的人是否会午睡?睡多久?然后,根据他们的回答,把他们分为四组:不午睡的人,睡很短时间的人(少于30分钟),睡眠时间适中的人(30-90分钟),睡时间很长的人(超过90分钟).</em></li></ul><p><em>Nearly 60 percent of those 3,000 people said they did take a nap after lunch and that their naps lasted anywhere from 30 to 90 minutes. Most of the subjects who said they napped said said they napped from about an hour.</em></p><ul><li><em>在这3000人当中,近60%说自己午饭之后会午休30到90分钟.大多数会午睡的人一般都睡一个小时左右.</em></li></ul><p><em>The study found that people who took an hour-long map did much better on mental tests than those who did not nap. The hour-long nappers also did better on the test than those who napped for shorter and longer periods. In this study,it seems that the most effective nap lasted for about an hour,but not much longer.</em></p><ul><li><em>研究发现,午休一个小时的体能检验结果比不午休的人好.睡一个小时的人比午休时间短于一小时或长于一小时的人测验结果更好.在这次研究中,似乎最佳睡眠时长是一个小时左右,但别睡太长时间.</em></li></ul><p><em>These researchers reported their findings in Journal of the American Geriatrics Society.</em></p><ul><li><em>这些研究人员在《美国老年学会杂志》上发布了他们的研究成果.</em></li></ul><p><em>Keep in mind,however,that these are the findings for those over the age of 65.</em></p><ul><li><em>不过,要记住,这些研究成果是针对年龄在65岁以上的人.</em></li></ul><p><em>Yet Doctor Michael Twery notes that an hour long nap may be to long for young.healthy adults.”Currently,we’re recommending that we try to sleep for about 30 minutes or less. And 30 minutes is enough to remove the pressure to sleep and will help us feel more awake. If we nap longer,we will get trapped into those deeper layers of sleep,which can ben hard to get out of.”</em></p><ul><li><em>不过迈克尔·特维里博士指出,对于身体健康的年轻人来说,午休一个小时或许太长了,”目前,我们建议大家睡30分钟或者更短,30分钟足够缓解睡眠压力,也会让我们更清醒.如果我们睡更长,会陷入深度睡眠,这样就很难醒过来了.”</em></li></ul><p><em>The feeling Twery described is called sleep <code>inertia</code>——the period when you awake from a very deep sleep. For a time.you are unable to think clearly.</em></p><ul><li><em>特维里把这种感觉称为睡眠惯性——从深度睡眠中醒过来的那段时间.短时间之内,你无法清楚地思考.</em></li></ul><p><em>So sleep inertia is when someone is being awakened from deep sleep,Some <code>individuals</code> may find it hard to change instantly from that deep sleep——where everything is a bit <code>foggy</code> and <code>confused to</code> the fully awake state. We may be little bit <code>clumsy</code>. We may not have all our thoughts in order when we wake from deep sleep.</em></p><ul><li><em>所以睡眠惯性就是人们从深度睡眠中醒过来,有些人会发现很难从深度睡眠中马上改变过来.或许我们有一点笨拙,从深度睡眠中醒过时来我们的思维并不是很清楚.</em></li></ul><p><em>The National Sleep Foundation also warns that if you have trouble falling asleep at night,limit your daytime nap to under 45 minutes. Also nap before 3 p.m. in the afternoon.</em></p><ul><li><em>美国国家睡眠基金会警告称,如果晚上很难入眠,白天睡觉的时间要控制在45分钟之内,并且在下午三点之前进行午休.</em></li></ul><p><em>And that’s the Health &amp; Lifestyle report. I’m Anna Matteo.</em></p><ul><li><em>以上就是今天的健康和生活报道,我是安娜·马泰奥.</em></li></ul><h3 id="重点词汇"><a href="#重点词汇" class="headerlink" title="重点词汇"></a>重点词汇</h3><ol><li>luxury           <code>(n)</code>           奢侈品.</li><li>institute        <code>(n)</code>           学会,协会,学院.</li><li>disorder         <code>(n)</code>           混乱,骚乱.</li><li>expert           <code>(n)</code>           专家,行家,能手</li><li>period           <code>(n)</code>           周期,期间.</li><li>inertia          <code>(n)</code>           惯性,惰性,迟钝.</li><li>individual       <code>(n)</code>           个人,个体.</li><li>nap              <code>(n/v)</code>         午休.</li><li>brag             <code>(v)</code>           吹嘘.</li><li>permanent       <code>(a)</code>           永久的,永恒的,不变的.</li><li>foggy           <code>(a)</code>           有雾的,模糊的,朦胧的.</li><li>mental          <code>(a)</code>           精神的,脑力的,疯的.</li><li>extended        <code>(a)</code>           延伸的,扩大的,长期的.</li><li>clumsy          <code>(a)</code>           笨拙的.</li><li>chronic         <code>(a)</code>           慢性的.</li><li>lazy            <code>(a)</code>           懒的.</li><li>mentally        <code>(ad)</code>          精神上,智力上,心理上.</li><li>chronically     <code>(ad)</code>          长期地,慢性地,习惯性地.</li><li>age-relate                      年龄相关,与年龄相关.</li><li>well-rested                     休息充分的.</li></ol><h3 id="重点短语"><a href="#重点短语" class="headerlink" title="重点短语"></a>重点短语</h3><ol><li>fight off : 击退,排斥,竭力避免.</li><li>be confused to : 迷惑,被混淆了.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;VOA-午休对学习记忆有益&quot;&gt;&lt;a href=&quot;#VOA-午休对学习记忆有益&quot; class=&quot;headerlink&quot; title=&quot;VOA : 午休对学习记忆有益&quot;&gt;&lt;/a&gt;VOA : 午休对学习记忆有益&lt;/h2&gt;&lt;p&gt;&lt;em&gt;From VOA Learning 
      
    
    </summary>
    
    
      <category term="VOA" scheme="http://yoursite.com/tags/VOA/"/>
    
  </entry>
  
  <entry>
    <title>一款瞄准大学生的交友软件:TinderU</title>
    <link href="http://yoursite.com/2019/04/16/%E4%B8%80%E6%AC%BE%E7%9E%84%E5%87%86%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%9A%84%E4%BA%A4%E5%8F%8B%E8%BD%AF%E4%BB%B6-TinderU/"/>
    <id>http://yoursite.com/2019/04/16/一款瞄准大学生的交友软件-TinderU/</id>
    <published>2019-04-16T00:50:23.000Z</published>
    <updated>2019-04-16T11:11:40.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TinderU-App-Amins-to-Help-College-Student-Find-Frends-Partner-——-August-26-2018"><a href="#TinderU-App-Amins-to-Help-College-Student-Find-Frends-Partner-——-August-26-2018" class="headerlink" title="TinderU App Amins to Help College Student Find Frends,Partner —— August 26, 2018"></a><code>TinderU</code> App Amins to Help College Student Find Frends,Partner —— August 26, 2018</h2><p><em>It is back-to-school season in the United States,Mang youg adults <code>are headed to</code> colloges and universities.</em></p><ul><li><em>有又到了美国开学季.不少年轻人就要踏进大学校园.</em></li></ul><p><em>A new app might make their social lives as busy as their academic schedules.</em></p><ul><li><em>一款新应用可能会让他们的社交生活和学业日程一样繁忙.</em></li></ul><p><em>The popular dating app <code>Tinder</code> has just launched <code>TinderU</code>.The tool is designed to help students find friends,study partners and, possibly, love.</em></p><ul><li><em>热门约会应用<code>Tinder</code>刚刚推出了<code>TinderU</code>.该工具旨在帮助学生找出友谊,学习伙伴,还有爱情哟 ~(怎么感觉我好需要呀..)</em></li></ul><p><em>On <code>TinderU</code>,users can look at pictures and information about other students at their university and other schools nearby.Just like on Tinder,if you see somebody you think you might like,you swipe right to “match” with that person,If you are not interested,you swipe left to pass.</em></p><ul><li><em>在<code>TinderU</code>上,用户可以看到本科生及周边学校学生的照片和信息.如同<code>Tinder</code>一样,如果你看到了自己可能感兴趣的人,就可以在屏幕上右滑,和对方”配对”.如果你不感兴趣就向左滑.</em></li></ul><p><em>Only college students attending four-year schools can use <code>TinderU</code>.Online and <code>for-profit</code> colleges and universities are not included at this time,All that <code>TinderU</code> requires of users is a .edu email address.</em></p><ul><li><em>目前,只有就读于四年制大学的在校学生才可以使用<code>TinderU</code>,在线和盈利性学院的学生不包含在内.<code>TinderU</code>仅需要用户提供一个<code>.edu</code>邮箱地址就可以啦.</em></li></ul><p><em><code>Tinder</code> launched in 2012 in Los Angeles,California. It’s widely used around the world.The app is especially popular among people aged 18 to 34.</em></p><ul><li><em><code>Tinder</code>于2012年在加州洛杉矶推出,此后,在全世界得到了广泛应用.这款软件在18岁到34岁的人群中特别流行.</em></li></ul><p><em>Some people argue <code>TinderU</code> will destroy traditional socializing on college campuses.And they say student don’t need the app because they meet other students face-to-face each day.</em></p><ul><li><em>一些人认为<code>TinderU</code>会破坏大学校园里的传统社交活动.他们认为学生们不需要这个应用程序,因为他们每天都要和其他学生面对面.</em></li></ul><p><em>But the experience of starting college can be overwhelming for some.Mang students become independent for the first time in th their lives when they go to college.They often do not know a single person in that new environment.<code>Tinder</code> supporters say the app can help users find <code>like-minded</code> people to talk and, maybe, ask out on a date.</em></p><ul><li><em>然而,上大学的经历对一些人来说可能是难以承受的.因为对于许多学生而言,人生的第一次独立是从踏进学生生活的那一刻开始的.在那种新环境中,他们往往一个人也不认识.<code>Tinder</code>的支持者说:,这款应用可以帮助用户找到志同道合的朋友,他们可以一起聊天,还可以出去约会.</em></li></ul><p><em>The <code>Tinder</code> website says <code>Tinder</code> is in 190 countries,It averages 1.6 billion matches a day and reponsible for one million dates each week.</em></p><p><em>I’m Caty Weaver.</em></p><h3 id="重点词汇"><a href="#重点词汇" class="headerlink" title="重点词汇"></a>重点词汇</h3><ol><li>schedule       <code>(n)</code>       时间表.</li><li>swipe          <code>(v)</code>       滑动屏幕.</li><li>match          <code>(v)</code>       匹配.</li><li>argue          <code>(v)</code>       辩论,争论.证明,说服.</li><li>overwhelming   <code>(adj)</code>     压倒性的.</li><li>for-profit     <code>(adj)</code>     以盈利为目的,营利性,经营性 .       <code>(n)</code>   营利性的机构</li><li>like-minded    <code>(adj)</code>     志趣相投的,具有相似意向或目的.</li></ol><h3 id="重点短语"><a href="#重点短语" class="headerlink" title="重点短语"></a>重点短语</h3><ol><li>be headed to : 前往.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TinderU-App-Amins-to-Help-College-Student-Find-Frends-Partner-——-August-26-2018&quot;&gt;&lt;a href=&quot;#TinderU-App-Amins-to-Help-College-Student
      
    
    </summary>
    
    
      <category term="VOA" scheme="http://yoursite.com/tags/VOA/"/>
    
  </entry>
  
  <entry>
    <title>Naming Notations</title>
    <link href="http://yoursite.com/2019/04/15/Naming-Notations/"/>
    <id>http://yoursite.com/2019/04/15/Naming-Notations/</id>
    <published>2019-04-15T08:13:07.000Z</published>
    <updated>2019-04-15T08:56:48.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-命名规范"><a href="#Java-命名规范" class="headerlink" title="Java 命名规范"></a>Java 命名规范</h2><h3 id="Java总体命名规范"><a href="#Java总体命名规范" class="headerlink" title="Java总体命名规范"></a>Java总体命名规范</h3><ol><li><code>项目名</code>全部小写.</li><li><code>包名</code>全部小写.</li><li><code>类名</code>首字母大写,其余组成词首字母依次大写.</li><li>变量名,方法名首字母小写,如果名称由多个单词组成,除首字母外的每个单词的首字母都要大写.</li><li><code>常量名</code>全部大写.</li><li>所有命名规则必须遵循以下规则 :</li></ol><ul><li>名称只能由字母、数字、下划线、$符号组成.</li><li>不能以<code>数字</code>开头.</li><li>名称不能使用Java中的<code>关键字</code>.</li><li>坚决不允许出现中文及拼音命名.</li></ul><h3 id="Java包名命名规范"><a href="#Java包名命名规范" class="headerlink" title="Java包名命名规范"></a>Java包名命名规范</h3><ul><li><em>Java的包名由<code>小写单词</code>组成,包的路径符合所开发的<code>系统模块</code>的定义,以便通过包名可得知其属于哪个模块,从而方便到对应包里找相应的实现类.</em></li></ul><h4 id="常规包名"><a href="#常规包名" class="headerlink" title="常规包名"></a>常规包名</h4><p><em>为了保障每个<code>Java Package</code>命名的唯一性,在Java编程规范中要求开发人员在自己定义的包名前加上唯一的前缀.由于互联网上的<code>域名称</code>是不会重复的,所以多数开发人员采用自己公司在互联网上的域名称作为自己程序包的唯一前缀.例如 : <code>com.sun.swt..</code>.</em></p><ol><li>公司项目</li></ol><ul><li><em>com : 公司项目,<code>copyright</code>由项目发起的公司所有.</em></li><li><em>包名 : <code>com.公司名.项目名.模块名..</code></em></li></ul><ol start="2"><li>团队项目</li></ol><ul><li><em>team : 团队项目,指由团队发起,并由该团队开发的项目,<code>copyright</code>属于该团队所有.</em></li><li><em>包名 : <code>team.团队名.项目名.模块名..</code></em></li></ul><h4 id="自定义包名"><a href="#自定义包名" class="headerlink" title="自定义包名"></a>自定义包名</h4><p><em>一般公司命名为<code>com.公司名.项目名.模块名....</code>那我们个人的项目又怎么命名呢?</em></p><p><em><code>个人的</code>英语单词有<code>individual</code>、<code>personal</code>、<code>private</code>、<code>one-man</code>,进一步对以上四个单词<code>词意</code>进行分析并在保证了<code>唯一性</code>,继而使用每个单词的前4个字母作为<code>前缀</code>,与<code>com</code>也做了区分.示例如下所示:</em></p><ol><li>indi : 个体项目,指个人发起,但非自己独自完成的项目,可公开或私有项目,<code>copyright</code>主要属于发起者.</li></ol><ul><li><em>包名 : <code>indi.发起者名.项目名.模块名..</code></em></li></ul><ol start="2"><li>pers : 个人项目,指个人发起,独自完成,可分享的项目,<code>copyright</code>主要属于个人.</li></ol><ul><li><em>包名 : <code>pers.个人名.项目名.模块名..</code></em></li></ul><ol start="3"><li>priv : 私有项目,指个人发起,独自完成,非公开的私人使用的项目,<code>copyright</code>属于个人.</li></ol><ul><li><em>包名 : <code>priv.个人名.项目名.模块名..</code></em></li></ul><ol start="4"><li>onem : 与<code>indi</code>相同，推荐使用<code>indi</code>.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-命名规范&quot;&gt;&lt;a href=&quot;#Java-命名规范&quot; class=&quot;headerlink&quot; title=&quot;Java 命名规范&quot;&gt;&lt;/a&gt;Java 命名规范&lt;/h2&gt;&lt;h3 id=&quot;Java总体命名规范&quot;&gt;&lt;a href=&quot;#Java总体命名规范&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java reflection</title>
    <link href="http://yoursite.com/2019/04/15/Java-reflection/"/>
    <id>http://yoursite.com/2019/04/15/Java-reflection/</id>
    <published>2019-04-15T00:39:07.000Z</published>
    <updated>2019-04-19T02:16:02.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java Reflection"></a>Java Reflection</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><em><code>Reflection(反射)</code>是被认为<code>动态语言</code>的关键,反射机制允许程序在执行期间借助于<code>Reflection API</code>取得任何类的内部信息,并能直接操作任意对象的内部属性及方法.</em>  </p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p><em>动态代理</em></p><h3 id="反射机制提供的功能"><a href="#反射机制提供的功能" class="headerlink" title="反射机制提供的功能"></a>反射机制提供的功能</h3><ol><li>在运行时判断任意一个对象所属的类.</li><li>在运行时构造人任意一个类的对象.</li><li>在运行时判断任意一个类所具有的成员变量和方法.</li><li>在运行时调用任意一个对象的成员变量和方法.</li><li>生成<code>动态代理</code>(体现<code>动态语言</code>的特性).</li></ol><h4 id="反射相关的主要API"><a href="#反射相关的主要API" class="headerlink" title="反射相关的主要API"></a>反射相关的主要<code>API</code></h4><ul><li><em>java.lang.Class : 代表一个类.</em></li><li><em>java.lang.reflect.Method : 代表类的方法.</em></li><li><em>java.lang.reflect.Field : 代表类的成员变量.</em></li><li><em>java.lang.reflect.Constructor : 代表类的构造方法.</em></li><li><em>…</em></li></ul><h4 id="反射的简单应用示例"><a href="#反射的简单应用示例" class="headerlink" title="反射的简单应用示例"></a>反射的简单应用示例</h4><ol><li><p><em>首先创建一个存储用户信息的类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: UserInfo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 15, 2019 9:03:40 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserInfo</span><span class="params">(String name, String sex, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"UserInfo [name="</span> + name + <span class="string">", sex="</span> + sex + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showClassInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"ClassInfo: Store the user information ."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">System.out.println(s + <span class="string">"  my name is: "</span> + name + <span class="string">"  age: "</span> + age + <span class="string">"  sex: "</span> + sex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>其次利用<code>反射</code>获取该类中的信息</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.bean.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Ignore;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.reflection.bean.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: UserInfoTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 用`反射`获取`UserInfo`类中信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 15, 2019 9:10:08 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUseInfoByReflection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用反射 : 创建`UserInfo`类对象,并调用其中的属性及方法</span></span><br><span class="line"><span class="comment">// @Test</span></span><br><span class="line"><span class="meta">@Ignore</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commonTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">userInfo.setName(<span class="string">"Java reflection"</span>);</span><br><span class="line">userInfo.setAge(<span class="number">1</span>);</span><br><span class="line">userInfo.setSex(<span class="string">"Male"</span>);</span><br><span class="line">userInfo.showClassInfo();</span><br><span class="line">userInfo.introduce(<span class="string">"Hello !"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用反射: 创建`UserInfo`类对象,并调用其中的属性及方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reflectionTest</span><span class="params">()</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, NoSuchFieldException,</span></span><br><span class="line"><span class="function">SecurityException, NoSuchMethodException, IllegalArgumentException, InvocationTargetException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下述两行代码体现了: `UserInfo userInfo = new UserInfo();`的工作</span></span><br><span class="line">Class&lt;UserInfo&gt; class1 = UserInfo.class;</span><br><span class="line"><span class="comment">// 创建运行时类`UserInfo`类的对象</span></span><br><span class="line">UserInfo userInfo = class1.newInstance();</span><br><span class="line"></span><br><span class="line">System.out.println(userInfo);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通过`getField`调用别`public`修饰的`name`属性并为其赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">java.lang.reflect.Field fieldName = class1.getField(<span class="string">"name"</span>);<span class="comment">// `name`被`public`修饰,否则抛出: NoSuchFieldException</span></span><br><span class="line">fieldName.set(userInfo, <span class="string">"Java reflection"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(userInfo);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通过`getField`调用被`private`修饰的`age,sex`属性并为其赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Field fieldAge = class1.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">Field fieldSex = class1.getDeclaredField(<span class="string">"sex"</span>);</span><br><span class="line"><span class="comment">// 将此对象的 accessible 标志设置为指示的布尔值.值为 true 则指示反射的对象在使用时应该取消 Java 语言访问检查.</span></span><br><span class="line"><span class="comment">// 值为 false 则指示反射的对象应该实施 Java 语言访问检查.实际上setAccessible是启用和禁用访问安全检查的开关,</span></span><br><span class="line"><span class="comment">// 并不是为true就能访问为false就不能访问 ! false时使用对象会抛出 : IllegalAccessException .</span></span><br><span class="line"><span class="comment">// 由于JDK的安全检查耗时较多,所以通过`setAccessible(true)`的方式关闭安全检查就可以达到提升反射速度的目的 .</span></span><br><span class="line">fieldAge.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">fieldSex.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">fieldAge.set(userInfo, <span class="number">2</span>);</span><br><span class="line">fieldSex.set(userInfo, <span class="string">"male"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(userInfo);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通过``调用对象指定的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">java.lang.reflect.Method method = class1.getMethod(<span class="string">"showClassInfo"</span>);</span><br><span class="line"><span class="comment">// return: the result of dispatching the method represented bythis object on obj</span></span><br><span class="line"><span class="comment">// with parameters args.</span></span><br><span class="line">method.invoke(userInfo);</span><br><span class="line">Method method2 = class1.getMethod(<span class="string">"introduce"</span>, String.class);</span><br><span class="line">method2.invoke(userInfo, <span class="string">"Hello !"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UserInfo [name=<span class="keyword">null</span>, sex=<span class="keyword">null</span>, age=<span class="number">0</span>]</span><br><span class="line">UserInfo [name=Java reflection, sex=<span class="keyword">null</span>, age=<span class="number">0</span>]</span><br><span class="line">UserInfo [name=Java reflection, sex=male, age=<span class="number">2</span>]</span><br><span class="line">ClassInfo: Store the user information .</span><br><span class="line">Hello !  my name is: Java reflection  age: <span class="number">2</span>  sex: male</span><br></pre></td></tr></table></figure></li></ol><h3 id="详解反射的源头-Class"><a href="#详解反射的源头-Class" class="headerlink" title="详解反射的源头 : Class"></a>详解反射的源头 : <code>Class</code></h3><p><em>在<code>Object</code>类中定义了以下的方法,此方法被所有子类继承 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure></p><p><em>该返回值的类型是一个<code>Class</code>类,此类是<code>Java反射</code>的源头,实际上所谓的反射从程序的运行结果来看也也很理解,既: <code>可以通过对象反射求出类的名称.</code></em></p><ul><li><em>正常方式 : 引入需要的<code>包类</code>名称 ——&gt; 通过<code>new</code>实例化 ——&gt; 取得实例化对象</em></li><li><em>反射方式 : 实例化对象 ——&gt; <code>getClass()</code> ——&gt; 得到完整的<code>包类</code>名称</em></li></ul><h4 id="getClass-的使用"><a href="#getClass-的使用" class="headerlink" title="getClass()的使用"></a><code>getClass()</code>的使用</h4><ol><li><p><em>示例程序如下</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.bean.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.reflection.bean.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestUserInfoByReflection2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 学习反射源头: `Class`类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 15, 2019 11:58:34 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUserInfoByReflection2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getClassTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line"><span class="comment">// getClass() return: The Class object that represents the runtimeclass of this object.</span></span><br><span class="line"><span class="comment">// 通过`运行时类`的对象,调用其`getClass()`返回其运行时类</span></span><br><span class="line">Class&lt;?&gt; class1 = userInfo.getClass();</span><br><span class="line">System.out.println(class1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pers</span>.<span class="title">huangyuhui</span>.<span class="title">reflection</span>.<span class="title">bean</span>.<span class="title">UserInfo</span> //`运行时`类</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><em><code>运行时类</code> : example.java ——<code>编译器(javac.exe)</code>——&gt; example.class ——<code>JVM类加载器</code>——&gt; example.class被加载到内存(此时<code>example.class</code>就是一个<code>运行时类</code>,存放在<code>缓存区</code>,且运行时类本身就是一个<code>Class</code>实例并只加载一次 !)</em></li></ul><h4 id="获取Class类的实例的四种方式"><a href="#获取Class类的实例的四种方式" class="headerlink" title="获取Class类的实例的四种方式"></a>获取<code>Class</code>类的实例的四种方式</h4><p><em>获取<code>Class</code>类的实例后我们可以进行如下的操作:</em></p><ol><li>创建对应的运行时类的对象.</li><li>调用对应的运行时类的完整结构( 属性,方法,构造器 ).</li><li>获取对应的运行时类的完整结构( 属性,方法,构造器,父类,所在的包,异常,注解… ).</li></ol><p><em>获取<code>Class</code>类实例的四种方式的示例程序如下</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.bean.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.reflection.bean.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: GetClassObj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 获取`Class`类实例的四种方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 15, 2019 12:34:21 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetClassObj</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Test</span></span><br><span class="line"><span class="comment">// 第一种方式: 通过调用运行时类本身的`.class`属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstWayTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Class&lt;UserInfo&gt; class1 = UserInfo.class;</span><br><span class="line">Class&lt;String&gt; class2 = String.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the result: class pers.huangyuhui.reflection.bean.UserInfo</span></span><br><span class="line">System.out.println(class1);</span><br><span class="line"><span class="comment">// the result: class java.lang.String</span></span><br><span class="line">System.out.println(class2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Test</span></span><br><span class="line"><span class="comment">// 第二种方式: 通过`运行时类`的对象获取</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">secondWayTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">Class&lt;? extends UserInfo&gt; class1 = userInfo.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// getName() return: the name of the class or interfacerepresented by this object.</span></span><br><span class="line"><span class="comment">// the result: pers.huangyuhui.reflection.bean.UserInfo</span></span><br><span class="line">System.out.println(class1.getName());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Test</span></span><br><span class="line"><span class="comment">// 第三种方式: 通过`Class`的静态方法获取</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thirdWayTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, SecurityException, NoSuchFieldException </span>&#123;</span><br><span class="line"></span><br><span class="line">String className = <span class="string">"pers.huangyuhui.reflection.bean.UserInfo"</span>;</span><br><span class="line">Class&lt;?&gt; class1 = Class.forName(className);</span><br><span class="line"></span><br><span class="line"><span class="comment">// the result: public java.lang.String</span></span><br><span class="line"><span class="comment">// pers.huangyuhui.reflection.bean.UserInfo.name</span></span><br><span class="line">System.out.println(class1.getField(<span class="string">"name"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 第四种方式: 通过类加载器获取</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fourthWayTest</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, SecurityException </span>&#123;</span><br><span class="line"></span><br><span class="line">String className = <span class="string">"pers.huangyuhui.reflection.bean.UserInfo"</span>;</span><br><span class="line"></span><br><span class="line">ClassLoader classLoader = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line"><span class="comment">// Invoking this method is equivalentto invoking loadClass(name,false).</span></span><br><span class="line">Class&lt;?&gt; class1 = classLoader.loadClass(className);</span><br><span class="line"></span><br><span class="line"><span class="comment">// the result: public void pers.huangyuhui.reflection.bean.UserInfo.introduce(java.lang.String)</span></span><br><span class="line">System.out.println(class1.getMethod(<span class="string">"introduce"</span>, String.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类加载器ClassLoader"><a href="#类加载器ClassLoader" class="headerlink" title="类加载器ClassLoader"></a>类加载器<code>ClassLoader</code></h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p><em>类加载器的作用:把<code>类(class)</code>装载进内存.如下示例</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java源文件(*.java) ——Java编译器——&gt; 字节码文件(*.class) ——类加载器+字节码效验器+解释器——&gt; 操作系统平台</span><br></pre></td></tr></table></figure></p><p><em><code>JVM</code>规范定义了两种类型的类加载器:<code>启动类加载器(bootstrap)</code>和<code>用户自定义加载器(user-defined class loader)</code>.JVM在运行时会产生<code>三个类加载器</code></em></p><ol><li>引导类加载器.</li></ol><ul><li><em><code>JVM</code>自带的类加载器,负责Java平台核心库,用来加载核心类库,该加载器无法直接获取.</em></li></ul><ol start="2"><li>扩展类加载器.</li></ol><ul><li><em>负责<code>jar包</code>或将指定目录下的<code>jar包</code>装入工作库.</em></li></ul><ol start="3"><li>系统类加载器.</li></ol><ul><li><em>负责<code>java-classpath</code>或<code>java.class.path</code>所指的目录下的类与<code>jar</code>包装入工作.(最常用)</em></li></ul><p><em><code>三个类加载器</code>的示例程序如下</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.reflection.bean.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ClassLoader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 类加载器`Classloader`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 15, 2019 5:37:30 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">systemClassLoaderTest</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取`系统类加载器`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ClassLoader classLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line"><span class="comment">// getName() Returns: name of this class loader,or null if this class loader is</span></span><br><span class="line"><span class="comment">// not named.</span></span><br><span class="line"><span class="comment">// the result: jdk.internal.loader.ClassLoaders$AppClassLoader@28c97a5</span></span><br><span class="line">System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取`系统类加载器`的父类加载器(`平台类加载器: getPlatformClassLoader`)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ClassLoader classLoader2 = classLoader.getParent();</span><br><span class="line"><span class="comment">// the result: jdk.internal.loader.ClassLoaders$PlatformClassLoader@7bedc48a</span></span><br><span class="line">System.out.println(classLoader2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查看自定义类`UserInfo`由哪个加载器加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;UserInfo&gt; class1 = UserInfo.class;</span><br><span class="line">ClassLoader classLoader3 = class1.getClassLoader();</span><br><span class="line"><span class="comment">// the result: jdk.internal.loader.ClassLoaders$AppClassLoader@28c97a5</span></span><br><span class="line"><span class="comment">// 由运行结果可知,该自定义类被`系统加载器`加载</span></span><br><span class="line">System.out.println(classLoader3);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查看`java.lang.Object`(核心类库)由哪一个加载器加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;?&gt; class2 = Class.forName(<span class="string">"java.lang.Object"</span>);</span><br><span class="line">ClassLoader classLoader4 = class2.getClassLoader();</span><br><span class="line"><span class="comment">// the result: null</span></span><br><span class="line"><span class="comment">// 运行结果为`null`,说明该类被`引导类加载器`加载 !</span></span><br><span class="line"><span class="comment">// `引导类加载器`: `JVM`自带的类加载器,负责Java平台核心库,用来加载核心类库,该加载器无法直接获取</span></span><br><span class="line">System.out.println(classLoader4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h4><p><em>当程序主动使用某个类时,如果该类还未被<code>加载</code>到内存中,则系统会通知如下三个步骤来对该类进行初始化.</em></p><ol><li>类的加载 : 将类的<code>Class</code>文件读入到内存,并为之创建一个<code>java.lang.Class</code>对象,此过程由类加载器完成.</li><li>类的链接 : 将类的<code>二进制</code>数据合并到<code>JRE</code>中.</li><li>类的初始化 : <code>JVM</code>负责对类进行初始化.</li></ol><h4 id="类加载器的应用"><a href="#类加载器的应用" class="headerlink" title="类加载器的应用"></a>类加载器的应用</h4><ol><li><p><em>利用<code>ClassLoader</code>读取指定<code>包</code>下的配置文件(如果不使用类加载器配置文件只能放在<code>项目</code>目录下..).程序示例如下 :</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ReadConfigFileInfo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 利用`ClassLoad`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 15, 2019 6:29:39 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadConfigFileInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">classLoaderTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不使用`ClassLoader`,读取当前工程下的配置文件的方式如下:</span></span><br><span class="line"><span class="comment">// FileInputStream fileInputStream = new FileInputStream(new File("user.properties"));</span></span><br><span class="line"></span><br><span class="line">ClassLoader classLoader = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line"><span class="comment">// return: An input stream for reading the resource.</span></span><br><span class="line">InputStream inputStream = classLoader</span><br><span class="line">.getResourceAsStream(<span class="string">"pers\\huangyuhui\\reflection\\classloader\\user.properties"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reads a property list (key and element pairs) from the inputbyte stream.</span></span><br><span class="line">properties.load(inputStream);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"singer: "</span> + properties.getProperty(<span class="string">"singer"</span>) + <span class="string">"\nsong: "</span> + properties.getProperty(<span class="string">"song"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>在<code>pers.huangyuhui.reflection.classloader</code>包下创建配置文件<code>user.properties</code></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">singer=Justin Bieber</span><br><span class="line">song=Love yourself</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">singer: Justin Bieber</span><br><span class="line">song: Love yourself</span><br></pre></td></tr></table></figure></li></ol><h3 id="newInstance-创建运行时类的对象"><a href="#newInstance-创建运行时类的对象" class="headerlink" title="newInstance()创建运行时类的对象"></a><code>newInstance()</code>创建运行时类的对象</h3><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><p><em>创建类的对象: 调用<code>Class</code>对象的<code>newInstance()</code>方法,要求如下：</em></p><ol><li>类必须有一个无参数的构造器.</li><li>类的构造器的访问权限需要足够.</li></ol><h4 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.newinstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.reflection.bean.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: NewInstanceTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 使用`newInstance()`创建运行时类的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 16, 2019 10:08:37 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewInstanceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">String className = <span class="string">"pers.huangyuhui.reflection.bean.UserInfo"</span>;</span><br><span class="line">Class&lt;?&gt; class1 = Class.forName(className);</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="comment">// 使用`newInstance()`创建对应的运行时类的对象时实际上是调用了运行时类的空参构造器.</span></span><br><span class="line">UserInfo userInfo = (UserInfo) class1.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// the result: UserInfo [name=null, sex=null, age=0]</span></span><br><span class="line">System.out.println(userInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过反射调用类的完整结构"><a href="#通过反射调用类的完整结构" class="headerlink" title="通过反射调用类的完整结构"></a>通过反射调用类的<code>完整结构</code></h3><ol><li>获取属性</li></ol><ul><li><em>略</em></li></ul><ol start="2"><li>获取方法</li></ol><ul><li><em>略</em></li></ul><ol start="3"><li>获取构造器</li></ol><ul><li><em>略</em></li></ul><h3 id="反射的应用之动态代理"><a href="#反射的应用之动态代理" class="headerlink" title="反射的应用之动态代理"></a>反射的应用之<code>动态代理</code></h3><h4 id="动态代理介绍"><a href="#动态代理介绍" class="headerlink" title="动态代理介绍"></a><code>动态代理</code>介绍</h4><ol><li>概念<br><em>动态代理是指客户通过代理类来调用其它对象的方法,并且是在程序运行时根据需要动态创建目标类的代理对象.</em></li><li>使用场合<br><em>调试及远程方法调用等..</em></li><li>设计模式的原理<br><em>使用一个代理将对象包装起来,然后使用该代理对象取代原始对象.任何对原始对象的调用都要通过代理.代理对象决定是否以及何时将方法调用转到原始对象上.</em></li></ol><h4 id="静态代理程序示例"><a href="#静态代理程序示例" class="headerlink" title="静态代理程序示例"></a><code>静态代理</code>程序示例</h4><p><em>为了与动态代理相比较,静态代理程序示例如下.不难发现: 如果添加不同接口则需要不同的代理类来完成其代理!很繁琐!!</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.proxy;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ClothFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createCloth</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NikeClothFactory</span> <span class="keyword">implements</span> <span class="title">ClothFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Create the cloth .."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">ClothFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">NikeClothFactory nikeClothFactory;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(NikeClothFactory nike)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.nikeClothFactory = nike;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"This is static proxy .."</span>);</span><br><span class="line">nikeClothFactory.createCloth();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: StaticProxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 静态代理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 18, 2019 10:31:27 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">NikeClothFactory nikeClothFactory = <span class="keyword">new</span> NikeClothFactory();</span><br><span class="line">ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory(nikeClothFactory);</span><br><span class="line">proxyFactory.createCloth();</span><br><span class="line"></span><br><span class="line"><span class="comment">//程序运行结果如下所示 :</span></span><br><span class="line"><span class="comment">// This is static proxy ..</span></span><br><span class="line"><span class="comment">// Create the cloth ..</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="动态代理程序示例"><a href="#动态代理程序示例" class="headerlink" title="动态代理程序示例"></a><code>动态代理</code>程序示例</h4><ul><li><em><code>反射</code>是动态语言的关键,程序示例如下 :</em><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subjet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subjet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"被代理类执行的动作 .."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现动态代理的核心类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Object obj;<span class="comment">// 实现了接口的被代理类的对象的声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给被代理的对象实例化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">dynamicInit</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.obj = object;</span><br><span class="line"><span class="comment">// `动态`地创建指定代理类的对象并返回</span></span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// 当通过代理类的对象发起对被重写的方法调用时,都会转换为对如下`invoke`方法的调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">Object object = method.invoke(obj, args);</span><br><span class="line"><span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: DynamicProxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 动态代理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 18, 2019 11:03:54 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">MyInvocationHandler myInvocationHandler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">RealSubject realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line"></span><br><span class="line"><span class="comment">// `dynamicInit`方法动态的返回一个同样实现了 `Real ...`所在类实现的接口`Subject`的代理类的对象</span></span><br><span class="line">Object object = myInvocationHandler.dynamicInit(realSubject);</span><br><span class="line"><span class="comment">// 此时`subject`为代理类的对象</span></span><br><span class="line">Subjet subjet = (Subjet) object;</span><br><span class="line"><span class="comment">// 调用`action`时会转到对`InvocationHandler`接口的实现类的`invoke`方法的调用</span></span><br><span class="line">subjet.action();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为证明动态代理的特性,再实现一个接口的代理类的对象</span></span><br><span class="line">NikeClothFactory nikeClothFactory = <span class="keyword">new</span> NikeClothFactory();</span><br><span class="line">ClothFactory clothFactory = (ClothFactory) myInvocationHandler.dynamicInit(nikeClothFactory);</span><br><span class="line">clothFactory.createCloth();</span><br><span class="line"></span><br><span class="line"><span class="comment">//程序运行结果如下所示 :</span></span><br><span class="line"><span class="comment">//被代理类执行的动作 ..</span></span><br><span class="line"><span class="comment">//Create the cloth ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-Reflection&quot;&gt;&lt;a href=&quot;#Java-Reflection&quot; class=&quot;headerlink&quot; title=&quot;Java Reflection&quot;&gt;&lt;/a&gt;Java Reflection&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java annotation</title>
    <link href="http://yoursite.com/2019/04/14/Java-annotation/"/>
    <id>http://yoursite.com/2019/04/14/Java-annotation/</id>
    <published>2019-04-14T01:43:16.000Z</published>
    <updated>2019-04-14T14:54:41.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java注解-元数据"><a href="#Java注解-元数据" class="headerlink" title="Java注解 (元数据)"></a>Java注解 (元数据)</h2><h3 id="注解的概念及作用"><a href="#注解的概念及作用" class="headerlink" title="注解的概念及作用"></a>注解的概念及作用</h3><ul><li><p><em>从JDK1.5开始,Java支持在源文件中嵌入补充信息,这类信息被称为<code>注解(annotation)</code>.注解不会改变程序的动作,因此也就不会改变程序的语义,但是在开发和部署期间,各种工具可以使用这类信息,例如: 源代码生成器可以处理注解! 注: <code>如果没有注解信息处理流程(如:通过反射查询注解),则注解毫无意义 !</code></em></p></li><li><p><em>说明: 其实术语<code>元数据(metadata)</code>,但是<code>注解</code>这个名称更具有描述性并且更常用.</em></p></li></ul><h3 id="声明注解"><a href="#声明注解" class="headerlink" title="声明注解"></a>声明注解</h3><ul><li><em>注解是一种代码级别的说明.它与<code>类</code>,<code>接口</code>,<code>枚举</code>在同一个层次,它可以声明在<code>包</code>,<code>类</code>,<code>字段</code>,<code>方法</code>,<code>局部变量</code>,<code>方法参数</code>等的前面,用来对这些元素进行说明,注释..</em></li></ul><h3 id="注解的分类"><a href="#注解的分类" class="headerlink" title="注解的分类"></a>注解的分类</h3><ol><li>特殊的注解 : <code>标记注解</code>,<code>单成员注解</code>.</li><li><code>内置注解</code>.</li><li><code>类型注解</code>.</li><li><code>重复注解</code>.</li></ol><h3 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h3><h4 id="内置注解分类"><a href="#内置注解分类" class="headerlink" title="内置注解分类"></a>内置注解分类</h4><ol><li><em><code>java.lang.annotation</code>包下的注解分别是 : <code>@Retention</code>,<code>@Documnetd</code>,<code>@Target</code>,<code>@Inherited</code></em></li></ol><ul><li><em>以上四个注解被称为<code>元注解</code>,其作用是负责注解其它的注解,用来提供对其它<code>annotation</code>类型做说明.</em></li></ul><ol start="2"><li><em><code>java.lang</code>包下注解分别是 : <code>@Override</code>,<code>@Deprecated</code>,<code>@FunctionalInterface</code>,<code>@SafeVarargs</code>,<code>@SuppressWarnings</code></em></li></ol><ul><li><em>注意: <code>JDK8</code>在<code>java.lang.annotation</code>中添加了<code>Repeatable</code>和<code>Native</code>注解.其中<code>Repeatable</code>支持重复注解,<code>Native</code>用于注解本机代码可以访问的域变量.</em></li></ul><h4 id="内置注解-非元注解"><a href="#内置注解-非元注解" class="headerlink" title="内置注解 : 非元注解"></a>内置注解 : <code>非元注解</code></h4><ul><li><em><code>@SuppressWarnings</code>注解使用详解如下图所示</em><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/14/Java-annotation/SuppressWarnings.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><ol><li><p><em><code>@Override</code>,<code>@Deprecated</code>,<code>@SafeVarargs</code>,<code>SuppressWarnings</code>程序示例</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.annotation.built_in_annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Built_in_annotations</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 非元注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 9:36:20 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Built_in_annotations</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line"><span class="keyword">private</span> T[] args;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type safety: Potential heap pollution via varargs parameter args..</span></span><br><span class="line"><span class="comment">// @SafeVarargs: 为标记注解,只能用于方法和构造方法,指示没有发生与可变长度参数相关的不安全动作.</span></span><br><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Built_in_annotations</span><span class="params">(T... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.args = args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @SafeVarargs: 该注解只能用于varargs方法或者声明为static或final的构造方法.</span></span><br><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">safeVarargsTest</span><span class="params">(T... args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line">T t : args) &#123;</span><br><span class="line">System.out.println(args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Override: 用于确保超类方法被真正地重写,而不是简单地重载.</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Deprecated: 为标记注解,用于指示声明是过时的,并且已经被更新到的形式取代.</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deprecatedTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @SuppressWarnings: 用于抑制一个或多个编译器可能会报告的警告.使用以字符串形式表示的名称来指定要被抑制的警告.</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">supressWarningsTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line">ArrayList arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em><code>@FunctionalInterface</code>程序示例</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: functionalInterface</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: `学习<span class="doctag">@functionalInterface</span>注解`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 10:39:46 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//`Java8`为函数式接口引入了一个新注解`@FunctionalInterface`,其主要用于编译错误检查,</span></span><br><span class="line"><span class="comment">//加上该注释后当你写的接口不符合函数式定义时,编译器就会报错 !</span></span><br><span class="line"><span class="comment">//注意: 是否添加`@FunctionalInterface`对于接口是不是函数式接口没有影响,</span></span><br><span class="line"><span class="comment">//该注释只是提醒`编译器`去检查该接口是否仅仅包含一个抽象方法.</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">functionalInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意: 函数式接口中只能有一个抽象方法 !</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myLambda</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式接口里是可以包含默认方法,因为默认方法不是抽象方法,其有一个默认实现,</span></span><br><span class="line">    <span class="comment">//所以是符合函数式接口的定义的.</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// method body..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式接口里是可以包含静态方法,因为静态方法不能是抽象方法,是一个已经实现了的方法,</span></span><br><span class="line">    <span class="comment">//所以是符合函数式接口的定义的.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// method body..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式接口里是可以包含Object里的public方法,这些方法对于函数式接口来说,</span></span><br><span class="line"><span class="comment">// 不被当成是抽象方法(虽然它们是抽象方法).因为任何一个函数式接口的实现,默认都继承了Object类,</span></span><br><span class="line">    <span class="comment">//其包含了来自java.lang.Object里对这些抽象方法的实现!</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用`@FunctionalInterface`注解的函数式接口继而可以使用`Lambda`表示式来表示该接口的一个实现.</span></span><br><span class="line"><span class="comment">//(Java8 之前一般是使用匿名类实现的).</span></span><br><span class="line"><span class="comment">//functionalInterface  f = message-&gt;System.out.println();</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="内置注解-元注解"><a href="#内置注解-元注解" class="headerlink" title="内置注解 : 元注解"></a>内置注解 : <code>元注解</code></h4><ul><li><p><em>使用<code>@Target</code>,<code>@Retention</code>自定义注解</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyTarget_annotation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 11:12:54 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.LOCAL_VARIABLE,</span><br><span class="line">ElementType.CONSTRUCTOR &#125;)<span class="comment">//用于指定可以应用注解的声明类型,被设计为只能注解其它注解.</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)<span class="comment">//指定保留策略.</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTarget_annotation &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>; <span class="comment">//使用默认值</span></span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">String[] address() <span class="keyword">default</span> &#123; <span class="string">"null"</span> &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>使用自定义注解</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pers.huangyuhui.annotation.myannotation.MyTarget_annotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TargetTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 使用自定义注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 11:38:23 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MyTarget</span>_annotation(name = <span class="string">""</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于声明的注解类型包含 : `CONSTRUCTOR`, 所以可以在构造方法前使用.</span></span><br><span class="line"><span class="meta">@MyTarget</span>_annotation(name = <span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TargetTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于声明的注解类型包含 : `FIELD`, 所以可以在域变量前使用.</span></span><br><span class="line"><span class="meta">@MyTarget</span>_annotation(name = <span class="string">""</span>)</span><br><span class="line"><span class="keyword">private</span> String s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于声明的注解类型包含 : `METHOD`, 所以可以在方法前使用.</span></span><br><span class="line"><span class="meta">@MyTarget</span>_annotation(id = <span class="number">1</span>, name = <span class="string">"YUbuntu0109"</span>, address = <span class="string">"my address"</span>) <span class="comment">// 显式的定义注解值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于声明的注解类型包含 : `LOCAL_VARIABLE`, 所以可以在局部变量前使用.</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line"><span class="meta">@MyTarget</span>_annotation(name = <span class="string">""</span>)</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用反射获取注解"><a href="#使用反射获取注解" class="headerlink" title="使用反射获取注解"></a>使用反射获取注解</h3><ol><li>通过<code>反射</code>获取方法关联的注解</li></ol><ul><li><p><em>首先自定义一个注解</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.annotation.myannotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyAnnotation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义注解,用于通过反射获取注解信息的测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 5:52:05 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)<span class="comment">//指定保留策略</span></span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.METHOD, ElementType.TYPE &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "<span class="keyword">default</span> value"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>通过反射获取自定义注解信息</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.annotation.myannotation.MyAnnotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: getAnnotationInfo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 通过反射获取方法关联的注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 5:45:32 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getAnnotationInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation</span>(name = <span class="string">"Hello annotation !"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">double</span> d, String s)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">getAnnotationInfo getInfo = <span class="keyword">new</span> getAnnotationInfo();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Class对象</span></span><br><span class="line">Class&lt;?&gt; class1 = getInfo.getClass();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 通过调用Class泛型类提供的`getMethod`方法获取与方法相关的信息</span></span><br><span class="line">Method method = class1.getMethod(<span class="string">"fun"</span>, <span class="keyword">double</span>.class, String.class);</span><br><span class="line"><span class="comment">// 通过调用`getAnnotation`获取与对象相关联的特定注解</span></span><br><span class="line">MyAnnotation annotatioin = method.getAnnotation(MyAnnotation.class);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"id : "</span> + annotatioin.id() + <span class="string">"\nname : "</span> + annotatioin.name());</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException | SecurityException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id : <span class="number">1</span> </span><br><span class="line">name : Hello annotation !</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>通过<code>反射</code>获取所有注解</li></ol><ul><li><p><em>首先自定义一个注解</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.annotation.myannotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyAnnotation2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义注解,用于反射获取注解信息的测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 6:09:15 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation2 &#123;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">description</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>通过反射获取自定义<code>注解</code>信息</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.annotation.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.annotation.myannotation.MyAnnotation;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.annotation.myannotation.MyAnnotation2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: getAllAnnotationInfo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 通过反射机制获取所有注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 6:10:29 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation</span>()</span><br><span class="line"><span class="meta">@MyAnnotation</span>2(description = <span class="string">"Test class"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getAllAnnotationInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation</span>(id = <span class="number">1</span>, name = <span class="string">"Hello annotation !"</span>)</span><br><span class="line"><span class="meta">@MyAnnotation</span>2(description = <span class="string">"Test method"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException </span>&#123;</span><br><span class="line">getAllAnnotationInfo allAnnotationInfo = <span class="keyword">new</span> getAllAnnotationInfo();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过`getAnnoations`获取该类所有注解信息</span></span><br><span class="line">Annotation annotation[] = allAnnotationInfo.getClass().getAnnotations();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"`getAllAnnotationInfo`类的所有注解 : "</span>);</span><br><span class="line"><span class="keyword">for</span> (Annotation info : annotation) &#123;</span><br><span class="line">System.out.println(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">// 通过调用Class泛型类提供的`getMethod`方法获取与方法相关的信息</span></span><br><span class="line">Method method = allAnnotationInfo.getClass().getMethod(<span class="string">"fun"</span>);</span><br><span class="line"><span class="comment">// 通过调用`getAnnotation`获取与对象相关联的特定注解</span></span><br><span class="line">annotation = method.getAnnotations();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"方法`fun()`的所有注解 : "</span>);</span><br><span class="line"><span class="keyword">for</span> (Annotation info : annotation) &#123;</span><br><span class="line">System.out.println(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`getAllAnnotationInfo`类的所有注解 : </span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"default value"</span>, id=<span class="number">1</span>)</span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation2(description=<span class="string">"Test class"</span>)</span><br><span class="line"></span><br><span class="line">方法`fun()`的所有注解 : </span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"Hello annotation !"</span>, id=<span class="number">1</span>)</span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation2(description=<span class="string">"Test method"</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="标记注解"><a href="#标记注解" class="headerlink" title="标记注解"></a>标记注解</h3><ul><li><p><em>编写示例程序来判断<code>标记注解</code>是否存在</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TagTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 标记注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 6:57:26 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> MyMarker_annotation &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarketTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyMarker</span>_annotation</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MarketTest marketTest = <span class="keyword">new</span> MarketTest();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过调用Class泛型类提供的`getMethod`方法获取与该方法相关的信息</span></span><br><span class="line">Method method = marketTest.getClass().getMethod(<span class="string">"fun"</span>);</span><br><span class="line"><span class="comment">// 通过使用`AnnotatedElement`接口的`isAnnotationPresent`方法来确定自定义注解中是否存在`标记注解`</span></span><br><span class="line"><span class="keyword">if</span> (method.isAnnotationPresent(MyMarker_annotation.class)) &#123;</span><br><span class="line">System.out.println(<span class="string">"存在标记注解 !"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.err.println(<span class="string">"Method not found !"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">fun();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">存在标记注解 !</span><br></pre></td></tr></table></figure></li><li><p><em><code>说明</code> : 因为<code>标记注解没有成员</code>,所以应用标记注解时,后面不需要有圆括号.如果提供空的圆括号,也不会报错,但不是必需的.类似地,对于所有成员都使用<code>默认值(default)</code>的注解也可以没有圆括号.</em></p></li></ul><h3 id="重复注解"><a href="#重复注解" class="headerlink" title="重复注解"></a>重复注解</h3><ul><li><p><em>要创建<code>重复注解</code>,必须创建<code>容器注解</code></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.annotation.myannotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyReapeatable_annotation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: `重复注解`的容器注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 8:08:21 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyReapeatable_annotation &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `value`成员指定的是重复注解类型的数组</span></span><br><span class="line">MyAnnotation[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>创建<code>重复注解</code></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.annotation.myannotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyAnnotation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 重复注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 5:52:05 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指定`@Repeatable`注解的`value`成员值为容器注解 : `MyReapeatable_annotation`</span></span><br><span class="line"><span class="meta">@Repeatable</span>(MyReapeatable_annotation.class)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "<span class="keyword">default</span> value"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>通过反射获取<code>重复注解</code>信息</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.annotation.myannotation_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.annotation.myannotation.MyAnnotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: RepeatTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 通过反射获取`重复注解`的信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 7:58:54 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepeatTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="meta">@MyAnnotation</span>(id=<span class="number">2</span>)</span><br><span class="line"><span class="meta">@MyAnnotation</span>(id=<span class="number">3</span>,name=<span class="string">"YUbuntu0109"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">RepeatTest repeatTest = <span class="keyword">new</span> RepeatTest();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Class对象</span></span><br><span class="line">Class&lt;?&gt; class1 = repeatTest.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过调用Class泛型类提供的`getMethod`方法获取与该方法相关的信息</span></span><br><span class="line">Method method = class1.getMethod(<span class="string">"testMethod"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// `getAnnotation`用于获取与指定对象关联的特定注解</span></span><br><span class="line"><span class="comment">// Annotation annotation = method.getAnnotation(MyReapeatable_annotation.class);</span></span><br><span class="line"><span class="comment">// System.out.println(annotation);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用`getAnnotationsByType`来获取`MyAnnotation`重复注解</span></span><br><span class="line">Annotation[] annotations = method.getAnnotationsByType(MyAnnotation.class);</span><br><span class="line"><span class="keyword">for</span> (Annotation info : annotations) &#123;</span><br><span class="line">System.out.println(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">System.err.println(<span class="string">"Error : Method not found !"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">testMethod();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//程序运行结果 :</span></span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyReapeatable_annotation(value=&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"default value"</span>, id=<span class="number">1</span>), </span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"default value"</span>, id=<span class="number">2</span>), </span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"YUbuntu0109"</span>, id=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//程序运行结果(使用`getAnnotationsByType`来获取`MyAnnotation`重复注解) : </span></span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"default value"</span>, id=<span class="number">1</span>)</span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"default value"</span>, id=<span class="number">2</span>)</span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"YUbuntu0109"</span>, id=<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java注解-元数据&quot;&gt;&lt;a href=&quot;#Java注解-元数据&quot; class=&quot;headerlink&quot; title=&quot;Java注解 (元数据)&quot;&gt;&lt;/a&gt;Java注解 (元数据)&lt;/h2&gt;&lt;h3 id=&quot;注解的概念及作用&quot;&gt;&lt;a href=&quot;#注解的概念及作用&quot;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
