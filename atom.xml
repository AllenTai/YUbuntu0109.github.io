<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎参观小灰灰的网站哟 ヾ(◍°∇°◍)ﾉﾞ ~</title>
  
  <subtitle>My Personal blog website —— be founded on March 9, 2019</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-17T15:22:04.689Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>黄宇辉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VOA:Napping May Improve Learning,Memory</title>
    <link href="http://yoursite.com/2019/04/17/VOA-Napping-May-Improve-Learning-Memory/"/>
    <id>http://yoursite.com/2019/04/17/VOA-Napping-May-Improve-Learning-Memory/</id>
    <published>2019-04-17T00:44:57.000Z</published>
    <updated>2019-04-17T15:22:04.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VOA-午休对学习记忆有益"><a href="#VOA-午休对学习记忆有益" class="headerlink" title="VOA : 午休对学习记忆有益"></a>VOA : 午休对学习记忆有益</h2><p><em>From VOA Learning English,this is the Health &amp; Lifestyle Report.</em></p><ul><li><em>这里是美国之音慢速英语健康和生活报道.</em></li></ul><p><em>March 16 is International Sleep Day.</em></p><ul><li><em>3月16日是国际睡眠日.</em></li></ul><p><em>And we should all celebrate the act of sleeping. Studies have shown that a good night’s rest helps us stay healthy,both <code>mentally</code> and physically. And researchers say sleep is probably the best tool we have for memeory and learning.</em></p><ul><li><em>我们大家都应该庆祝睡眠这一行为.研究表明,晚上睡得好有益身心健康,研究人员说睡眠对记忆与学习来说也许是最佳的工具.</em></li></ul><p><em>Michael Twery is director of National Center on Sleep Disorders Research at Americal’s National <code>Institutes</code> of Health.Twery is an expert on the sicence of sleep and sleep <code>disorders</code>. He told me that a good night’s sleep helps to lean better.</em></p><ul><li><em>迈克尔·特维里是美国国立卫生研究院睡眠絮乱研究中心的负责人,他是睡眠与睡眠障碍科学方面的专家,他跟我说晚间好的睡眠有助于学习.</em></li></ul><p><em>Getting a good night’s sleep is important for the learning and memory process. It’s important because it stores the training exercises and the learning exercises into our more <code>permanent</code> memory while we’re sleeping 7-8 hours in bed. And then the next morning when you wake up,your mind is better prepared to act on that information.</em></p><ul><li><em>睡个好觉对于学习和记忆来说很重要,睡眠能够更加长久地存储我们的训练与学习信息,因为当我们睡七八个小时的时候,第二天早上起来时,你的大脑可以更好地准备处理那些信息.</em></li></ul><p><em>But what about getting durig the middle of the day? Short <code>periods</code> of sleep my help our brains work better,or so says a recent study on mapping.</em></p><ul><li><em>不过在中午休息会如何? 最近,一项关于睡眠的调查表明,短时间睡眠有助于大脑的运转.</em></li></ul><p><em>Past studies have shown that mapping can help babies and young children learn better And napping can help brain performance in older adults.</em></p><ul><li><em>以前的研究表明,宝宝和儿童午休有助于学习.对于年纪稍长的成年人来说,午休能够让大脑更好地运转.</em></li></ul><p><em>Taking a nap may also help this group of people <code>fight off</code> <code>age-related</code> memory loss.</em></p><ul><li><em>午休也许能够帮助这些年轻人应对因年龄增长带来的记忆衰退.</em></li></ul><p><em>Many Americans do nap. But one-third of all adult in the United States are also <code>chronically</code> tired,notes the U.S. Centers for Disease Control and Prevention(<code>CDC</code>). It found that 50 million to 70 million Americans have <code>chronic</code> sleep disorders.</em></p><ul><li><em>许多美国人都有午休的习惯.不过,美国疾病控制和预防中心指出,三分之一的美国成年人都有慢性疲劳,有5000万到7000万的美国人患有慢性睡眠絮乱症.</em></li></ul><p><em>So,someone who naps as a way of paying off a sleep debt may not experience the same improvements from mapping as a healthy,<code>well-rested</code> person would.</em></p><ul><li><em>所以,同样是午休,缺乏睡眠的人与睡眠充足的健康人士相比,效果没有那么好.</em></li></ul><p><em>Also,many people may not want to admit that they take naps. They may think that napping shows they are weak or lack energy. They only children,the very old,sick or lazy people nap is not an uncommon opinion.</em></p><ul><li><em>很多人也不想承认他们有午休的习惯.他们也许认为午休说明自己身体很弱,没有精力.人们普遍认为,只有小孩,老人,多病的人和懒人才会午休.</em></li></ul><p><em>In fact,we Americans somethimes do a very strange thing. Some <code>brag</code> about how few hours of sleep they need each night.</em></p><ul><li><em>事实上,美国人有时候会做一件非常奇怪的事,有人会吹嘘自己一晚休息的时间是如果如何得少.</em></li></ul><p><em>Health <code>experts</code> suggest that adults get seven to eight hours of sleep each night. People who claim they only sleep four or five hours a night,they may think thery are somehow stronger than the average human -  superhuman,if you will.</em></p><ul><li><em>健康专家建议成年人一晚睡七到八个小时.那些说自己一晚只睡四五个小时的人,他们自认为比常人更加强壮——或者说是超人.</em></li></ul><p><em>However,that may be changing. Many offices now offer napping rooms and napping cafes are appearning in many U.S. cities,including Washington,D.C.</em></p><ul><li><em>然而,情况不同的.美国城市许多办公室都在提供午休的房间和休息咖啡室,包括华盛顿地区.</em></li></ul><p><em>While resting in the middle of the work day may seem like a <code>luxury</code> to Americans,napping is very much part of normal,everyday life in other parts of the world.</em></p><ul><li><em>工作日午睡对于美国人来说也许很奢侈,但是对于全世界上其它国家与地区来说,午睡是日常生活的一部分.</em></li></ul><p><em>Take China,for example: While it depends on the age and job,China,generally speaking,is a land of nappers.</em></p><ul><li><em>就拿中国来说吧,午睡因年龄和职业而异,中国可以说是一个”午睡之国”.</em></li></ul><p><em>So,researchers receently looked at information provided by nearly 3000 Chinese adults,aged 65 year or older. They wanted to learn if napping after a <code>min-day</code> meal,a tradition in many areas,had any effect on the <code>mental</code> performance of the subjects.</em></p><ul><li><em>所以,近期研究人员查阅了由3000名65岁及以上的中国人所提供的信息.他们想知道午餐(许多地区的传统)是否会对身体有影响.</em></li></ul><p><em>First,the researchers asked the people if they napped and for how long. Then based on their answers,researchers put them into four groups: non-nappers(0 minutes),short nappers(less than 30 minutes),moderate nappers(30-90 minutes),and <code>extended</code> nappers(more than 90 minutes).</em></p><ul><li><em>首先,研究人员问这些参与调查的人是否会午睡?睡多久?然后,根据他们的回答,把他们分为四组:不午睡的人,睡很短时间的人(少于30分钟),睡眠时间适中的人(30-90分钟),睡时间很长的人(超过90分钟).</em></li></ul><p><em>Nearly 60 percent of those 3,000 people said they did take a nap after lunch and that their naps lasted anywhere from 30 to 90 minutes. Most of the subjects who said they napped said said they napped from about an hour.</em></p><ul><li><em>在这3000人当中,近60%说自己午饭之后会午休30到90分钟.大多数会午睡的人一般都睡一个小时左右.</em></li></ul><p><em>The study found that people who took an hour-long map did much better on mental tests than those who did not nap. The hour-long nappers also did better on the test than those who napped for shorter and longer periods. In this study,it seems that the most effective nap lasted for about an hour,but not much longer.</em></p><ul><li><em>研究发现,午休一个小时的体能检验结果比不午休的人好.睡一个小时的人比午休时间短于一小时或长于一小时的人测验结果更好.在这次研究中,似乎最佳睡眠时长是一个小时左右,但别睡太长时间.</em></li></ul><p><em>These researchers reported their findings in Journal of the American Geriatrics Society.</em></p><ul><li><em>这些研究人员在《美国老年学会杂志》上发布了他们的研究成果.</em></li></ul><p><em>Keep in mind,however,that these are the findings for those over the age of 65.</em></p><ul><li><em>不过,要记住,这些研究成果是针对年龄在65岁以上的人.</em></li></ul><p><em>Yet Doctor Michael Twery notes that an hour long nap may be to long for young.healthy adults.”Currently,we’re recommending that we try to sleep for about 30 minutes or less. And 30 minutes is enough to remove the pressure to sleep and will help us feel more awake. If we nap longer,we will get trapped into those deeper layers of sleep,which can ben hard to get out of.”</em></p><ul><li><em>不过迈克尔·特维里博士指出,对于身体健康的年轻人来说,午休一个小时或许太长了,”目前,我们建议大家睡30分钟或者更短,30分钟足够缓解睡眠压力,也会让我们更清醒.如果我们睡更长,会陷入深度睡眠,这样就很难醒过来了.”</em></li></ul><p><em>The feeling Twery described is called sleep <code>inertia</code>——the period when you awake from a very deep sleep. For a time.you are unable to think clearly.</em></p><ul><li><em>特维里把这种感觉称为睡眠惯性——从深度睡眠中醒过来的那段时间.短时间之内,你无法清楚地思考.</em></li></ul><p><em>So sleep inertia is when someone is being awakened from deep sleep,Some <code>individuals</code> may find it hard to change instantly from that deep sleep——where everything is a bit <code>foggy</code> and <code>confused to</code> the fully awake state. We may be little bit <code>clumsy</code>. We may not have all our thoughts in order when we wake from deep sleep.</em></p><ul><li><em>所以睡眠惯性就是人们从深度睡眠中醒过来,有些人会发现很难从深度睡眠中马上改变过来.或许我们有一点笨拙,从深度睡眠中醒过时来我们的思维并不是很清楚.</em></li></ul><p><em>The National Sleep Foundation also warns that if you have trouble falling asleep at night,limit your daytime nap to under 45 minutes. Also nap before 3 p.m. in the afternoon.</em></p><ul><li><em>美国国家睡眠基金会警告称,如果晚上很难入眠,白天睡觉的时间要控制在45分钟之内,并且在下午三点之前进行午休.</em></li></ul><p><em>And that’s the Health &amp; Lifestyle report. I’m Anna Matteo.</em></p><ul><li><em>以上就是今天的健康和生活报道,我是安娜·马泰奥.</em></li></ul><h3 id="重点词汇"><a href="#重点词汇" class="headerlink" title="重点词汇"></a>重点词汇</h3><ol><li>luxury           <code>(n)</code>           奢侈品.</li><li>institute        <code>(n)</code>           学会,协会,学院.</li><li>disorder         <code>(n)</code>           混乱,骚乱.</li><li>expert           <code>(n)</code>           专家,行家,能手</li><li>period           <code>(n)</code>           周期,期间.</li><li>inertia          <code>(n)</code>           惯性,惰性,迟钝.</li><li>individual       <code>(n)</code>           个人,个体.</li><li>nap              <code>(n/v)</code>         午休.</li><li>brag             <code>(v)</code>           吹嘘.</li><li>permanent       <code>(a)</code>           永久的,永恒的,不变的.</li><li>foggy           <code>(a)</code>           有雾的,模糊的,朦胧的.</li><li>mental          <code>(a)</code>           精神的,脑力的,疯的.</li><li>extended        <code>(a)</code>           延伸的,扩大的,长期的.</li><li>clumsy          <code>(a)</code>           笨拙的.</li><li>chronic         <code>(a)</code>           慢性的.</li><li>lazy            <code>(a)</code>           懒的.</li><li>mentally        <code>(ad)</code>          精神上,智力上,心理上.</li><li>chronically     <code>(ad)</code>          长期地,慢性地,习惯性地.</li><li>age-relate                      年龄相关,与年龄相关.</li><li>well-rested                     休息充分的.</li></ol><h3 id="重点短语"><a href="#重点短语" class="headerlink" title="重点短语"></a>重点短语</h3><ol><li>fight off : 击退,排斥,竭力避免.</li><li>be confused to : 迷惑,被混淆了.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;VOA-午休对学习记忆有益&quot;&gt;&lt;a href=&quot;#VOA-午休对学习记忆有益&quot; class=&quot;headerlink&quot; title=&quot;VOA : 午休对学习记忆有益&quot;&gt;&lt;/a&gt;VOA : 午休对学习记忆有益&lt;/h2&gt;&lt;p&gt;&lt;em&gt;From VOA Learning 
      
    
    </summary>
    
    
      <category term="VOA" scheme="http://yoursite.com/tags/VOA/"/>
    
  </entry>
  
  <entry>
    <title>一款瞄准大学生的交友软件:TinderU</title>
    <link href="http://yoursite.com/2019/04/16/%E4%B8%80%E6%AC%BE%E7%9E%84%E5%87%86%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%9A%84%E4%BA%A4%E5%8F%8B%E8%BD%AF%E4%BB%B6-TinderU/"/>
    <id>http://yoursite.com/2019/04/16/一款瞄准大学生的交友软件-TinderU/</id>
    <published>2019-04-16T00:50:23.000Z</published>
    <updated>2019-04-16T11:11:40.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TinderU-App-Amins-to-Help-College-Student-Find-Frends-Partner-——-August-26-2018"><a href="#TinderU-App-Amins-to-Help-College-Student-Find-Frends-Partner-——-August-26-2018" class="headerlink" title="TinderU App Amins to Help College Student Find Frends,Partner —— August 26, 2018"></a><code>TinderU</code> App Amins to Help College Student Find Frends,Partner —— August 26, 2018</h2><p><em>It is back-to-school season in the United States,Mang youg adults <code>are headed to</code> colloges and universities.</em></p><ul><li><em>有又到了美国开学季.不少年轻人就要踏进大学校园.</em></li></ul><p><em>A new app might make their social lives as busy as their academic schedules.</em></p><ul><li><em>一款新应用可能会让他们的社交生活和学业日程一样繁忙.</em></li></ul><p><em>The popular dating app <code>Tinder</code> has just launched <code>TinderU</code>.The tool is designed to help students find friends,study partners and, possibly, love.</em></p><ul><li><em>热门约会应用<code>Tinder</code>刚刚推出了<code>TinderU</code>.该工具旨在帮助学生找出友谊,学习伙伴,还有爱情哟 ~(怎么感觉我好需要呀..)</em></li></ul><p><em>On <code>TinderU</code>,users can look at pictures and information about other students at their university and other schools nearby.Just like on Tinder,if you see somebody you think you might like,you swipe right to “match” with that person,If you are not interested,you swipe left to pass.</em></p><ul><li><em>在<code>TinderU</code>上,用户可以看到本科生及周边学校学生的照片和信息.如同<code>Tinder</code>一样,如果你看到了自己可能感兴趣的人,就可以在屏幕上右滑,和对方”配对”.如果你不感兴趣就向左滑.</em></li></ul><p><em>Only college students attending four-year schools can use <code>TinderU</code>.Online and <code>for-profit</code> colleges and universities are not included at this time,All that <code>TinderU</code> requires of users is a .edu email address.</em></p><ul><li><em>目前,只有就读于四年制大学的在校学生才可以使用<code>TinderU</code>,在线和盈利性学院的学生不包含在内.<code>TinderU</code>仅需要用户提供一个<code>.edu</code>邮箱地址就可以啦.</em></li></ul><p><em><code>Tinder</code> launched in 2012 in Los Angeles,California. It’s widely used around the world.The app is especially popular among people aged 18 to 34.</em></p><ul><li><em><code>Tinder</code>于2012年在加州洛杉矶推出,此后,在全世界得到了广泛应用.这款软件在18岁到34岁的人群中特别流行.</em></li></ul><p><em>Some people argue <code>TinderU</code> will destroy traditional socializing on college campuses.And they say student don’t need the app because they meet other students face-to-face each day.</em></p><ul><li><em>一些人认为<code>TinderU</code>会破坏大学校园里的传统社交活动.他们认为学生们不需要这个应用程序,因为他们每天都要和其他学生面对面.</em></li></ul><p><em>But the experience of starting college can be overwhelming for some.Mang students become independent for the first time in th their lives when they go to college.They often do not know a single person in that new environment.<code>Tinder</code> supporters say the app can help users find <code>like-minded</code> people to talk and, maybe, ask out on a date.</em></p><ul><li><em>然而,上大学的经历对一些人来说可能是难以承受的.因为对于许多学生而言,人生的第一次独立是从踏进学生生活的那一刻开始的.在那种新环境中,他们往往一个人也不认识.<code>Tinder</code>的支持者说:,这款应用可以帮助用户找到志同道合的朋友,他们可以一起聊天,还可以出去约会.</em></li></ul><p><em>The <code>Tinder</code> website says <code>Tinder</code> is in 190 countries,It averages 1.6 billion matches a day and reponsible for one million dates each week.</em></p><p><em>I’m Caty Weaver.</em></p><h3 id="重点词汇"><a href="#重点词汇" class="headerlink" title="重点词汇"></a>重点词汇</h3><ol><li>schedule       <code>(n)</code>       时间表.</li><li>swipe          <code>(v)</code>       滑动屏幕.</li><li>match          <code>(v)</code>       匹配.</li><li>argue          <code>(v)</code>       辩论,争论.证明,说服.</li><li>overwhelming   <code>(adj)</code>     压倒性的.</li><li>for-profit     <code>(adj)</code>     以盈利为目的,营利性,经营性 .       <code>(n)</code>   营利性的机构</li><li>like-minded    <code>(adj)</code>     志趣相投的,具有相似意向或目的.</li></ol><h3 id="重点短语"><a href="#重点短语" class="headerlink" title="重点短语"></a>重点短语</h3><ol><li>be headed to : 前往.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TinderU-App-Amins-to-Help-College-Student-Find-Frends-Partner-——-August-26-2018&quot;&gt;&lt;a href=&quot;#TinderU-App-Amins-to-Help-College-Student
      
    
    </summary>
    
    
      <category term="VOA" scheme="http://yoursite.com/tags/VOA/"/>
    
  </entry>
  
  <entry>
    <title>Naming Notations</title>
    <link href="http://yoursite.com/2019/04/15/Naming-Notations/"/>
    <id>http://yoursite.com/2019/04/15/Naming-Notations/</id>
    <published>2019-04-15T08:13:07.000Z</published>
    <updated>2019-04-15T08:56:48.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-命名规范"><a href="#Java-命名规范" class="headerlink" title="Java 命名规范"></a>Java 命名规范</h2><h3 id="Java总体命名规范"><a href="#Java总体命名规范" class="headerlink" title="Java总体命名规范"></a>Java总体命名规范</h3><ol><li><code>项目名</code>全部小写.</li><li><code>包名</code>全部小写.</li><li><code>类名</code>首字母大写,其余组成词首字母依次大写.</li><li>变量名,方法名首字母小写,如果名称由多个单词组成,除首字母外的每个单词的首字母都要大写.</li><li><code>常量名</code>全部大写.</li><li>所有命名规则必须遵循以下规则 :</li></ol><ul><li>名称只能由字母、数字、下划线、$符号组成.</li><li>不能以<code>数字</code>开头.</li><li>名称不能使用Java中的<code>关键字</code>.</li><li>坚决不允许出现中文及拼音命名.</li></ul><h3 id="Java包名命名规范"><a href="#Java包名命名规范" class="headerlink" title="Java包名命名规范"></a>Java包名命名规范</h3><ul><li><em>Java的包名由<code>小写单词</code>组成,包的路径符合所开发的<code>系统模块</code>的定义,以便通过包名可得知其属于哪个模块,从而方便到对应包里找相应的实现类.</em></li></ul><h4 id="常规包名"><a href="#常规包名" class="headerlink" title="常规包名"></a>常规包名</h4><p><em>为了保障每个<code>Java Package</code>命名的唯一性,在Java编程规范中要求开发人员在自己定义的包名前加上唯一的前缀.由于互联网上的<code>域名称</code>是不会重复的,所以多数开发人员采用自己公司在互联网上的域名称作为自己程序包的唯一前缀.例如 : <code>com.sun.swt..</code>.</em></p><ol><li>公司项目</li></ol><ul><li><em>com : 公司项目,<code>copyright</code>由项目发起的公司所有.</em></li><li><em>包名 : <code>com.公司名.项目名.模块名..</code></em></li></ul><ol start="2"><li>团队项目</li></ol><ul><li><em>team : 团队项目,指由团队发起,并由该团队开发的项目,<code>copyright</code>属于该团队所有.</em></li><li><em>包名 : <code>team.团队名.项目名.模块名..</code></em></li></ul><h4 id="自定义包名"><a href="#自定义包名" class="headerlink" title="自定义包名"></a>自定义包名</h4><p><em>一般公司命名为<code>com.公司名.项目名.模块名....</code>那我们个人的项目又怎么命名呢?</em></p><p><em><code>个人的</code>英语单词有<code>individual</code>、<code>personal</code>、<code>private</code>、<code>one-man</code>,进一步对以上四个单词<code>词意</code>进行分析并在保证了<code>唯一性</code>,继而使用每个单词的前4个字母作为<code>前缀</code>,与<code>com</code>也做了区分.示例如下所示:</em></p><ol><li>indi : 个体项目,指个人发起,但非自己独自完成的项目,可公开或私有项目,<code>copyright</code>主要属于发起者.</li></ol><ul><li><em>包名 : <code>indi.发起者名.项目名.模块名..</code></em></li></ul><ol start="2"><li>pers : 个人项目,指个人发起,独自完成,可分享的项目,<code>copyright</code>主要属于个人.</li></ol><ul><li><em>包名 : <code>pers.个人名.项目名.模块名..</code></em></li></ul><ol start="3"><li>priv : 私有项目,指个人发起,独自完成,非公开的私人使用的项目,<code>copyright</code>属于个人.</li></ol><ul><li><em>包名 : <code>priv.个人名.项目名.模块名..</code></em></li></ul><ol start="4"><li>onem : 与<code>indi</code>相同，推荐使用<code>indi</code>.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-命名规范&quot;&gt;&lt;a href=&quot;#Java-命名规范&quot; class=&quot;headerlink&quot; title=&quot;Java 命名规范&quot;&gt;&lt;/a&gt;Java 命名规范&lt;/h2&gt;&lt;h3 id=&quot;Java总体命名规范&quot;&gt;&lt;a href=&quot;#Java总体命名规范&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java reflection</title>
    <link href="http://yoursite.com/2019/04/15/Java-reflection/"/>
    <id>http://yoursite.com/2019/04/15/Java-reflection/</id>
    <published>2019-04-15T00:39:07.000Z</published>
    <updated>2019-04-19T02:16:02.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java Reflection"></a>Java Reflection</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><em><code>Reflection(反射)</code>是被认为<code>动态语言</code>的关键,反射机制允许程序在执行期间借助于<code>Reflection API</code>取得任何类的内部信息,并能直接操作任意对象的内部属性及方法.</em>  </p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p><em>动态代理</em></p><h3 id="反射机制提供的功能"><a href="#反射机制提供的功能" class="headerlink" title="反射机制提供的功能"></a>反射机制提供的功能</h3><ol><li>在运行时判断任意一个对象所属的类.</li><li>在运行时构造人任意一个类的对象.</li><li>在运行时判断任意一个类所具有的成员变量和方法.</li><li>在运行时调用任意一个对象的成员变量和方法.</li><li>生成<code>动态代理</code>(体现<code>动态语言</code>的特性).</li></ol><h4 id="反射相关的主要API"><a href="#反射相关的主要API" class="headerlink" title="反射相关的主要API"></a>反射相关的主要<code>API</code></h4><ul><li><em>java.lang.Class : 代表一个类.</em></li><li><em>java.lang.reflect.Method : 代表类的方法.</em></li><li><em>java.lang.reflect.Field : 代表类的成员变量.</em></li><li><em>java.lang.reflect.Constructor : 代表类的构造方法.</em></li><li><em>…</em></li></ul><h4 id="反射的简单应用示例"><a href="#反射的简单应用示例" class="headerlink" title="反射的简单应用示例"></a>反射的简单应用示例</h4><ol><li><p><em>首先创建一个存储用户信息的类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: UserInfo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 15, 2019 9:03:40 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserInfo</span><span class="params">(String name, String sex, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"UserInfo [name="</span> + name + <span class="string">", sex="</span> + sex + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showClassInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"ClassInfo: Store the user information ."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">System.out.println(s + <span class="string">"  my name is: "</span> + name + <span class="string">"  age: "</span> + age + <span class="string">"  sex: "</span> + sex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>其次利用<code>反射</code>获取该类中的信息</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.bean.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Ignore;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.reflection.bean.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: UserInfoTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 用`反射`获取`UserInfo`类中信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 15, 2019 9:10:08 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUseInfoByReflection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用反射 : 创建`UserInfo`类对象,并调用其中的属性及方法</span></span><br><span class="line"><span class="comment">// @Test</span></span><br><span class="line"><span class="meta">@Ignore</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commonTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">userInfo.setName(<span class="string">"Java reflection"</span>);</span><br><span class="line">userInfo.setAge(<span class="number">1</span>);</span><br><span class="line">userInfo.setSex(<span class="string">"Male"</span>);</span><br><span class="line">userInfo.showClassInfo();</span><br><span class="line">userInfo.introduce(<span class="string">"Hello !"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用反射: 创建`UserInfo`类对象,并调用其中的属性及方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reflectionTest</span><span class="params">()</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, NoSuchFieldException,</span></span><br><span class="line"><span class="function">SecurityException, NoSuchMethodException, IllegalArgumentException, InvocationTargetException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下述两行代码体现了: `UserInfo userInfo = new UserInfo();`的工作</span></span><br><span class="line">Class&lt;UserInfo&gt; class1 = UserInfo.class;</span><br><span class="line"><span class="comment">// 创建运行时类`UserInfo`类的对象</span></span><br><span class="line">UserInfo userInfo = class1.newInstance();</span><br><span class="line"></span><br><span class="line">System.out.println(userInfo);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通过`getField`调用别`public`修饰的`name`属性并为其赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">java.lang.reflect.Field fieldName = class1.getField(<span class="string">"name"</span>);<span class="comment">// `name`被`public`修饰,否则抛出: NoSuchFieldException</span></span><br><span class="line">fieldName.set(userInfo, <span class="string">"Java reflection"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(userInfo);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通过`getField`调用被`private`修饰的`age,sex`属性并为其赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Field fieldAge = class1.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">Field fieldSex = class1.getDeclaredField(<span class="string">"sex"</span>);</span><br><span class="line"><span class="comment">// 将此对象的 accessible 标志设置为指示的布尔值.值为 true 则指示反射的对象在使用时应该取消 Java 语言访问检查.</span></span><br><span class="line"><span class="comment">// 值为 false 则指示反射的对象应该实施 Java 语言访问检查.实际上setAccessible是启用和禁用访问安全检查的开关,</span></span><br><span class="line"><span class="comment">// 并不是为true就能访问为false就不能访问 ! false时使用对象会抛出 : IllegalAccessException .</span></span><br><span class="line"><span class="comment">// 由于JDK的安全检查耗时较多,所以通过`setAccessible(true)`的方式关闭安全检查就可以达到提升反射速度的目的 .</span></span><br><span class="line">fieldAge.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">fieldSex.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">fieldAge.set(userInfo, <span class="number">2</span>);</span><br><span class="line">fieldSex.set(userInfo, <span class="string">"male"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(userInfo);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通过``调用对象指定的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">java.lang.reflect.Method method = class1.getMethod(<span class="string">"showClassInfo"</span>);</span><br><span class="line"><span class="comment">// return: the result of dispatching the method represented bythis object on obj</span></span><br><span class="line"><span class="comment">// with parameters args.</span></span><br><span class="line">method.invoke(userInfo);</span><br><span class="line">Method method2 = class1.getMethod(<span class="string">"introduce"</span>, String.class);</span><br><span class="line">method2.invoke(userInfo, <span class="string">"Hello !"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UserInfo [name=<span class="keyword">null</span>, sex=<span class="keyword">null</span>, age=<span class="number">0</span>]</span><br><span class="line">UserInfo [name=Java reflection, sex=<span class="keyword">null</span>, age=<span class="number">0</span>]</span><br><span class="line">UserInfo [name=Java reflection, sex=male, age=<span class="number">2</span>]</span><br><span class="line">ClassInfo: Store the user information .</span><br><span class="line">Hello !  my name is: Java reflection  age: <span class="number">2</span>  sex: male</span><br></pre></td></tr></table></figure></li></ol><h3 id="详解反射的源头-Class"><a href="#详解反射的源头-Class" class="headerlink" title="详解反射的源头 : Class"></a>详解反射的源头 : <code>Class</code></h3><p><em>在<code>Object</code>类中定义了以下的方法,此方法被所有子类继承 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure></p><p><em>该返回值的类型是一个<code>Class</code>类,此类是<code>Java反射</code>的源头,实际上所谓的反射从程序的运行结果来看也也很理解,既: <code>可以通过对象反射求出类的名称.</code></em></p><ul><li><em>正常方式 : 引入需要的<code>包类</code>名称 ——&gt; 通过<code>new</code>实例化 ——&gt; 取得实例化对象</em></li><li><em>反射方式 : 实例化对象 ——&gt; <code>getClass()</code> ——&gt; 得到完整的<code>包类</code>名称</em></li></ul><h4 id="getClass-的使用"><a href="#getClass-的使用" class="headerlink" title="getClass()的使用"></a><code>getClass()</code>的使用</h4><ol><li><p><em>示例程序如下</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.bean.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.reflection.bean.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestUserInfoByReflection2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 学习反射源头: `Class`类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 15, 2019 11:58:34 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUserInfoByReflection2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getClassTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line"><span class="comment">// getClass() return: The Class object that represents the runtimeclass of this object.</span></span><br><span class="line"><span class="comment">// 通过`运行时类`的对象,调用其`getClass()`返回其运行时类</span></span><br><span class="line">Class&lt;?&gt; class1 = userInfo.getClass();</span><br><span class="line">System.out.println(class1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pers</span>.<span class="title">huangyuhui</span>.<span class="title">reflection</span>.<span class="title">bean</span>.<span class="title">UserInfo</span> //`运行时`类</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><em><code>运行时类</code> : example.java ——<code>编译器(javac.exe)</code>——&gt; example.class ——<code>JVM类加载器</code>——&gt; example.class被加载到内存(此时<code>example.class</code>就是一个<code>运行时类</code>,存放在<code>缓存区</code>,且运行时类本身就是一个<code>Class</code>实例并只加载一次 !)</em></li></ul><h4 id="获取Class类的实例的四种方式"><a href="#获取Class类的实例的四种方式" class="headerlink" title="获取Class类的实例的四种方式"></a>获取<code>Class</code>类的实例的四种方式</h4><p><em>获取<code>Class</code>类的实例后我们可以进行如下的操作:</em></p><ol><li>创建对应的运行时类的对象.</li><li>调用对应的运行时类的完整结构( 属性,方法,构造器 ).</li><li>获取对应的运行时类的完整结构( 属性,方法,构造器,父类,所在的包,异常,注解… ).</li></ol><p><em>获取<code>Class</code>类实例的四种方式的示例程序如下</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.bean.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.reflection.bean.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: GetClassObj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 获取`Class`类实例的四种方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 15, 2019 12:34:21 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetClassObj</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Test</span></span><br><span class="line"><span class="comment">// 第一种方式: 通过调用运行时类本身的`.class`属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstWayTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Class&lt;UserInfo&gt; class1 = UserInfo.class;</span><br><span class="line">Class&lt;String&gt; class2 = String.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the result: class pers.huangyuhui.reflection.bean.UserInfo</span></span><br><span class="line">System.out.println(class1);</span><br><span class="line"><span class="comment">// the result: class java.lang.String</span></span><br><span class="line">System.out.println(class2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Test</span></span><br><span class="line"><span class="comment">// 第二种方式: 通过`运行时类`的对象获取</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">secondWayTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">Class&lt;? extends UserInfo&gt; class1 = userInfo.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// getName() return: the name of the class or interfacerepresented by this object.</span></span><br><span class="line"><span class="comment">// the result: pers.huangyuhui.reflection.bean.UserInfo</span></span><br><span class="line">System.out.println(class1.getName());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Test</span></span><br><span class="line"><span class="comment">// 第三种方式: 通过`Class`的静态方法获取</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thirdWayTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, SecurityException, NoSuchFieldException </span>&#123;</span><br><span class="line"></span><br><span class="line">String className = <span class="string">"pers.huangyuhui.reflection.bean.UserInfo"</span>;</span><br><span class="line">Class&lt;?&gt; class1 = Class.forName(className);</span><br><span class="line"></span><br><span class="line"><span class="comment">// the result: public java.lang.String</span></span><br><span class="line"><span class="comment">// pers.huangyuhui.reflection.bean.UserInfo.name</span></span><br><span class="line">System.out.println(class1.getField(<span class="string">"name"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 第四种方式: 通过类加载器获取</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fourthWayTest</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, SecurityException </span>&#123;</span><br><span class="line"></span><br><span class="line">String className = <span class="string">"pers.huangyuhui.reflection.bean.UserInfo"</span>;</span><br><span class="line"></span><br><span class="line">ClassLoader classLoader = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line"><span class="comment">// Invoking this method is equivalentto invoking loadClass(name,false).</span></span><br><span class="line">Class&lt;?&gt; class1 = classLoader.loadClass(className);</span><br><span class="line"></span><br><span class="line"><span class="comment">// the result: public void pers.huangyuhui.reflection.bean.UserInfo.introduce(java.lang.String)</span></span><br><span class="line">System.out.println(class1.getMethod(<span class="string">"introduce"</span>, String.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类加载器ClassLoader"><a href="#类加载器ClassLoader" class="headerlink" title="类加载器ClassLoader"></a>类加载器<code>ClassLoader</code></h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p><em>类加载器的作用:把<code>类(class)</code>装载进内存.如下示例</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java源文件(*.java) ——Java编译器——&gt; 字节码文件(*.class) ——类加载器+字节码效验器+解释器——&gt; 操作系统平台</span><br></pre></td></tr></table></figure></p><p><em><code>JVM</code>规范定义了两种类型的类加载器:<code>启动类加载器(bootstrap)</code>和<code>用户自定义加载器(user-defined class loader)</code>.JVM在运行时会产生<code>三个类加载器</code></em></p><ol><li>引导类加载器.</li></ol><ul><li><em><code>JVM</code>自带的类加载器,负责Java平台核心库,用来加载核心类库,该加载器无法直接获取.</em></li></ul><ol start="2"><li>扩展类加载器.</li></ol><ul><li><em>负责<code>jar包</code>或将指定目录下的<code>jar包</code>装入工作库.</em></li></ul><ol start="3"><li>系统类加载器.</li></ol><ul><li><em>负责<code>java-classpath</code>或<code>java.class.path</code>所指的目录下的类与<code>jar</code>包装入工作.(最常用)</em></li></ul><p><em><code>三个类加载器</code>的示例程序如下</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.reflection.bean.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ClassLoader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 类加载器`Classloader`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 15, 2019 5:37:30 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">systemClassLoaderTest</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取`系统类加载器`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ClassLoader classLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line"><span class="comment">// getName() Returns: name of this class loader,or null if this class loader is</span></span><br><span class="line"><span class="comment">// not named.</span></span><br><span class="line"><span class="comment">// the result: jdk.internal.loader.ClassLoaders$AppClassLoader@28c97a5</span></span><br><span class="line">System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取`系统类加载器`的父类加载器(`平台类加载器: getPlatformClassLoader`)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ClassLoader classLoader2 = classLoader.getParent();</span><br><span class="line"><span class="comment">// the result: jdk.internal.loader.ClassLoaders$PlatformClassLoader@7bedc48a</span></span><br><span class="line">System.out.println(classLoader2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查看自定义类`UserInfo`由哪个加载器加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;UserInfo&gt; class1 = UserInfo.class;</span><br><span class="line">ClassLoader classLoader3 = class1.getClassLoader();</span><br><span class="line"><span class="comment">// the result: jdk.internal.loader.ClassLoaders$AppClassLoader@28c97a5</span></span><br><span class="line"><span class="comment">// 由运行结果可知,该自定义类被`系统加载器`加载</span></span><br><span class="line">System.out.println(classLoader3);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查看`java.lang.Object`(核心类库)由哪一个加载器加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;?&gt; class2 = Class.forName(<span class="string">"java.lang.Object"</span>);</span><br><span class="line">ClassLoader classLoader4 = class2.getClassLoader();</span><br><span class="line"><span class="comment">// the result: null</span></span><br><span class="line"><span class="comment">// 运行结果为`null`,说明该类被`引导类加载器`加载 !</span></span><br><span class="line"><span class="comment">// `引导类加载器`: `JVM`自带的类加载器,负责Java平台核心库,用来加载核心类库,该加载器无法直接获取</span></span><br><span class="line">System.out.println(classLoader4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h4><p><em>当程序主动使用某个类时,如果该类还未被<code>加载</code>到内存中,则系统会通知如下三个步骤来对该类进行初始化.</em></p><ol><li>类的加载 : 将类的<code>Class</code>文件读入到内存,并为之创建一个<code>java.lang.Class</code>对象,此过程由类加载器完成.</li><li>类的链接 : 将类的<code>二进制</code>数据合并到<code>JRE</code>中.</li><li>类的初始化 : <code>JVM</code>负责对类进行初始化.</li></ol><h4 id="类加载器的应用"><a href="#类加载器的应用" class="headerlink" title="类加载器的应用"></a>类加载器的应用</h4><ol><li><p><em>利用<code>ClassLoader</code>读取指定<code>包</code>下的配置文件(如果不使用类加载器配置文件只能放在<code>项目</code>目录下..).程序示例如下 :</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ReadConfigFileInfo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 利用`ClassLoad`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 15, 2019 6:29:39 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadConfigFileInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">classLoaderTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不使用`ClassLoader`,读取当前工程下的配置文件的方式如下:</span></span><br><span class="line"><span class="comment">// FileInputStream fileInputStream = new FileInputStream(new File("user.properties"));</span></span><br><span class="line"></span><br><span class="line">ClassLoader classLoader = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line"><span class="comment">// return: An input stream for reading the resource.</span></span><br><span class="line">InputStream inputStream = classLoader</span><br><span class="line">.getResourceAsStream(<span class="string">"pers\\huangyuhui\\reflection\\classloader\\user.properties"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reads a property list (key and element pairs) from the inputbyte stream.</span></span><br><span class="line">properties.load(inputStream);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"singer: "</span> + properties.getProperty(<span class="string">"singer"</span>) + <span class="string">"\nsong: "</span> + properties.getProperty(<span class="string">"song"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>在<code>pers.huangyuhui.reflection.classloader</code>包下创建配置文件<code>user.properties</code></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">singer=Justin Bieber</span><br><span class="line">song=Love yourself</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">singer: Justin Bieber</span><br><span class="line">song: Love yourself</span><br></pre></td></tr></table></figure></li></ol><h3 id="newInstance-创建运行时类的对象"><a href="#newInstance-创建运行时类的对象" class="headerlink" title="newInstance()创建运行时类的对象"></a><code>newInstance()</code>创建运行时类的对象</h3><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><p><em>创建类的对象: 调用<code>Class</code>对象的<code>newInstance()</code>方法,要求如下：</em></p><ol><li>类必须有一个无参数的构造器.</li><li>类的构造器的访问权限需要足够.</li></ol><h4 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.newinstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.reflection.bean.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: NewInstanceTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 使用`newInstance()`创建运行时类的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 16, 2019 10:08:37 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewInstanceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">String className = <span class="string">"pers.huangyuhui.reflection.bean.UserInfo"</span>;</span><br><span class="line">Class&lt;?&gt; class1 = Class.forName(className);</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="comment">// 使用`newInstance()`创建对应的运行时类的对象时实际上是调用了运行时类的空参构造器.</span></span><br><span class="line">UserInfo userInfo = (UserInfo) class1.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// the result: UserInfo [name=null, sex=null, age=0]</span></span><br><span class="line">System.out.println(userInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过反射调用类的完整结构"><a href="#通过反射调用类的完整结构" class="headerlink" title="通过反射调用类的完整结构"></a>通过反射调用类的<code>完整结构</code></h3><ol><li>获取属性</li></ol><ul><li><em>略</em></li></ul><ol start="2"><li>获取方法</li></ol><ul><li><em>略</em></li></ul><ol start="3"><li>获取构造器</li></ol><ul><li><em>略</em></li></ul><h3 id="反射的应用之动态代理"><a href="#反射的应用之动态代理" class="headerlink" title="反射的应用之动态代理"></a>反射的应用之<code>动态代理</code></h3><h4 id="动态代理介绍"><a href="#动态代理介绍" class="headerlink" title="动态代理介绍"></a><code>动态代理</code>介绍</h4><ol><li>概念<br><em>动态代理是指客户通过代理类来调用其它对象的方法,并且是在程序运行时根据需要动态创建目标类的代理对象.</em></li><li>使用场合<br><em>调试及远程方法调用等..</em></li><li>设计模式的原理<br><em>使用一个代理将对象包装起来,然后使用该代理对象取代原始对象.任何对原始对象的调用都要通过代理.代理对象决定是否以及何时将方法调用转到原始对象上.</em></li></ol><h4 id="静态代理程序示例"><a href="#静态代理程序示例" class="headerlink" title="静态代理程序示例"></a><code>静态代理</code>程序示例</h4><p><em>为了与动态代理相比较,静态代理程序示例如下.不难发现: 如果添加不同接口则需要不同的代理类来完成其代理!很繁琐!!</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.proxy;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ClothFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createCloth</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NikeClothFactory</span> <span class="keyword">implements</span> <span class="title">ClothFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Create the cloth .."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">ClothFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">NikeClothFactory nikeClothFactory;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(NikeClothFactory nike)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.nikeClothFactory = nike;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"This is static proxy .."</span>);</span><br><span class="line">nikeClothFactory.createCloth();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: StaticProxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 静态代理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 18, 2019 10:31:27 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">NikeClothFactory nikeClothFactory = <span class="keyword">new</span> NikeClothFactory();</span><br><span class="line">ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory(nikeClothFactory);</span><br><span class="line">proxyFactory.createCloth();</span><br><span class="line"></span><br><span class="line"><span class="comment">//程序运行结果如下所示 :</span></span><br><span class="line"><span class="comment">// This is static proxy ..</span></span><br><span class="line"><span class="comment">// Create the cloth ..</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="动态代理程序示例"><a href="#动态代理程序示例" class="headerlink" title="动态代理程序示例"></a><code>动态代理</code>程序示例</h4><ul><li><em><code>反射</code>是动态语言的关键,程序示例如下 :</em><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.reflection.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subjet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subjet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"被代理类执行的动作 .."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现动态代理的核心类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Object obj;<span class="comment">// 实现了接口的被代理类的对象的声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给被代理的对象实例化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">dynamicInit</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.obj = object;</span><br><span class="line"><span class="comment">// `动态`地创建指定代理类的对象并返回</span></span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// 当通过代理类的对象发起对被重写的方法调用时,都会转换为对如下`invoke`方法的调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">Object object = method.invoke(obj, args);</span><br><span class="line"><span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: DynamicProxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 动态代理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 18, 2019 11:03:54 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">MyInvocationHandler myInvocationHandler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">RealSubject realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line"></span><br><span class="line"><span class="comment">// `dynamicInit`方法动态的返回一个同样实现了 `Real ...`所在类实现的接口`Subject`的代理类的对象</span></span><br><span class="line">Object object = myInvocationHandler.dynamicInit(realSubject);</span><br><span class="line"><span class="comment">// 此时`subject`为代理类的对象</span></span><br><span class="line">Subjet subjet = (Subjet) object;</span><br><span class="line"><span class="comment">// 调用`action`时会转到对`InvocationHandler`接口的实现类的`invoke`方法的调用</span></span><br><span class="line">subjet.action();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为证明动态代理的特性,再实现一个接口的代理类的对象</span></span><br><span class="line">NikeClothFactory nikeClothFactory = <span class="keyword">new</span> NikeClothFactory();</span><br><span class="line">ClothFactory clothFactory = (ClothFactory) myInvocationHandler.dynamicInit(nikeClothFactory);</span><br><span class="line">clothFactory.createCloth();</span><br><span class="line"></span><br><span class="line"><span class="comment">//程序运行结果如下所示 :</span></span><br><span class="line"><span class="comment">//被代理类执行的动作 ..</span></span><br><span class="line"><span class="comment">//Create the cloth ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-Reflection&quot;&gt;&lt;a href=&quot;#Java-Reflection&quot; class=&quot;headerlink&quot; title=&quot;Java Reflection&quot;&gt;&lt;/a&gt;Java Reflection&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java annotation</title>
    <link href="http://yoursite.com/2019/04/14/Java-annotation/"/>
    <id>http://yoursite.com/2019/04/14/Java-annotation/</id>
    <published>2019-04-14T01:43:16.000Z</published>
    <updated>2019-04-14T14:54:41.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java注解-元数据"><a href="#Java注解-元数据" class="headerlink" title="Java注解 (元数据)"></a>Java注解 (元数据)</h2><h3 id="注解的概念及作用"><a href="#注解的概念及作用" class="headerlink" title="注解的概念及作用"></a>注解的概念及作用</h3><ul><li><p><em>从JDK1.5开始,Java支持在源文件中嵌入补充信息,这类信息被称为<code>注解(annotation)</code>.注解不会改变程序的动作,因此也就不会改变程序的语义,但是在开发和部署期间,各种工具可以使用这类信息,例如: 源代码生成器可以处理注解! 注: <code>如果没有注解信息处理流程(如:通过反射查询注解),则注解毫无意义 !</code></em></p></li><li><p><em>说明: 其实术语<code>元数据(metadata)</code>,但是<code>注解</code>这个名称更具有描述性并且更常用.</em></p></li></ul><h3 id="声明注解"><a href="#声明注解" class="headerlink" title="声明注解"></a>声明注解</h3><ul><li><em>注解是一种代码级别的说明.它与<code>类</code>,<code>接口</code>,<code>枚举</code>在同一个层次,它可以声明在<code>包</code>,<code>类</code>,<code>字段</code>,<code>方法</code>,<code>局部变量</code>,<code>方法参数</code>等的前面,用来对这些元素进行说明,注释..</em></li></ul><h3 id="注解的分类"><a href="#注解的分类" class="headerlink" title="注解的分类"></a>注解的分类</h3><ol><li>特殊的注解 : <code>标记注解</code>,<code>单成员注解</code>.</li><li><code>内置注解</code>.</li><li><code>类型注解</code>.</li><li><code>重复注解</code>.</li></ol><h3 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h3><h4 id="内置注解分类"><a href="#内置注解分类" class="headerlink" title="内置注解分类"></a>内置注解分类</h4><ol><li><em><code>java.lang.annotation</code>包下的注解分别是 : <code>@Retention</code>,<code>@Documnetd</code>,<code>@Target</code>,<code>@Inherited</code></em></li></ol><ul><li><em>以上四个注解被称为<code>元注解</code>,其作用是负责注解其它的注解,用来提供对其它<code>annotation</code>类型做说明.</em></li></ul><ol start="2"><li><em><code>java.lang</code>包下注解分别是 : <code>@Override</code>,<code>@Deprecated</code>,<code>@FunctionalInterface</code>,<code>@SafeVarargs</code>,<code>@SuppressWarnings</code></em></li></ol><ul><li><em>注意: <code>JDK8</code>在<code>java.lang.annotation</code>中添加了<code>Repeatable</code>和<code>Native</code>注解.其中<code>Repeatable</code>支持重复注解,<code>Native</code>用于注解本机代码可以访问的域变量.</em></li></ul><h4 id="内置注解-非元注解"><a href="#内置注解-非元注解" class="headerlink" title="内置注解 : 非元注解"></a>内置注解 : <code>非元注解</code></h4><ul><li><em><code>@SuppressWarnings</code>注解使用详解如下图所示</em><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/14/Java-annotation/SuppressWarnings.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><ol><li><p><em><code>@Override</code>,<code>@Deprecated</code>,<code>@SafeVarargs</code>,<code>SuppressWarnings</code>程序示例</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.annotation.built_in_annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Built_in_annotations</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 非元注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 9:36:20 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Built_in_annotations</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line"><span class="keyword">private</span> T[] args;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type safety: Potential heap pollution via varargs parameter args..</span></span><br><span class="line"><span class="comment">// @SafeVarargs: 为标记注解,只能用于方法和构造方法,指示没有发生与可变长度参数相关的不安全动作.</span></span><br><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Built_in_annotations</span><span class="params">(T... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.args = args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @SafeVarargs: 该注解只能用于varargs方法或者声明为static或final的构造方法.</span></span><br><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">safeVarargsTest</span><span class="params">(T... args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line">T t : args) &#123;</span><br><span class="line">System.out.println(args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Override: 用于确保超类方法被真正地重写,而不是简单地重载.</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Deprecated: 为标记注解,用于指示声明是过时的,并且已经被更新到的形式取代.</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deprecatedTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @SuppressWarnings: 用于抑制一个或多个编译器可能会报告的警告.使用以字符串形式表示的名称来指定要被抑制的警告.</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">supressWarningsTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line">ArrayList arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em><code>@FunctionalInterface</code>程序示例</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: functionalInterface</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: `学习<span class="doctag">@functionalInterface</span>注解`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 10:39:46 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//`Java8`为函数式接口引入了一个新注解`@FunctionalInterface`,其主要用于编译错误检查,</span></span><br><span class="line"><span class="comment">//加上该注释后当你写的接口不符合函数式定义时,编译器就会报错 !</span></span><br><span class="line"><span class="comment">//注意: 是否添加`@FunctionalInterface`对于接口是不是函数式接口没有影响,</span></span><br><span class="line"><span class="comment">//该注释只是提醒`编译器`去检查该接口是否仅仅包含一个抽象方法.</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">functionalInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意: 函数式接口中只能有一个抽象方法 !</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myLambda</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式接口里是可以包含默认方法,因为默认方法不是抽象方法,其有一个默认实现,</span></span><br><span class="line">    <span class="comment">//所以是符合函数式接口的定义的.</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// method body..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式接口里是可以包含静态方法,因为静态方法不能是抽象方法,是一个已经实现了的方法,</span></span><br><span class="line">    <span class="comment">//所以是符合函数式接口的定义的.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// method body..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式接口里是可以包含Object里的public方法,这些方法对于函数式接口来说,</span></span><br><span class="line"><span class="comment">// 不被当成是抽象方法(虽然它们是抽象方法).因为任何一个函数式接口的实现,默认都继承了Object类,</span></span><br><span class="line">    <span class="comment">//其包含了来自java.lang.Object里对这些抽象方法的实现!</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用`@FunctionalInterface`注解的函数式接口继而可以使用`Lambda`表示式来表示该接口的一个实现.</span></span><br><span class="line"><span class="comment">//(Java8 之前一般是使用匿名类实现的).</span></span><br><span class="line"><span class="comment">//functionalInterface  f = message-&gt;System.out.println();</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="内置注解-元注解"><a href="#内置注解-元注解" class="headerlink" title="内置注解 : 元注解"></a>内置注解 : <code>元注解</code></h4><ul><li><p><em>使用<code>@Target</code>,<code>@Retention</code>自定义注解</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyTarget_annotation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 11:12:54 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.LOCAL_VARIABLE,</span><br><span class="line">ElementType.CONSTRUCTOR &#125;)<span class="comment">//用于指定可以应用注解的声明类型,被设计为只能注解其它注解.</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)<span class="comment">//指定保留策略.</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTarget_annotation &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>; <span class="comment">//使用默认值</span></span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">String[] address() <span class="keyword">default</span> &#123; <span class="string">"null"</span> &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>使用自定义注解</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pers.huangyuhui.annotation.myannotation.MyTarget_annotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TargetTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 使用自定义注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 11:38:23 AM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MyTarget</span>_annotation(name = <span class="string">""</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于声明的注解类型包含 : `CONSTRUCTOR`, 所以可以在构造方法前使用.</span></span><br><span class="line"><span class="meta">@MyTarget</span>_annotation(name = <span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TargetTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于声明的注解类型包含 : `FIELD`, 所以可以在域变量前使用.</span></span><br><span class="line"><span class="meta">@MyTarget</span>_annotation(name = <span class="string">""</span>)</span><br><span class="line"><span class="keyword">private</span> String s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于声明的注解类型包含 : `METHOD`, 所以可以在方法前使用.</span></span><br><span class="line"><span class="meta">@MyTarget</span>_annotation(id = <span class="number">1</span>, name = <span class="string">"YUbuntu0109"</span>, address = <span class="string">"my address"</span>) <span class="comment">// 显式的定义注解值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于声明的注解类型包含 : `LOCAL_VARIABLE`, 所以可以在局部变量前使用.</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line"><span class="meta">@MyTarget</span>_annotation(name = <span class="string">""</span>)</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用反射获取注解"><a href="#使用反射获取注解" class="headerlink" title="使用反射获取注解"></a>使用反射获取注解</h3><ol><li>通过<code>反射</code>获取方法关联的注解</li></ol><ul><li><p><em>首先自定义一个注解</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.annotation.myannotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyAnnotation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义注解,用于通过反射获取注解信息的测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 5:52:05 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)<span class="comment">//指定保留策略</span></span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.METHOD, ElementType.TYPE &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "<span class="keyword">default</span> value"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>通过反射获取自定义注解信息</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.annotation.myannotation.MyAnnotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: getAnnotationInfo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 通过反射获取方法关联的注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 5:45:32 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getAnnotationInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation</span>(name = <span class="string">"Hello annotation !"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">double</span> d, String s)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">getAnnotationInfo getInfo = <span class="keyword">new</span> getAnnotationInfo();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Class对象</span></span><br><span class="line">Class&lt;?&gt; class1 = getInfo.getClass();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 通过调用Class泛型类提供的`getMethod`方法获取与方法相关的信息</span></span><br><span class="line">Method method = class1.getMethod(<span class="string">"fun"</span>, <span class="keyword">double</span>.class, String.class);</span><br><span class="line"><span class="comment">// 通过调用`getAnnotation`获取与对象相关联的特定注解</span></span><br><span class="line">MyAnnotation annotatioin = method.getAnnotation(MyAnnotation.class);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"id : "</span> + annotatioin.id() + <span class="string">"\nname : "</span> + annotatioin.name());</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException | SecurityException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id : <span class="number">1</span> </span><br><span class="line">name : Hello annotation !</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>通过<code>反射</code>获取所有注解</li></ol><ul><li><p><em>首先自定义一个注解</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.annotation.myannotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyAnnotation2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义注解,用于反射获取注解信息的测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 6:09:15 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation2 &#123;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">description</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>通过反射获取自定义<code>注解</code>信息</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.annotation.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.annotation.myannotation.MyAnnotation;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.annotation.myannotation.MyAnnotation2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: getAllAnnotationInfo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 通过反射机制获取所有注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 6:10:29 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation</span>()</span><br><span class="line"><span class="meta">@MyAnnotation</span>2(description = <span class="string">"Test class"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getAllAnnotationInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation</span>(id = <span class="number">1</span>, name = <span class="string">"Hello annotation !"</span>)</span><br><span class="line"><span class="meta">@MyAnnotation</span>2(description = <span class="string">"Test method"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException </span>&#123;</span><br><span class="line">getAllAnnotationInfo allAnnotationInfo = <span class="keyword">new</span> getAllAnnotationInfo();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过`getAnnoations`获取该类所有注解信息</span></span><br><span class="line">Annotation annotation[] = allAnnotationInfo.getClass().getAnnotations();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"`getAllAnnotationInfo`类的所有注解 : "</span>);</span><br><span class="line"><span class="keyword">for</span> (Annotation info : annotation) &#123;</span><br><span class="line">System.out.println(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">// 通过调用Class泛型类提供的`getMethod`方法获取与方法相关的信息</span></span><br><span class="line">Method method = allAnnotationInfo.getClass().getMethod(<span class="string">"fun"</span>);</span><br><span class="line"><span class="comment">// 通过调用`getAnnotation`获取与对象相关联的特定注解</span></span><br><span class="line">annotation = method.getAnnotations();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"方法`fun()`的所有注解 : "</span>);</span><br><span class="line"><span class="keyword">for</span> (Annotation info : annotation) &#123;</span><br><span class="line">System.out.println(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`getAllAnnotationInfo`类的所有注解 : </span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"default value"</span>, id=<span class="number">1</span>)</span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation2(description=<span class="string">"Test class"</span>)</span><br><span class="line"></span><br><span class="line">方法`fun()`的所有注解 : </span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"Hello annotation !"</span>, id=<span class="number">1</span>)</span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation2(description=<span class="string">"Test method"</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="标记注解"><a href="#标记注解" class="headerlink" title="标记注解"></a>标记注解</h3><ul><li><p><em>编写示例程序来判断<code>标记注解</code>是否存在</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TagTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 标记注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 6:57:26 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> MyMarker_annotation &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarketTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyMarker</span>_annotation</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MarketTest marketTest = <span class="keyword">new</span> MarketTest();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过调用Class泛型类提供的`getMethod`方法获取与该方法相关的信息</span></span><br><span class="line">Method method = marketTest.getClass().getMethod(<span class="string">"fun"</span>);</span><br><span class="line"><span class="comment">// 通过使用`AnnotatedElement`接口的`isAnnotationPresent`方法来确定自定义注解中是否存在`标记注解`</span></span><br><span class="line"><span class="keyword">if</span> (method.isAnnotationPresent(MyMarker_annotation.class)) &#123;</span><br><span class="line">System.out.println(<span class="string">"存在标记注解 !"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.err.println(<span class="string">"Method not found !"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">fun();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">存在标记注解 !</span><br></pre></td></tr></table></figure></li><li><p><em><code>说明</code> : 因为<code>标记注解没有成员</code>,所以应用标记注解时,后面不需要有圆括号.如果提供空的圆括号,也不会报错,但不是必需的.类似地,对于所有成员都使用<code>默认值(default)</code>的注解也可以没有圆括号.</em></p></li></ul><h3 id="重复注解"><a href="#重复注解" class="headerlink" title="重复注解"></a>重复注解</h3><ul><li><p><em>要创建<code>重复注解</code>,必须创建<code>容器注解</code></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.annotation.myannotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyReapeatable_annotation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: `重复注解`的容器注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 8:08:21 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyReapeatable_annotation &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `value`成员指定的是重复注解类型的数组</span></span><br><span class="line">MyAnnotation[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>创建<code>重复注解</code></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.annotation.myannotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyAnnotation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 重复注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 5:52:05 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指定`@Repeatable`注解的`value`成员值为容器注解 : `MyReapeatable_annotation`</span></span><br><span class="line"><span class="meta">@Repeatable</span>(MyReapeatable_annotation.class)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "<span class="keyword">default</span> value"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>通过反射获取<code>重复注解</code>信息</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.annotation.myannotation_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.annotation.myannotation.MyAnnotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: RepeatTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 通过反射获取`重复注解`的信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 14, 2019 7:58:54 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepeatTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="meta">@MyAnnotation</span>(id=<span class="number">2</span>)</span><br><span class="line"><span class="meta">@MyAnnotation</span>(id=<span class="number">3</span>,name=<span class="string">"YUbuntu0109"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">RepeatTest repeatTest = <span class="keyword">new</span> RepeatTest();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Class对象</span></span><br><span class="line">Class&lt;?&gt; class1 = repeatTest.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过调用Class泛型类提供的`getMethod`方法获取与该方法相关的信息</span></span><br><span class="line">Method method = class1.getMethod(<span class="string">"testMethod"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// `getAnnotation`用于获取与指定对象关联的特定注解</span></span><br><span class="line"><span class="comment">// Annotation annotation = method.getAnnotation(MyReapeatable_annotation.class);</span></span><br><span class="line"><span class="comment">// System.out.println(annotation);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用`getAnnotationsByType`来获取`MyAnnotation`重复注解</span></span><br><span class="line">Annotation[] annotations = method.getAnnotationsByType(MyAnnotation.class);</span><br><span class="line"><span class="keyword">for</span> (Annotation info : annotations) &#123;</span><br><span class="line">System.out.println(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">System.err.println(<span class="string">"Error : Method not found !"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">testMethod();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//程序运行结果 :</span></span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyReapeatable_annotation(value=&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"default value"</span>, id=<span class="number">1</span>), </span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"default value"</span>, id=<span class="number">2</span>), </span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"YUbuntu0109"</span>, id=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//程序运行结果(使用`getAnnotationsByType`来获取`MyAnnotation`重复注解) : </span></span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"default value"</span>, id=<span class="number">1</span>)</span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"default value"</span>, id=<span class="number">2</span>)</span><br><span class="line"><span class="meta">@pers</span>.huangyuhui.annotation.myannotation.MyAnnotation(name=<span class="string">"YUbuntu0109"</span>, id=<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java注解-元数据&quot;&gt;&lt;a href=&quot;#Java注解-元数据&quot; class=&quot;headerlink&quot; title=&quot;Java注解 (元数据)&quot;&gt;&lt;/a&gt;Java注解 (元数据)&lt;/h2&gt;&lt;h3 id=&quot;注解的概念及作用&quot;&gt;&lt;a href=&quot;#注解的概念及作用&quot;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>详解Stack的实现方式及其应用</title>
    <link href="http://yoursite.com/2019/04/13/%E8%AF%A6%E8%A7%A3Stack%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/04/13/详解Stack的实现方式及其应用/</id>
    <published>2019-04-13T02:00:01.000Z</published>
    <updated>2019-04-16T11:16:37.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="栈的定义-栈-Stack-是一个有序线性表-只能在表的一端-称为栈顶-top-执行插入和删除操作-最后插入的元素将第一个被删除-所以-栈也称为后进先出-Last-In-Frist-Out-LIFO-或先进后出-Fist-In-Last-Out-FILO-线性表"><a href="#栈的定义-栈-Stack-是一个有序线性表-只能在表的一端-称为栈顶-top-执行插入和删除操作-最后插入的元素将第一个被删除-所以-栈也称为后进先出-Last-In-Frist-Out-LIFO-或先进后出-Fist-In-Last-Out-FILO-线性表" class="headerlink" title="栈的定义 : 栈(Stack)是一个有序线性表,只能在表的一端(称为栈顶 : top)执行插入和删除操作.最后插入的元素将第一个被删除.所以,栈也称为后进先出(Last In Frist Out: LIFO)或先进后出(Fist In Last Out: FILO)线性表."></a>栈的定义 : <code>栈(Stack)</code>是一个有序线性表,只能在表的一端(称为栈顶 : top)执行插入和删除操作.最后插入的元素将第一个被删除.所以,栈也称为后进先出(Last In Frist Out: <code>LIFO</code>)或先进后出(Fist In Last Out: <code>FILO</code>)线性表.</h3><h3 id="注意点-两个改变栈的操作都有专用名称-一个称为入栈-psuh-表示在栈中插入一个元素-另一个称为出栈-pop-表示从栈中删除一个元素-试图对一个空栈执行出栈的操作称为下溢-underflow-试图对一个满栈执行入栈操作称为溢出-overflow-通常溢出和下溢均被认为是异常"><a href="#注意点-两个改变栈的操作都有专用名称-一个称为入栈-psuh-表示在栈中插入一个元素-另一个称为出栈-pop-表示从栈中删除一个元素-试图对一个空栈执行出栈的操作称为下溢-underflow-试图对一个满栈执行入栈操作称为溢出-overflow-通常溢出和下溢均被认为是异常" class="headerlink" title="注意点 : 两个改变栈的操作都有专用名称,一个称为入栈(psuh): 表示在栈中插入一个元素. 另一个称为出栈(pop): 表示从栈中删除一个元素.试图对一个空栈执行出栈的操作称为下溢(underflow). 试图对一个满栈执行入栈操作称为溢出(overflow). 通常溢出和下溢均被认为是异常."></a>注意点 : 两个改变栈的操作都有专用名称,一个称为<code>入栈(psuh)</code>: 表示在栈中插入一个元素. 另一个称为<code>出栈(pop)</code>: 表示从栈中删除一个元素.试图对一个空栈执行出栈的操作称为<code>下溢(underflow)</code>. 试图对一个满栈执行入栈操作称为<code>溢出(overflow)</code>. 通常溢出和下溢均被认为是异常.</h3><h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3><ul><li><em>直接应用</em></li></ul><ol><li>符号匹配.</li><li>中缀表达式转换为后缀表达式.</li><li>计算后缀表达式.</li><li>实现函数的调用(包括递归).</li><li>求范围误差(极差).</li><li>网页浏览器中已访问页面的历史记录(后退back按钮).</li><li>文本编辑器中的撤销(undo)序列.</li><li>HTML和XML文件中的标签(tag)匹配.</li></ol><ul><li><em>间接应用</em></li></ul><ol><li>作为一个算法的辅助数据结构(例如: 树的遍历算法).</li><li>其它数据结构的组件(例如: 模拟队列).</li></ol><h3 id="推荐学习方法"><a href="#推荐学习方法" class="headerlink" title="推荐学习方法"></a>推荐学习方法</h3><ul><li><em>推荐小伙伴们一个数据结构可视化的网站,可以大大提高学习效率哟(っ•̀ω•́)っ✎⁾⁾⁾ <a href="https://www.cs.usfca.edu/~galles/visualization/about.html" target="_blank" rel="noopener">GO !</a></em><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/13/详解Stack的实现方式及其应用/ListStack.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><h3 id="栈的实现方式"><a href="#栈的实现方式" class="headerlink" title="栈的实现方式"></a>栈的实现方式</h3><ol><li>基于简单数组的实现栈 ：程序示例如下*<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: SimpleStack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 利用简单数组实现栈</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 10, 2019 4:15:47 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimArrayStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the size of stack</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line"><span class="comment">// store the data</span></span><br><span class="line"><span class="keyword">private</span> Object[] stackArray;</span><br><span class="line"><span class="comment">// the top pointer of the stack</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> topPointer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimArrayStack</span><span class="params">(<span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">maxSize = max;</span><br><span class="line">topPointer = -<span class="number">1</span>;</span><br><span class="line">stackArray = <span class="keyword">new</span> Object[maxSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// push new data into the stack</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">push</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">stackArray[++topPointer] = element;</span><br><span class="line"><span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// peek the top data in the stack</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stackArray[topPointer];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// determines whether the stack is empty</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> topPointer == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop the data in the stack</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stackArray[topPointer--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop all of data in the stack</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">popAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">"The element to be poped : "</span> + pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterate through all the data in the stack</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverseElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"All of element in the stack : "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stackArray.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != stackArray.length - <span class="number">1</span>) &#123;</span><br><span class="line">System.out.print(stackArray[i] + <span class="string">" , "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.print(stackArray[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SimpleStack&lt;Character&gt; stack2 = new SimpleStack&lt;Character&gt;(6);</span></span><br><span class="line">SimArrayStack&lt;Integer&gt; stack = <span class="keyword">new</span> SimArrayStack&lt;Integer&gt;(<span class="number">6</span>);</span><br><span class="line">stack.push(<span class="number">1</span>);</span><br><span class="line">stack.push(<span class="number">2</span>);</span><br><span class="line">stack.push(<span class="number">3</span>);</span><br><span class="line">stack.push(<span class="number">4</span>);</span><br><span class="line">stack.push(<span class="number">5</span>);</span><br><span class="line">stack.push(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">stack.traverseElement();</span><br><span class="line">System.out.println(<span class="string">"The element to be poped : "</span> + stack.pop());</span><br><span class="line">System.out.println(<span class="string">"The top element : "</span> + stack.peek());</span><br><span class="line">System.out.println(<span class="string">"Push a new element : "</span> + stack.push(<span class="number">7</span>));</span><br><span class="line">System.out.println(<span class="string">"The top element : "</span> + stack.peek());</span><br><span class="line">System.out.println(<span class="string">"Determines whether the stack is empty : "</span> + stack.isEmpty());</span><br><span class="line">System.out.println(<span class="string">"Pop all of elements : "</span> + stack.popAll());</span><br><span class="line">System.out.println(<span class="string">"Determines whether the stack is empty : "</span> + stack.isEmpty());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ## The program running results are as follows :</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">All of element in the stack : 1 , 2 , 3 , 4 , 5 , 6</span></span><br><span class="line"><span class="comment">The element to be poped : 6</span></span><br><span class="line"><span class="comment">The top element : 5</span></span><br><span class="line"><span class="comment">Push a new element : 7</span></span><br><span class="line"><span class="comment">The top element : 7</span></span><br><span class="line"><span class="comment">Determines whether the stack is empty : false</span></span><br><span class="line"><span class="comment">The element to be poped : 7</span></span><br><span class="line"><span class="comment">The element to be poped : 5</span></span><br><span class="line"><span class="comment">The element to be poped : 4</span></span><br><span class="line"><span class="comment">The element to be poped : 3</span></span><br><span class="line"><span class="comment">The element to be poped : 2</span></span><br><span class="line"><span class="comment">The element to be poped : 1</span></span><br><span class="line"><span class="comment">Pop all of elements : true</span></span><br><span class="line"><span class="comment">Determines whether the stack is empty : true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="局限性-栈的最大空间必须预先声明且不能改变-试图对一个满栈执行入栈时操作将产生一个针对简单数组这种特定实现栈方式的异常"><a href="#局限性-栈的最大空间必须预先声明且不能改变-试图对一个满栈执行入栈时操作将产生一个针对简单数组这种特定实现栈方式的异常" class="headerlink" title="局限性 : 栈的最大空间必须预先声明且不能改变.试图对一个满栈执行入栈时操作将产生一个针对简单数组这种特定实现栈方式的异常 !"></a>局限性 : 栈的最大空间必须预先声明且不能改变.试图对一个满栈执行入栈时操作将产生一个针对简单数组这种特定实现栈方式的异常 !</h4><ol start="2"><li><em>基于动态数组的实现栈 ：程序示例如下</em><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: DynArrayStack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 利用动态数组实现栈</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 11, 2019 5:49:02 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynArrayStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> topPointer;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"><span class="keyword">private</span> Object[] array;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DynArrayStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">topPointer = -<span class="number">1</span>;</span><br><span class="line">capacity = <span class="number">1</span>;</span><br><span class="line">array = <span class="keyword">new</span> Object[capacity];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// determines whether the stack is empty</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (topPointer == -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// determines whether the stack is full</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isStackFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (topPointer == capacity - <span class="number">1</span>);<span class="comment">// or return (topPointer==array.length);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// peek the top data of the stack</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> array[topPointer];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// push a new data into the stack</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">push</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isStackFull()) &#123;</span><br><span class="line">doubleStack();</span><br><span class="line">&#125;</span><br><span class="line">array[++topPointer] = element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// double the size of the array</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doubleStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Object newArr[] = <span class="keyword">new</span> Object[capacity * <span class="number">2</span>];</span><br><span class="line">System.arraycopy(array, <span class="number">0</span>, newArr, <span class="number">0</span>, capacity);</span><br><span class="line">capacity *= <span class="number">2</span>;</span><br><span class="line">array = newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop the data from the stack</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">System.err.println(<span class="string">"The Stack is  overflow !"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> array[topPointer--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop all of data from the stack</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">popAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">"The element to be poped : "</span> + pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterate through all the data in the stack</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverseElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"all of element in the stack : "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != array.length - <span class="number">1</span>) &#123;</span><br><span class="line">System.out.print(array[i] + <span class="string">" , "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete the stack</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">topPointer = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">DynArrayStack&lt;Character&gt; stack = <span class="keyword">new</span> DynArrayStack&lt;Character&gt;();</span><br><span class="line">stack.push(<span class="string">'a'</span>);</span><br><span class="line">stack.push(<span class="string">'b'</span>);</span><br><span class="line">stack.push(<span class="string">'c'</span>);</span><br><span class="line">stack.push(<span class="string">'d'</span>);</span><br><span class="line">stack.push(<span class="string">'e'</span>);</span><br><span class="line">stack.push(<span class="string">'f'</span>);</span><br><span class="line">stack.push(<span class="string">'g'</span>);</span><br><span class="line"></span><br><span class="line">stack.traverseElement();</span><br><span class="line">System.out.println(<span class="string">"The element to be poped : "</span> + stack.pop());</span><br><span class="line">System.out.println(<span class="string">"The top element : "</span> + stack.peek());</span><br><span class="line">System.out.println(<span class="string">"Push a new element : "</span> + stack.push(<span class="string">'h'</span>));</span><br><span class="line">System.out.println(<span class="string">"The top element : "</span> + stack.peek());</span><br><span class="line">System.out.println(<span class="string">"Determines whether the stack is empty : "</span> + stack.isEmpty());</span><br><span class="line">System.out.println(<span class="string">"Pop all of elements : "</span> + stack.popAll());</span><br><span class="line">System.out.println(<span class="string">"Determines whether the stack is empty : "</span> + stack.isEmpty());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*## The program running results are as follows :</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">all of element in the stack : a , b , c , d , e , f , g , </span></span><br><span class="line"><span class="comment">The element to be poped : g</span></span><br><span class="line"><span class="comment">The top element : f</span></span><br><span class="line"><span class="comment">Push a new element : h</span></span><br><span class="line"><span class="comment">The top element : h</span></span><br><span class="line"><span class="comment">Determines whether the stack is empty : false</span></span><br><span class="line"><span class="comment">The element to be poped : h</span></span><br><span class="line"><span class="comment">The element to be poped : f</span></span><br><span class="line"><span class="comment">The element to be poped : e</span></span><br><span class="line"><span class="comment">The element to be poped : d</span></span><br><span class="line"><span class="comment">The element to be poped : c</span></span><br><span class="line"><span class="comment">The element to be poped : b</span></span><br><span class="line"><span class="comment">The element to be poped : a</span></span><br><span class="line"><span class="comment">Pop all of elements : true</span></span><br><span class="line"><span class="comment">Determines whether the stack is empty : true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="注意-倍增太多可能导致内存溢出"><a href="#注意-倍增太多可能导致内存溢出" class="headerlink" title="注意 : 倍增太多可能导致内存溢出 !"></a>注意 : 倍增太多可能导致<code>内存溢出</code> !</h4><h4 id="上述程序中利用重复倍增技术-提高了程序的性能-其总时间开销T-n-≈-O-n-相比采用-当栈满时-每次将数组的大小增加1更加节省了push操作的总时间开销-其总时间开销T-n-≈-O-n²"><a href="#上述程序中利用重复倍增技术-提高了程序的性能-其总时间开销T-n-≈-O-n-相比采用-当栈满时-每次将数组的大小增加1更加节省了push操作的总时间开销-其总时间开销T-n-≈-O-n²" class="headerlink" title="上述程序中利用重复倍增技术)提高了程序的性能,其总时间开销T(n) ≈ O(n) . 相比采用: 当栈满时,每次将数组的大小增加1更加节省了push操作的总时间开销.其总时间开销T(n) ≈ O(n²) ."></a>上述程序中利用<code>重复倍增技术)</code>提高了程序的性能,其总时间开销<code>T(n) ≈ O(n)</code> . 相比采用: 当栈满时,每次将数组的大小增加<code>1</code>更加节省了<code>push</code>操作的总时间开销.其总时间开销<code>T(n) ≈ O(n²)</code> .</h4><ol start="3"><li><em>基于链表来实现栈 ：程序示例如下</em><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ListNode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 定义链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 11, 2019 7:01:35 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> T data;</span><br><span class="line"><span class="keyword">private</span> ListNode&lt;T&gt; next;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(T d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode&lt;T&gt; <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(ListNode&lt;T&gt; next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"["</span> + data + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ListStack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 利用链表实现栈</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 11, 2019 6:59:46 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListStack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ListNode&lt;E&gt; headNode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ListStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.headNode = <span class="keyword">new</span> ListNode&lt;E&gt;(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// push a new node into the linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode&lt;E&gt; <span class="title">push</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">headNode = <span class="keyword">new</span> ListNode&lt;E&gt;(data);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (headNode.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">headNode.setData(data);<span class="comment">// initialize header node.</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ListNode&lt;E&gt; newNode = <span class="keyword">new</span> ListNode&lt;E&gt;(data); <span class="comment">// create a new node.</span></span><br><span class="line">newNode.setNext(headNode);<span class="comment">// connect to the header node.</span></span><br><span class="line">headNode = newNode;<span class="comment">// set the new node to header node.</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns the top node of the linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> headNode.getData();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop top node in the linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">E node = headNode.getData();</span><br><span class="line">headNode = headNode.getNext();<span class="comment">// Reset the header node.</span></span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop all of nodes in the linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">popAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">"Pop all of nodes : "</span> + pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// determine whether the linked list is empty</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterate through all the node in the linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getNodeByLoop</span><span class="params">(ListNode&lt;E&gt; head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"All of nodes of the linked list:  "</span>);</span><br><span class="line"><span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (head.getNext() != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.print(head.getData() + <span class="string">" , "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.print(head.getData());</span><br><span class="line">&#125;</span><br><span class="line">head = head.getNext();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// destroy the linked list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">destroyStack</span><span class="params">(<span class="comment">/* ListNode&lt;E&gt; head */</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ListNode&lt;E&gt; auxilaryNode = <span class="keyword">null</span>, iterator = headNode;</span><br><span class="line"><span class="keyword">while</span> (iterator != <span class="keyword">null</span>) &#123;</span><br><span class="line">auxilaryNode = iterator.getNext();</span><br><span class="line">iterator = <span class="keyword">null</span>;</span><br><span class="line">iterator = auxilaryNode;</span><br><span class="line"></span><br><span class="line">headNode = iterator;<span class="comment">// Set the node to be deleted as the header node.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (auxilaryNode == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ListStack&lt;Integer&gt; stack = new ListStack&lt;Integer&gt;();</span></span><br><span class="line">ListStack&lt;String&gt; stack = <span class="keyword">new</span> ListStack&lt;String&gt;();</span><br><span class="line">stack.push(<span class="string">"A"</span>);</span><br><span class="line">stack.push(<span class="string">"B"</span>);</span><br><span class="line">stack.push(<span class="string">"C"</span>);</span><br><span class="line">stack.push(<span class="string">"D"</span>);</span><br><span class="line">stack.push(<span class="string">"E"</span>);</span><br><span class="line">stack.push(<span class="string">"F"</span>);</span><br><span class="line">stack.push(<span class="string">"G"</span>);</span><br><span class="line"></span><br><span class="line">stack.getNodeByLoop(stack.headNode);</span><br><span class="line">System.out.println(<span class="string">"The node to be poped : "</span> + stack.pop());</span><br><span class="line">System.out.println(<span class="string">"The top node : "</span> + stack.top());</span><br><span class="line">System.out.println(<span class="string">"Push a new node : "</span> + stack.push(<span class="string">"H"</span>));</span><br><span class="line">System.out.println(<span class="string">"The top node : "</span> + stack.top());</span><br><span class="line">System.out.println(<span class="string">"Determines whether the stack is empty : "</span> + stack.isEmpty());</span><br><span class="line">System.out.println(<span class="string">"Pop all of nodes(success ?) : "</span> + stack.popAll());</span><br><span class="line">System.out.println(<span class="string">"Determines whether the stack is empty : "</span> + stack.isEmpty());</span><br><span class="line">System.out.println(<span class="string">"Push a new node : "</span> + stack.push(<span class="string">"I"</span>));</span><br><span class="line">System.out.println(<span class="string">"Push a new node : "</span> + stack.push(<span class="string">"J"</span>));</span><br><span class="line">System.out.println(<span class="string">"Push a new node : "</span> + stack.push(<span class="string">"K"</span>));</span><br><span class="line">System.out.println(<span class="string">"Destroy the stack(success ?) : "</span> + stack.destroyStack());</span><br><span class="line">System.out.println(<span class="string">"Determines whether the stack is empty : "</span> + stack.isEmpty());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*## The program running results are as follows :</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">All of nodes of the linked list:  G , F , E , D , C , B , A</span></span><br><span class="line"><span class="comment">The node to be poped : G</span></span><br><span class="line"><span class="comment">The top node : F</span></span><br><span class="line"><span class="comment">Push a new node : [H]</span></span><br><span class="line"><span class="comment">The top node : H</span></span><br><span class="line"><span class="comment">Determines whether the stack is empty : false</span></span><br><span class="line"><span class="comment">Pop all of nodes : H</span></span><br><span class="line"><span class="comment">Pop all of nodes : F</span></span><br><span class="line"><span class="comment">Pop all of nodes : E</span></span><br><span class="line"><span class="comment">Pop all of nodes : D</span></span><br><span class="line"><span class="comment">Pop all of nodes : C</span></span><br><span class="line"><span class="comment">Pop all of nodes : B</span></span><br><span class="line"><span class="comment">Pop all of nodes : A</span></span><br><span class="line"><span class="comment">Pop all of nodes(success ?) : true</span></span><br><span class="line"><span class="comment">Determines whether the stack is empty : true</span></span><br><span class="line"><span class="comment">Push a new node : [I]</span></span><br><span class="line"><span class="comment">Push a new node : [J]</span></span><br><span class="line"><span class="comment">Push a new node : [K]</span></span><br><span class="line"><span class="comment">Destroy the stack(success ?) : true</span></span><br><span class="line"><span class="comment">Determines whether the stack is empty : true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="栈的各种实现方法的比较"><a href="#栈的各种实现方法的比较" class="headerlink" title="栈的各种实现方法的比较"></a>栈的各种实现方法的比较</h3><ol><li><strong>递增策略和倍增策略的比较</strong></li></ol><ul><li><em>通过分析完成<code>n</code>个<code>push</code>操作的总时间开销<code>T(n)</code>来比较递增策略和倍增策略的区别.从长度为<code>1</code>的数组表示的空栈开始,一次<code>push</code>操作的平摊时间等于一组<code>push</code>操作的总时间开销的平均值.记为 : <code>T(n)/n</code></em></li><li><em><code>递增策略</code> : 实现<code>push</code>操作的平摊时间开销为<code>O(n)[O(n²)/n]</code> .</em></li><li><em><code>倍增策略</code> : 实现<code>push</code>操作的平摊时间开销为<code>O(n)[O(n)/n]</code> .</em></li></ul><ol start="2"><li><strong>基于数组实现和基于链表实现的比较</strong><h4 id="a-：基于数组实现的栈"><a href="#a-：基于数组实现的栈" class="headerlink" title="(a) ：基于数组实现的栈"></a>(a) ：基于数组实现的栈</h4></li></ol><ul><li><em>各个操作都是常数时间开销.</em></li><li><em>每隔一段时间倍增操作的开销过大.</em></li><li><em>(从空栈开始)<code>n</code>个操作的任意序列的平摊时间开销为<code>O(n)</code>.</em><h4 id="b-：基于链表实现的栈"><a href="#b-：基于链表实现的栈" class="headerlink" title="(b) ：基于链表实现的栈"></a>(b) ：基于链表实现的栈</h4></li><li><em>栈规模的增加和减少都是很简洁.</em></li><li><em>各个操作都是常数时间开销.</em></li><li><em>每个操作都要使用额外的空间和时间开销来处理指针.</em></li></ul><h3 id="栈的应用-1"><a href="#栈的应用-1" class="headerlink" title="栈的应用"></a>栈的应用</h3><ol><li><em>举例<code>1</code> ：将用户输入的字符反转</em></li></ol><ul><li><p><em>首先定义一个基于简单数组的栈</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: SimpleStack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 栈</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 10, 2019 8:50:56 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line"><span class="comment">// 存储栈元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">char</span>[] stackArray;</span><br><span class="line"><span class="comment">// 栈顶指针</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> topPointer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleStack</span><span class="params">(<span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">maxSize = max;</span><br><span class="line">topPointer = -<span class="number">1</span>;</span><br><span class="line">stackArray = <span class="keyword">new</span> <span class="keyword">char</span>[maxSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逐个向栈中压入元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">stackArray[++topPointer] = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逐个弹出栈中元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stackArray[topPointer--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出栈中所有的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">popAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">"pop element : "</span> + pop());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stackArray[topPointer];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> topPointer == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>利用栈来反转字符</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyStack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 利用栈来反转字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 10, 2019 3:46:40 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReversalString</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String input;</span><br><span class="line"><span class="keyword">private</span> String output;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReversalString</span><span class="params">(String in)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.input = in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转字符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doReversal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> stackSize = input.length();</span><br><span class="line">SimpleStack stack = <span class="keyword">new</span> SimpleStack(stackSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符逐个压入栈中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line"><span class="keyword">char</span> in = input.charAt(i);</span><br><span class="line">stack.push(in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符逐个从栈中取出</span></span><br><span class="line">output = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">char</span> out = stack.pop();</span><br><span class="line">output += out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>接收用户输入的字符并测试</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ReversalStringTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试反转字符程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 10, 2019 8:53:24 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReversalStringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> BufferedReader bufferedReader;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reversalTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String input, output;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Please enter a string : "</span>);</span><br><span class="line"><span class="comment">// System.out.flush();</span></span><br><span class="line">input = getString();</span><br><span class="line"><span class="keyword">if</span> (input.equals(<span class="string">"exit"</span>)) &#123;</span><br><span class="line">bufferedReader.close();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串反转</span></span><br><span class="line">ReversalString reversal = <span class="keyword">new</span> ReversalString(input);</span><br><span class="line">output = reversal.doReversal();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Reversed : "</span> + output);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Ignore</span></span><br><span class="line"><span class="comment">// 测试BufferedString中的控制字符反转的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BufferedStringTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">"reverse"</span>);</span><br><span class="line"></span><br><span class="line">System.err.println(<span class="string">"Reversed : "</span> + stringBuffer.reverse());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过缓冲流中的'readLine'方法高效读入用户输入的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String s = <span class="keyword">null</span>;</span><br><span class="line">bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">s = bufferedReader.readLine();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下 :</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Please enter a string : </span><br><span class="line">my qq: <span class="number">3083968068</span></span><br><span class="line"></span><br><span class="line">Reversed : <span class="number">8608693803</span> :qq ym</span><br><span class="line"></span><br><span class="line">Please enter a string : </span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><em>举例 ：检查用户输入的运算符(括号匹配)</em></li></ol><ul><li><em>首先定义一个基于简单数组的栈(同上,略写)</em></li><li><p><em>利用栈中入栈和出栈操作匹配括号符</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: BracketChecker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 匹配括号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 10, 2019 9:58:36 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BracketChecker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String input;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BracketChecker</span><span class="params">(String in)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.input = in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chekc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> flag_a = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">boolean</span> flag_b = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> stackSize = input.length();</span><br><span class="line">SimpleStack stack = <span class="keyword">new</span> SimpleStack(stackSize);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line"><span class="keyword">char</span> in = input.charAt(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (in) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">stack.push(in);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#125;'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">']'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line"><span class="comment">// 括号匹配</span></span><br><span class="line"><span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">char</span> out = stack.pop();</span><br><span class="line"><span class="keyword">if</span> ((in == <span class="string">'&#125;'</span> &amp;&amp; out != <span class="string">'&#123;'</span>) || (in == <span class="string">')'</span> &amp;&amp; out != <span class="string">'('</span>) || (in == <span class="string">']'</span> &amp;&amp; out != <span class="string">'['</span>)</span><br><span class="line">|| (in == <span class="string">'&gt;'</span> &amp;&amp; out != <span class="string">'&lt;'</span>)) &#123;</span><br><span class="line">System.err.println(<span class="string">"error : "</span> + in + <span class="string">" at "</span> + i);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">flag_a = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.err.println(<span class="string">"error : "</span> + in + <span class="string">" at "</span> + i);</span><br><span class="line">flag_a = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 只检查括号</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果匹配成功,循环结束后栈中理应为空.</span></span><br><span class="line"><span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">"Error : missing right delimiter."</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">flag_b = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag_a &amp;&amp; flag_b) &#123;</span><br><span class="line">System.out.println(<span class="string">"Success !"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>接收用户输入的运算符并测试匹配程序</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: BracketCheckerTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试匹配括号符程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 10, 2019 9:58:55 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BracketCheckerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> BufferedReader bufferedReader;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">String input;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Please enter containing delimiters : "</span>);</span><br><span class="line">System.out.flush();</span><br><span class="line">input = getString();</span><br><span class="line"><span class="keyword">if</span>(input.equals(<span class="string">"exit"</span>)) &#123;</span><br><span class="line">bufferedReader.close();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BracketChecker checker = <span class="keyword">new</span> BracketChecker(input);</span><br><span class="line">checker.chekc();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过缓冲流中的'readLine'方法高效读入用户的数据.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String s = <span class="keyword">null</span>;</span><br><span class="line">bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">s = bufferedReader.readLine();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下 :</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Please enter containing delimiters : </span><br><span class="line">&#123;[&lt;a&gt;b]c)d&#125;efg</span><br><span class="line">error : ) at <span class="number">8</span></span><br><span class="line">error : &#125; at <span class="number">10</span></span><br><span class="line"></span><br><span class="line">Please enter containing delimiters : </span><br><span class="line">&#123;([&lt;a&gt;b]c)defg</span><br><span class="line">Error : missing right delimiter.</span><br><span class="line"></span><br><span class="line">Please enter containing delimiters : </span><br><span class="line">&#123;([&lt;a&gt;b]cd&#125;efg</span><br><span class="line">error : &#125; at <span class="number">10</span></span><br><span class="line">Error : missing right delimiter.</span><br><span class="line"></span><br><span class="line">Please enter containing delimiters : </span><br><span class="line">&#123;([&lt;a&gt;b]c)d&#125;efg</span><br><span class="line">Success !</span><br><span class="line"></span><br><span class="line">Please enter containing delimiters : </span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h2&gt;&lt;h3 id=&quot;栈的定义-栈-Stack-是一个有序线性表-只能在表的一端-称为栈顶-top-执行插入和删除操作-最后插入的元素将第一个被删除-所以-栈也
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Data Structures and Algorithms" scheme="http://yoursite.com/tags/Data-Structures-and-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>A simple MVC example</title>
    <link href="http://yoursite.com/2019/04/12/A-simple-MVC-example/"/>
    <id>http://yoursite.com/2019/04/12/A-simple-MVC-example/</id>
    <published>2019-04-12T13:34:28.000Z</published>
    <updated>2019-04-12T14:48:18.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个关于JSP的简单MVC案例"><a href="#一个关于JSP的简单MVC案例" class="headerlink" title="一个关于JSP的简单MVC案例"></a>一个关于<code>JSP</code>的简单<code>MVC</code>案例</h2><ul><li><em>程序示例图如下所示 :</em><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/12/A-simple-MVC-example/SimpleMVC.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><ul><li><em><code>Java bean</code> : 封装用户的身份信息.</em></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.servlet.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: UserInfo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 8, 2019 5:15:21 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserInfo</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em>操作数据库的工具类</em></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.servlet.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: JDBCUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 操作数据库工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 8, 2019 5:08:24 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize the driver of database.</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return a database connection object.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection = DriverManager.getConnection(</span><br><span class="line"><span class="string">"jdbc:mysql://LOCALHOST/DatabaseName?"</span> + <span class="string">"useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true"</span>,</span><br><span class="line"><span class="string">"root"</span>, <span class="string">"DatabasePassword"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// release the resource of connecting.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">freeResource</span><span class="params">(Connection connection, PreparedStatement preparedStatement, ResultSet resultSet)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (preparedStatement != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">preparedStatement.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">resultSet.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em><code>控制器(controller)</code> : 用于验证用户的登录信息并根据其结果作出相应的处理.</em></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.servlet.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.servlet.bean.UserInfo;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.servlet.modImpl.DalidateUserInfo;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LoginServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">String name = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">String password = request.getParameter(<span class="string">"userPassword"</span>);</span><br><span class="line"></span><br><span class="line">UserInfo userInfo = <span class="keyword">new</span> UserInfo(name, password);</span><br><span class="line"><span class="keyword">boolean</span> result = <span class="keyword">new</span> DalidateUserInfo().vaildateUserInfo(userInfo);</span><br><span class="line"><span class="keyword">if</span> (result) &#123;</span><br><span class="line"><span class="comment">// Sends a temporary redirect response to the client using thespecified redirect</span></span><br><span class="line"><span class="comment">// location URL and clears the buffer.</span></span><br><span class="line">response.sendRedirect(<span class="string">"weclome.jsp"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">response.sendRedirect(<span class="string">"error.jsp"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em>用于操作用户信息的接口.</em></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.servlet.model;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.servlet.bean.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: LoginDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 操作用户信息的接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 8, 2019 5:53:53 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfoDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">vaildateUserInfo</span><span class="params">(UserInfo userInfo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em><code>模型(model)</code> : 实现了操作用户信息接口的类.</em></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.servlet.modImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.servlet.bean.UserInfo;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.servlet.model.UserInfoDao;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.servlet.util.JDBCUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: DalidateUserInfo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 验证用户的身份信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuangYuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Apr 8, 2019 4:55:27 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DalidateUserInfo</span> <span class="keyword">implements</span> <span class="title">UserInfoDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String sql = <span class="string">"SELECT name,password FROM user WHERE NAME=? AND PASSWORD=?"</span>;</span><br><span class="line"><span class="comment">// 节省JDBC连接资源.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Connection connection = JDBCUtil.getConnection();</span><br><span class="line"><span class="keyword">private</span> PreparedStatement preparedStatement;</span><br><span class="line"><span class="keyword">private</span> ResultSet resultSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">vaildateUserInfo</span><span class="params">(UserInfo userInfo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">preparedStatement.setString(<span class="number">1</span>, userInfo.getName());</span><br><span class="line">preparedStatement.setString(<span class="number">2</span>, userInfo.getPassword());</span><br><span class="line"></span><br><span class="line">resultSet = preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtil.freeResource(<span class="keyword">null</span>, preparedStatement, resultSet);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em><code>视图(view)</code> : 用户登录界面.:</em></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Login in<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"LoginServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>password<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"login in"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em>日记 : 今天做了大学第一个兼职!在一个购物广场旁折风车,串风车,固定风车…中午吃坐在地上吃盒饭时让我突然想起了四年前撤学外出的自己,难忘的是青春哟!计划把外快买书嘿嘿嘿..(っ•̀ω•́)っ✎⁾⁾⁾</em></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一个关于JSP的简单MVC案例&quot;&gt;&lt;a href=&quot;#一个关于JSP的简单MVC案例&quot; class=&quot;headerlink&quot; title=&quot;一个关于JSP的简单MVC案例&quot;&gt;&lt;/a&gt;一个关于&lt;code&gt;JSP&lt;/code&gt;的简单&lt;code&gt;MVC&lt;/code&gt;案例
      
    
    </summary>
    
    
      <category term="JSP" scheme="http://yoursite.com/tags/JSP/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 过滤器学习笔记</title>
    <link href="http://yoursite.com/2019/04/10/jQuery-%E8%BF%87%E6%BB%A4%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/04/10/jQuery-过滤器学习笔记/</id>
    <published>2019-04-10T01:59:17.000Z</published>
    <updated>2019-04-10T03:07:20.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery-初学过滤器总结"><a href="#jQuery-初学过滤器总结" class="headerlink" title="jQuery 初学过滤器总结"></a>jQuery 初学过滤器总结</h2><h3 id="jQuery-过滤器分类"><a href="#jQuery-过滤器分类" class="headerlink" title="jQuery 过滤器分类"></a>jQuery 过滤器分类</h3><ul><li><em>基础过滤器</em></li><li><em>内容过滤器</em></li><li><em>子元素过滤器</em></li><li><em>可见性过滤器</em></li></ul><h3 id="jQuery-基础过滤器"><a href="#jQuery-基础过滤器" class="headerlink" title="jQuery 基础过滤器"></a>jQuery 基础过滤器</h3><ol><li><em><code>:header</code> : 过滤器用于筛选所有标题元素.从’h1’到’h6’均在此选择范围内.</em></li><li><em><code>:eq()</code> : 过滤器用于选择指定序号为’n’的元素,序号从0开始.</em></li><li><em><code>gt()</code> : 过滤器用于选择大于序号为’n’的元素,序号从0开始.</em></li><li><em><code>lt()</code> : 过滤器用于选择所有小于序号为’n’的元素,序号从0开始.</em></li><li><em><code>:first</code> : 过滤器用于筛选第一个符合条件的元素.</em></li><li><em><code>:last</code> : 过滤器用于筛选最后一个符合条件的元素.</em></li><li><em><code>even</code> : 过滤器用于筛选符合条件的偶数个元素.</em></li><li><em><code>odd</code> : 过滤器用于筛选符合条件的奇数个元素.</em></li><li><em><code>not()</code> : 过滤器用于筛选所有不符合条件的元素.</em></li></ol><ul><li><p><em>jQuery 基础过滤器示例</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery 基础过滤器总结<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../../jQuerySource/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--':header' : 过滤器用于筛选所有标题元素.从&lt;h1&gt;到&lt;h6&gt;均在此选择范围内 --&gt;</span></span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$(":header").css("background-color", "palegreen");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--':eq()' : 过滤器用于选择指定序号为'n'的元素,序号从0开始 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--'gt()' : 过滤器用于选择大于序号为'n'的元素,序号从0开始 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--'lt()' : 过滤器用于选择所有小于序号为'n'的元素,序号从0开始 --&gt;</span></span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="xml">//'equal' : 影响的是第三行的列表选项元素<span class="tag">&lt;<span class="name">li</span>&gt;</span>.</span></span><br><span class="line"><span class="undefined">$("li:eq(2)").css("border", "1px solid #00FFFF");</span></span><br><span class="line"><span class="undefined">//'less than' : 影响的是第三行之后的所有列表选项.</span></span><br><span class="line"><span class="undefined">$("li:gt(2)").css("border", "1px solid blue");</span></span><br><span class="line"><span class="undefined">//'greater than' : 影响的是第三行之前的所有列表选项.</span></span><br><span class="line"><span class="undefined">$("li:lt(2)").css("border", "1px solid red");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--':first' : 过滤器用于筛选第一个符合条件的元素 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--':last' : 过滤器用于筛选最后一个符合条件的元素 --&gt;</span></span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">//':first()' : 过滤器用于筛选第一个符合条件的元素.</span></span><br><span class="line"><span class="undefined">$("p:first").css("border", "1px solid lawngreen");</span></span><br><span class="line"><span class="undefined">//':last()'  : 过滤器用于筛选最后一个符合条件的元素.</span></span><br><span class="line"><span class="undefined">$("p:last").css("background-color", "bisque");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--'even' : 过滤器用于筛选符合条件的偶数个元素 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--'odd' : 过滤器用于筛选符合条件的奇数个元素 --&gt;</span></span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">//':even' : 过滤器用于筛选符合条件的偶数个元素.</span></span><br><span class="line"><span class="undefined">$("div#even_old tr:even").css("background-color", "lightblue");</span></span><br><span class="line"><span class="undefined">//':odd' : 过滤器用于筛选符合条件的奇数个元素.</span></span><br><span class="line"><span class="undefined">$("div#even_old tr:odd").css("background-color", "silver");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--'not()' : 过滤器用于筛选所有不符合条件的元素 --&gt;</span></span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">//注意:为避免冲突不能同时使用两行该过滤器,如果要同时除去两个段落元素可以使用如下语法规则.</span></span><br><span class="line"><span class="undefined">$(":not(div#eq_gt_lt ul li,div#first_last p)").css("border", "0.5px solid magenta");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div &#123;</span></span><br><span class="line"><span class="undefined">width: 160px;</span></span><br><span class="line"><span class="undefined">height: 180px;</span></span><br><span class="line"><span class="undefined">border: 1px solid;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">margin: 10px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">ul &#123;</span></span><br><span class="line"><span class="undefined">width: 80px;</span></span><br><span class="line"><span class="undefined">height: auto;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>jQuery 基础过滤器总结<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"eq_gt_lt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>第一章<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>第二章<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>第三章<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>第四章<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>第五章<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"first_last"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第一个段落元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第二个段落元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第三个段落元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"even_old"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"160"</span> <span class="attr">height</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;caption&gt;table&lt;/caption&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>jQuery 基础过滤器示例图</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/10/jQuery-过滤器学习笔记/jQuery-基础过滤器示例图.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><h3 id="jQuery-内容过滤器"><a href="#jQuery-内容过滤器" class="headerlink" title="jQuery 内容过滤器"></a>jQuery 内容过滤器</h3><ol><li><em><code>:parent()</code> : 用于选择包含子节点(子元素和文本)的元素,和<code>:empty()</code>恰相反哟.</em></li><li><em><code>:empty()</code> : 用于选择未包含子节点(子元素和文本的元素).</em></li><li><em><code>:contains()</code> : 用于筛选出所有包含指定文本内容的元素.</em></li><li><em><code>:has()</code> : 用于选择包含指定选择器的元素.</em></li></ol><ul><li><p><em>jQuery 内容过滤器示例</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery 内容过滤器总结<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../../jQuerySource/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--':contains()' : 用于筛选出所有包含指定文本内容的元素 --&gt;</span></span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("p:contains('瘦西湖')").css("color", "red");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--':empty()' : 用于选择未包含子节点(子元素和文本的元素) --&gt;</span></span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("div#empty td:empty").css("background", "darkgray");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--':parent()' : 用于选择包含子节点(子元素和文本)的元素,和':empty()'恰相反哟 --&gt;</span></span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("div#parent td:parent").css("background-color", "lightblue");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--':has()' : 用于选择包含指定选择器的元素 --&gt;</span></span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="xml">//选择包含<span class="tag">&lt;<span class="name">strong</span>&gt;</span>标签的<span class="tag">&lt;<span class="name">p</span>&gt;</span>元素.</span></span><br><span class="line"><span class="undefined">$("p:has(strong)").css("background", "khaki");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div &#123;</span></span><br><span class="line"><span class="undefined">width: 150px;</span></span><br><span class="line"><span class="undefined">height: 230px;</span></span><br><span class="line"><span class="undefined">border: 1px solid;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">margin: 10px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>jQuery 内容过滤器总结<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"contains"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>大明寺<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>瘦西湖北门<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>观音山<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>瘦西湖南门<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>扬州动植物园<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>瘦西湖东门<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"empty"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"150"</span> <span class="attr">height</span>=<span class="string">"230"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"150"</span> <span class="attr">height</span>=<span class="string">"230"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"has"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是段落元素..<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是<span class="tag">&lt;<span class="name">strong</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>元素..<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是<span class="tag">&lt;<span class="name">span</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">span</span>&gt;</span>元素..<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是段落元素..<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是段落元素..<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>jQuery 内容过滤器示例图</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/10/jQuery-过滤器学习笔记/jQuery-内容过滤器示例图.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><h3 id="jQuery-子过滤器"><a href="#jQuery-子过滤器" class="headerlink" title="jQuery 子过滤器"></a>jQuery 子过滤器</h3><ol><li><em><code>:nth-child</code> : 用于筛选页面上每个父元素中的第’n’个子元素.序号从1开始计数</em></li><li><em><code>:first-child</code> : 过滤器用于筛选页面上每个父元素中的第一个子元素.</em></li><li><em><code>:last-child</code> : 过滤器用于筛选页面上每个父元素中的最后一个子元素.</em></li><li><em><code>:only</code> : 用于筛选所有在父元素中有且只有一个的子元素.</em></li></ol><ul><li><p><em>jQuery 子过滤器示例</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery 子过滤器总结<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../../jQuerySource/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--':first-child' : 过滤器用于筛选页面上每个父元素中的第一个子元素 --&gt;</span></span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("div#firstChild ul li:first-child").css(&#123;</span></span><br><span class="line"><span class="undefined">fontWeight: "bold",</span></span><br><span class="line"><span class="undefined">color: "red"</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--':last-child' : 过滤器用于筛选页面上每个父元素中的最后一个子元素 --&gt;</span></span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("div#lastChild p:last-child").css(&#123;</span></span><br><span class="line"><span class="undefined">fontWeight: "bold",</span></span><br><span class="line"><span class="undefined">color: "#0000FF"</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--':only' : 用于筛选所有在父元素中有且只有一个的子元素 --&gt;</span></span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("div#onlyChild ul li:only-child").css(&#123;</span></span><br><span class="line"><span class="undefined">fontWeight: "bold",</span></span><br><span class="line"><span class="undefined">color: "chartreuse"</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--':nth-child' : 用于筛选页面上每个父元素中的第'n'个子元素.序号从1开始计数 --&gt;</span></span></span><br><span class="line"><span class="undefined">// $(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">// //筛选奇数项子元素.</span></span><br><span class="line"><span class="undefined">// $("ul#item01 li:nth-child(odd)").css("color", "red");</span></span><br><span class="line"><span class="undefined">// //选择第一个子元素.</span></span><br><span class="line"><span class="undefined">// $("ul#item02 li:nth-child(2)").css("color", "red");</span></span><br><span class="line"><span class="undefined">// //选择第3n+2个子元素.</span></span><br><span class="line"><span class="undefined">// $("ul#item03 li:nth-child(3n+2)").css("color", "red);</span></span><br><span class="line"><span class="undefined">// &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div &#123;</span></span><br><span class="line"><span class="undefined">width: 150px;</span></span><br><span class="line"><span class="undefined">height: 180px;</span></span><br><span class="line"><span class="undefined">border: 1px solid;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">margin: 10px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">ul &#123;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>jQuery 子过滤器总结<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"firstChild"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Pear<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Grape<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Bread<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lastChild"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落元素01..<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落元素02..<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落元素03..<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落元素05..<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"onlyChild"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>第一个子元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>第二个子元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>唯一的子元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">无标签的文本内容..</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nthChild"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"item01"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- li:nth-child(odd): 筛选奇数项元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"item02"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- li:nth-child(2): 筛选第2个元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>c<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>d<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>e<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"item03"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- li:nth-child(3n+2): 筛选第3n+2个元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>jQuery 子过滤器示例图</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/10/jQuery-过滤器学习笔记/jQuery-子过滤器示例图.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><h3 id="jQuery-可见性过滤器"><a href="#jQuery-可见性过滤器" class="headerlink" title="jQuery 可见性过滤器"></a>jQuery 可见性过滤器</h3><ol><li><em><code>:hidden</code> : 过滤器用于筛选出所有处于隐藏状态的元素.</em></li><li><em><code>:visible</code> : 过滤器用于筛选出所有处于可见状态的元素.</em></li></ol><ul><li><p><em>jQuery 可见性过滤器示例</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery 可见性选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../../jQuerySource/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--':hidden' : 过滤器用于筛选出所有处于隐藏状态的元素 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--':visible' : 过滤器用于筛选出所有处于可见状态的元素 --&gt;</span></span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">//选择处于隐藏状态的div元素.</span></span><br><span class="line"><span class="undefined">//find(selector): 用于查找处于可见状态的元素.该方法可以返回符合条件的元素的对象数组.</span></span><br><span class="line"><span class="undefined">var hideDiv = $("body").find("div:hidden");</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">//选择处于隐藏状态的input元素.</span></span><br><span class="line"><span class="undefined">//$(div#test01): 表示在id="test01"的div元素中查找.</span></span><br><span class="line"><span class="undefined">var hideInput = $("div#test01").find("input:hidden");</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">//选择处于可见状态的input元素.</span></span><br><span class="line"><span class="undefined">var visbleInput = $("div.test02").find("input:visible");</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">//选择处于可见状态的div元素.</span></span><br><span class="line"><span class="undefined">var visbleDiv = $("body").find("div:visible");</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">window.alert("处于隐藏状态的div元素有:" + hideDiv.length +</span></span><br><span class="line"><span class="undefined">"个!\n处于隐藏状态的input元素有:" + hideInput.length + "个 !" +</span></span><br><span class="line"><span class="undefined">"\n处于显示状态的div元素有 : " + visbleDiv.length + "个!" +</span></span><br><span class="line"><span class="undefined">"\n处于显示状态的input元素有 : " + visbleInput.length + "个!");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 隐藏状态的div元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span>display:none<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 显示状态的div元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test01"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 隐藏状态的input元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 显示状态的div元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test02"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 显示状态的input元素 --&gt;</span></span><br><span class="line">name : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"userpassword"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>jQuery 可见性过滤器示例图</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/10/jQuery-过滤器学习笔记/jQuery-可见性过滤器示例图.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><ul><li><em>Ok,学习笔记很简约,毕竟初学<code>jQuery</code>嘛.后期会不断更新我学习<code>jQuery</code>的学习笔记的(っ•̀ω•́)っ✎⁾⁾ ~ 最近养成了晨跑和夜跑的好习惯,也改掉了熬夜及大量饮咖啡的坏习惯,只想证明: 我会努力让自己更喜欢自己 !让你们喜欢我(✪ω✪) ~</em> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jQuery-初学过滤器总结&quot;&gt;&lt;a href=&quot;#jQuery-初学过滤器总结&quot; class=&quot;headerlink&quot; title=&quot;jQuery 初学过滤器总结&quot;&gt;&lt;/a&gt;jQuery 初学过滤器总结&lt;/h2&gt;&lt;h3 id=&quot;jQuery-过滤器分类&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Java Servlet API</title>
    <link href="http://yoursite.com/2019/04/08/Java-Servlet-API/"/>
    <id>http://yoursite.com/2019/04/08/Java-Servlet-API/</id>
    <published>2019-04-08T01:42:24.000Z</published>
    <updated>2019-04-08T02:19:43.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Servlet-API"><a href="#学习笔记-Servlet-API" class="headerlink" title="学习笔记 : Servlet API"></a>学习笔记 : Servlet API</h2><ul><li><em>Servlet 体系结构图如下</em></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/08/Java-Servlet-API/ServletAPI.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><h3 id="Servlet-2-5-示例程序"><a href="#Servlet-2-5-示例程序" class="headerlink" title="Servlet 2.5 示例程序"></a>Servlet 2.5 示例程序</h3><ul><li><p><em>web.xml</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Servlet_basic_lifecycle<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>GlobalParamName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Web容器中的初始化参数值 ..<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sameName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>pers.huangyuhui.servlet.test.ServletAPI<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ServletParamName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>当前Servlet的初始化参数值 ..<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sameName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ServletAPI<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>Servlet program</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ServletConfig 接口中的方法解析如下 : </span></span><br><span class="line"><span class="comment"> *  1.ServletContext getServletContext(): 获取Servlet上下文对象,如: application.. </span></span><br><span class="line"><span class="comment"> *  2.String getInitParameter(String name): 在当前Servlet范围内,获取名为name的参数. ...</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * ServletContext类中的常用方法解析 : </span></span><br><span class="line"><span class="comment"> *  1.getContextPath(): 相对路径. GetRealPath(): 绝对路径.</span></span><br><span class="line"><span class="comment"> *  2.String getInitParameter(String name): 在当前Web容器范围内,获取名为name的参数值(初始化参数值).</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletAPI</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4244028101944729741L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">//super.init();</span></span><br><span class="line">System.out.println(<span class="string">"( Servlet 2.5 )This is init() .."</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取当前Servlet的初始化参数.</span></span><br><span class="line"><span class="comment"> * String getInitParameter(String name): 在当前Servlet范围内,获取名为name的参数.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String  value = <span class="keyword">super</span>.getInitParameter(<span class="string">"ServletParamName"</span>);  <span class="comment">//web.xml</span></span><br><span class="line">System.out.println(<span class="string">"当前的Servlet的参数`ServletParamName`的值为 : "</span>+value);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取当前Web容器的初始化参数.</span></span><br><span class="line"><span class="comment"> * String getInitParameter(String name): 在当前Web容器范围内,获取名为name的参数值(初始化参数值).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">String globalValue = servletContext.getInitParameter(<span class="string">"GlobalParamName"</span>);  <span class="comment">//web.xml</span></span><br><span class="line">System.out.println(<span class="string">"当前Web容器的参数`GobalParamName`的值为 : "</span>+globalValue);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//super.doGet(req, resp);</span></span><br><span class="line">System.out.println(<span class="string">"( Servlet 2.5 )service() -&gt; doGet()+doPost() .."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//super.doPost(req, resp);</span></span><br><span class="line">doGet(req, resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//super.destroy();</span></span><br><span class="line">System.err.println(<span class="string">"( Servlet 2.5 )This is destory() .."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*### The result be shown as followed : </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Apr 06, 2019 6:45:24 PM org.apache.jasper.servlet.TldScanner scanJars</span></span><br><span class="line"><span class="comment">INFO: At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.</span></span><br><span class="line"><span class="comment">( Servlet 2.5 )This is init() ..&lt;———the result</span></span><br><span class="line"><span class="comment">当前的Servlet的参数`ServletParamName`的值为 : 当前Servlet的初始化参数值 ..&lt;———the result</span></span><br><span class="line"><span class="comment">当前Web容器的参数`GobalParamName`的值为 : Web容器中的初始化参数值 ..                &lt;———the result</span></span><br><span class="line"><span class="comment">Apr 06, 2019 6:45:24 PM org.apache.jasper.servlet.TldScanner scanJars</span></span><br><span class="line"><span class="comment">INFO: At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.</span></span><br><span class="line"><span class="comment">Apr 06, 2019 6:45:25 PM org.apache.jasper.servlet.TldScanner scanJars</span></span><br><span class="line"><span class="comment">INFO: At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.</span></span><br><span class="line"><span class="comment">Apr 06, 2019 6:45:25 PM org.apache.coyote.AbstractProtocol start</span></span><br><span class="line"><span class="comment">INFO: Starting ProtocolHandler ["http-nio-8080"]</span></span><br><span class="line"><span class="comment">Apr 06, 2019 6:45:25 PM org.apache.coyote.AbstractProtocol start</span></span><br><span class="line"><span class="comment">INFO: Starting ProtocolHandler ["ajp-nio-8009"]</span></span><br><span class="line"><span class="comment">Apr 06, 2019 6:45:25 PM org.apache.catalina.startup.Catalina start</span></span><br><span class="line"><span class="comment">INFO: Server startup in [3,136] milliseconds</span></span><br><span class="line"><span class="comment">( Servlet 2.5 )service() -&gt; doGet()+doPost() ..&lt;———the result</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Servlet-3-0-示例程序"><a href="#Servlet-3-0-示例程序" class="headerlink" title="Servlet 3.0 示例程序"></a>Servlet 3.0 示例程序</h3><ul><li><p><em>web.xml</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ServletAPI_3.0<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     注意: 全局的Web容器的参数是无法通过注解来配置的.毕竟注解只隶属于具体的一个Servlet,因此无法为整个Web容器设置初始化参数.</span></span><br><span class="line"><span class="comment">     而全局的Web参数并不属任何一个Servlet.如果使用Servlet 3.0需要在web.xml配置文件中初始化该参数.</span></span><br><span class="line"><span class="comment">    毕竟web.xml是属于整个容器的配置文件.</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>GobalParamName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>GlobalParamValue<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>Servlet program</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通过注解为当前Servlet初始化参数.如下所示.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(value=<span class="string">"/ServletAPI"</span>,loadOnStartup=<span class="number">1</span>,initParams= &#123;<span class="meta">@WebInitParam</span>(name=<span class="string">"ServletParamName"</span>,value=<span class="string">"ServletParamValue"</span>)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletAPI</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4244028101944729741L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">//super.init();</span></span><br><span class="line">System.out.println(<span class="string">"( Servlet 3.0 )This is init() .."</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取当前Servlet的初始化参数.</span></span><br><span class="line"><span class="comment"> * String getInitParameter(String name): 在当前Servlet范围内,获取名为name的参数.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String  value = <span class="keyword">super</span>.getInitParameter(<span class="string">"ServletParamName"</span>);  <span class="comment">//web.xml</span></span><br><span class="line">System.out.println(<span class="string">"当前的Servlet的参数`ServletParamName`的值为 : "</span>+value);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取当前Web容器的初始化参数.</span></span><br><span class="line"><span class="comment"> * String getInitParameter(String name): 在当前Web容器范围内,获取名为name的参数值(初始化参数值).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">String globalValue = servletContext.getInitParameter(<span class="string">"GlobalParamName"</span>);  <span class="comment">//web.xml</span></span><br><span class="line">System.out.println(<span class="string">"当前Web容器的参数`GobalParamName`的值为 : "</span>+globalValue);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//super.doGet(req, resp);</span></span><br><span class="line">System.out.println(<span class="string">"( Servlet 3.0 )service() -&gt; doGet()+doPost() .."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//super.doPost(req, resp);</span></span><br><span class="line">doGet(req, resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//super.destroy();</span></span><br><span class="line">System.err.println(<span class="string">"( Servlet 3.0 )This is destory() .."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*###The result be shown as followed : </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Apr 07, 2019 6:52:11 PM org.apache.jasper.servlet.TldScanner scanJars</span></span><br><span class="line"><span class="comment">INFO: At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.</span></span><br><span class="line"><span class="comment">( Servlet 3.0 )This is init() ..&lt;———the result</span></span><br><span class="line"><span class="comment">当前的Servlet的参数`ServletParamName`的值为 : ServletParamValue    &lt;———the result</span></span><br><span class="line"><span class="comment">当前Web容器的参数`GobalParamName`的值为 : GlobalParamValue        &lt;———the result</span></span><br><span class="line"><span class="comment">Apr 07, 2019 6:52:11 PM org.apache.coyote.AbstractProtocol start</span></span><br><span class="line"><span class="comment">INFO: Starting ProtocolHandler ["http-nio-8080"]</span></span><br><span class="line"><span class="comment">Apr 07, 2019 6:52:11 PM org.apache.coyote.AbstractProtocol start</span></span><br><span class="line"><span class="comment">INFO: Starting ProtocolHandler ["ajp-nio-8009"]</span></span><br><span class="line"><span class="comment">Apr 07, 2019 6:52:11 PM org.apache.catalina.startup.Catalina start</span></span><br><span class="line"><span class="comment">INFO: Server startup in [2,502] milliseconds</span></span><br><span class="line"><span class="comment">( Servlet 3.0 )service() -&gt; doGet()+doPost() ..&lt;———the result</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Servlet-API&quot;&gt;&lt;a href=&quot;#学习笔记-Servlet-API&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Servlet API&quot;&gt;&lt;/a&gt;学习笔记 : Servlet API&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;
      
    
    </summary>
    
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Back up the Hexo blog</title>
    <link href="http://yoursite.com/2019/04/07/Back-up-the-Hexo-blog/"/>
    <id>http://yoursite.com/2019/04/07/Back-up-the-Hexo-blog/</id>
    <published>2019-04-07T01:55:40.000Z</published>
    <updated>2019-04-07T03:21:13.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章主题-备份及恢复Hexo博客的详细教程"><a href="#文章主题-备份及恢复Hexo博客的详细教程" class="headerlink" title="文章主题 : 备份及恢复Hexo博客的详细教程"></a>文章主题 : 备份及恢复<code>Hexo</code>博客的详细教程</h2><ul><li><em>备份原理: <code>master branch</code>: 管理<code>Hexo</code>生成的静态网页.  <code>HexoBackup branch</code>: 管理<code>Hexo 重要的本地源文件及配置文件.</code></em></li></ul><h3 id="前言-如果你利用Hexo搭建了一个静态的网站用于写博客-会发现自己利用Hexo-deploy的都是Hexo-generate生成的静态网页-而下面的目录并没有被push到远程仓库"><a href="#前言-如果你利用Hexo搭建了一个静态的网站用于写博客-会发现自己利用Hexo-deploy的都是Hexo-generate生成的静态网页-而下面的目录并没有被push到远程仓库" class="headerlink" title="前言 : 如果你利用Hexo搭建了一个静态的网站用于写博客,会发现自己利用Hexo deploy的都是Hexo generate生成的静态网页.而下面的目录并没有被push到远程仓库 !"></a>前言 : 如果你利用<code>Hexo</code>搭建了一个静态的网站用于写博客,会发现自己利用<code>Hexo deploy</code>的都是<code>Hexo generate</code>生成的静态网页.而下面的目录并没有被<code>push</code>到远程仓库 !</h3><ul><li><em>需要备份的目录及配置文件</em></li></ul><ol><li><code>source</code>目录 : 博客文章的<code>.md</code>文件.(需要备份)</li><li><code>themes</code> 目录 : 主题文件夹.(需要备份)</li><li><code>scaffolds</code>目录 : 文章的模板.(需要备份)</li><li><code>package.json</code> : 安装包的名称.(需要备份)</li><li><code>.gitignore</code> : 限定在<code>push</code>时哪些文件可以忽略.(需要备份)</li><li><code>_config.yml</code> : 站点的配置文件.(需要备份)</li></ol><ul><li><em>不需要备份的目录及配置文件</em></li></ul><ol><li><code>node_modules/</code> : 是安装包的目录，在执行<code>npm install</code>的时候会重新生成.(不需要备份)</li><li><code>.git/</code> : 主题和站点都有，标志这是一个git项目.(不需要备份)</li><li><code>public</code>是<code>hexo generate</code>生成的静态网页.(不需要备份)</li><li><code>.deploy_git</code> : 同<code>3</code>,<code>hexo g</code>也会生成.(不需要备份)</li><li><code>db.json</code> : 配置文件.(不需要备份)</li></ol><ul><li><em>注 : 不需要拷贝的文件正是<code>.gitignore</code>中所忽略的哟 !</em></li></ul><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><ol><li>创建<code>GitHub</code>仓库<code>Username.github.io</code>如果同名仓库之前已经创建,请将之前的仓库改名,新建的仓库必须是<code>Username.github.io</code>.</li><li>在<code>Username.github.io</code>仓库中创建一个新的分支<code>HexoBackup</code>.(此时的默认分支是: <code>master</code>)</li><li>在该仓库中的<code>Setting</code>中将<code>HexoBackup</code>修改为为默认分支.</li><li>将刚刚创建的新仓库<code>clone</code>至本地后将之前你存放<code>Hexo bolg</code>文件夹中的<code>_config.yml</code>,<code>themes/</code>,<code>source/</code>,<code>scaffolds/</code>,<code>package.json</code>,<code>.gitignore</code>复制至你所<code>clone</code>下来的<code>Username.github.io</code>文件夹中.</li><li>将<code>themes/theme-name/</code>中的<code>.git/</code>删除,否则无法将主题文件夹<code>push</code>到远程分支.(<code>易错点 : 详情见文章最后的注意事项</code>)</li><li>在<code>Username.github.io</code>文件夹执行<code>npm install</code>和<code>npm install hexo-deployer-git</code>(注意: 此时在该文件内的分支名应该显示为:<code>HexoBackup</code>).</li><li>通过执行<code>git add .</code>,<code>git commit -m &quot;A description of the information submitted&quot;</code>,<code>git push origin HexoBackup</code>来提交<code>Hexo bolg</code>网站的源文件.</li><li>如果更新博客文章后可以通过执行<code>hexo g -d</code>生成静态网页部署到<code>Github</code>上.</li></ol><h3 id="更新-在本地对博客修改-包括修改主题样式-发布新文章等"><a href="#更新-在本地对博客修改-包括修改主题样式-发布新文章等" class="headerlink" title="更新( 在本地对博客修改: 包括修改主题样式,发布新文章等.. )"></a>更新( 在本地对博客修改: 包括修改主题样式,发布新文章等.. )</h3><ul><li><em>以下两个步骤没有严格的顺序,小伙伴们随心所欲呗 ~</em></li></ul><ol><li>首先执行<code>hexo g -d</code>生成静态网页部署至<code>Github</code>上.</li><li>其次依次执行<code>git add .</code>,<code>git commit -m &quot;&quot;</code>,<code>git push origin HexoBackup</code>来提交<code>Hexo bolg</code>网站源文件.</li></ol><h3 id="恢复-重装电脑后-或者在其它电脑上想修改自己的博客"><a href="#恢复-重装电脑后-或者在其它电脑上想修改自己的博客" class="headerlink" title="恢复 ( 重装电脑后,或者在其它电脑上想修改自己的博客.. )"></a>恢复 ( 重装电脑后,或者在其它电脑上想修改自己的博客.. )</h3><ol><li>安装<code>git</code>.</li><li>安装<code>Nodejs</code>和<code>npm</code>.</li><li>将博客仓库<code>clone</code>到本地.</li><li>在文件夹内执行命令<code>npm install hexo-cli -g</code>,<code>npm install</code>,<code>npm install hexo-deployer-git</code>.</li></ol><h3 id="注意事项-Hexo无法备份themes主题目录中的部分theme"><a href="#注意事项-Hexo无法备份themes主题目录中的部分theme" class="headerlink" title="注意事项 ( Hexo无法备份themes主题目录中的部分theme.. )"></a>注意事项 ( <code>Hexo</code>无法备份<code>themes</code>主题目录中的部分<code>theme</code>.. )</h3><ul><li><p><em>如果想正常备份你所喜欢的<code>theme</code>的话,可以在博客目录运行如下命令 :</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached themes\theme-name\</span><br><span class="line">rm <span class="string">'themes/theme-name'</span></span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with <span class="string">'origin/HexoBackup'</span>.</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">        deleted:    themes/theme-name</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        themes/theme-name/</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后再执行: `git add themes/theme-name/` 就会发现可以成功备份该主题了哟 !</span></span><br></pre></td></tr></table></figure></li><li><p><strong>原因分析 : 这是因为用到了<code>git</code>的子模块(<code>git submodule</code>)功能,既你在你的<code>git</code>项目里<code>clone</code>的他人的项目.在你的主项目的<code>git</code>库里,子模块只是一个<code>HEAD</code>指针,指向子模块的<code>commit</code> ..详情见下述参考的博客文章哟 (っ•̀ω•́)っ✎⁾⁾</strong></p></li></ul><ul><li><em>参考博客文章如下( 甚是感谢 )</em> :</li><li><a href="https://blog.itswincer.com/posts/7efd2818/" target="_blank" rel="noopener">https://blog.itswincer.com/posts/7efd2818/</a></li><li><a href="https://hoxis.github.io/hexo-backup-theme-dir.html" target="_blank" rel="noopener">https://hoxis.github.io/hexo-backup-theme-dir.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文章主题-备份及恢复Hexo博客的详细教程&quot;&gt;&lt;a href=&quot;#文章主题-备份及恢复Hexo博客的详细教程&quot; class=&quot;headerlink&quot; title=&quot;文章主题 : 备份及恢复Hexo博客的详细教程&quot;&gt;&lt;/a&gt;文章主题 : 备份及恢复&lt;code&gt;Hex
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Servlet lifecycle</title>
    <link href="http://yoursite.com/2019/04/06/Servlet-lifecycle/"/>
    <id>http://yoursite.com/2019/04/06/Servlet-lifecycle/</id>
    <published>2019-04-06T07:06:10.000Z</published>
    <updated>2019-04-08T01:56:42.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-：Java-Servlet-的生命周期及其解析"><a href="#学习笔记-：Java-Servlet-的生命周期及其解析" class="headerlink" title="学习笔记 ：Java Servlet 的生命周期及其解析"></a>学习笔记 ：Java Servlet 的生命周期及其解析</h2><ul><li><p><em>Tomcat v9.0 + JDK 11 + Google Chrome</em></p></li><li><p><em>Servlet lifecycle</em></p></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/06/Servlet-lifecycle/lifecycle.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><h3 id="Servlet-2-5-示例"><a href="#Servlet-2-5-示例" class="headerlink" title="Servlet 2.5 示例"></a>Servlet 2.5 示例</h3><ul><li><p><em>JSP program</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=ISO-8859-1"</span> <span class="attr">pageEncoding</span>=<span class="string">"ISO-8859-1"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"ISO-8859-1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Servlet 2.5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ServletLifecyle"</span>&gt;</span>doGet : Servlet 3.0<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意: form的默认提交方式为get --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"ServletLifecyle"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"doGet "</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"ServletLifecyle"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"doPost"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>Servlet program</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletLifecyle</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//super.init();</span></span><br><span class="line">System.out.println(<span class="string">"(Servlet 2.5)init() .."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//super.doGet(req, resp);</span></span><br><span class="line">System.out.println(<span class="string">"service() -&gt; doGet() + doPost() .."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//super.doPost(req, resp);</span></span><br><span class="line"><span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//super.destroy();</span></span><br><span class="line">System.out.println(<span class="string">"destory() .."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 1-第一次点击请求连接时Servlet响应的结果如下 :</span></span><br><span class="line"><span class="comment">Apr 05, 2019 10:27:32 PM org.apache.catalina.core.StandardContext reload</span></span><br><span class="line"><span class="comment">INFO: Reloading Context with name [/Servlet_basic_lifecycle] is completed</span></span><br><span class="line"><span class="comment">(Servlet 2.5)init() ..                  &lt;—— the result</span></span><br><span class="line"><span class="comment">service() -&gt; doGet() + doPost() ..      &lt;—— the result</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 2-当返回再次点击链接请求时Servlet响应的结果如下 : </span></span><br><span class="line"><span class="comment">Apr 05, 2019 10:31:05 PM org.apache.catalina.core.StandardContext reload</span></span><br><span class="line"><span class="comment">INFO: Reloading Context with name [/Servlet_basic_lifecycle] is completed</span></span><br><span class="line"><span class="comment">(Servlet 2.5)init() ..&lt;— 第一次点击链接时Servlet的相应结果</span></span><br><span class="line"><span class="comment">service() -&gt; doGet() + doPost() ..&lt;— 第一次点击链接时Servlet的相应结果</span></span><br><span class="line"><span class="comment">service() -&gt; doGet() + doPost() ..&lt;— 第二次点击链接时Servlet的相应结果</span></span><br><span class="line"><span class="comment">service() -&gt; doGet() + doPost() ..&lt;— 第三次点击链接时Servlet的相应结果</span></span><br><span class="line"><span class="comment">service() -&gt; doGet() + doPost() ..&lt;— 第四次点击链接时Servlet的相应结果</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 3-上述来回来点击链接请求后且稍许时间后会发现Servlet自动调用了destory() !!!?</span></span><br><span class="line"><span class="comment">Apr 05, 2019 10:31:05 PM org.apache.catalina.core.StandardContext reload</span></span><br><span class="line"><span class="comment">INFO: Reloading Context with name [/Servlet_basic_lifecycle] is completed</span></span><br><span class="line"><span class="comment">(Servlet 2.5)init() ..</span></span><br><span class="line"><span class="comment">service() -&gt; doGet() + doPost() ..</span></span><br><span class="line"><span class="comment">service() -&gt; doGet() + doPost() ..</span></span><br><span class="line"><span class="comment">service() -&gt; doGet() + doPost() ..</span></span><br><span class="line"><span class="comment">service() -&gt; doGet() + doPost() ..</span></span><br><span class="line"><span class="comment">Apr 05, 2019 10:31:41 PM org.apache.catalina.core.StandardContext reload</span></span><br><span class="line"><span class="comment">INFO: Reloading Context with name [/Servlet_basic_lifecycle] has started</span></span><br><span class="line"><span class="comment">destory() ..</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 由上述1,2,3可得如下结论 : </span></span><br><span class="line"><span class="comment">init() :</span></span><br><span class="line"><span class="comment">    默认情况下第一次访问Servlet时会被执行( 只执行一次 ),扩 : 也可以通过配置web.xml文件使得Tomcat启动时自动执行.(详见下述`web.xml`示例)</span></span><br><span class="line"><span class="comment">service() : </span></span><br><span class="line"><span class="comment">    包括doGet()和doPost(),执行的次数与调用次数成正比.</span></span><br><span class="line"><span class="comment">destory() : </span></span><br><span class="line"><span class="comment">    关闭Tomcat服务时执行一次.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p><em>web.xml</em></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Servlet_basic_lifecycle<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- Servlet 2.5 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sameName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>pers.huangyuhui.servlet.test.ServletLifecyle<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使得tomcat启动时自动加载init()方法,其数字代表: 当有多个Servlet时,规划其启动的顺序,默认值为`-1`. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sameName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ServletLifecyle<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">通过在`web.xml`配置文件中添加<span class="string">'&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;'</span>使得Tomcat启动时自动加载init() !</span><br><span class="line"></span><br><span class="line">INFO: At least one JAR was scanned <span class="keyword">for</span> TLDs yet contained no TLDs. Enable debug logging <span class="keyword">for</span> <span class="keyword">this</span> logger <span class="keyword">for</span> a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.</span><br><span class="line">(Servlet <span class="number">2.5</span>)init() ..&lt;——— the result.</span><br><span class="line">Apr <span class="number">06</span>, <span class="number">2019</span> <span class="number">2</span>:<span class="number">31</span>:<span class="number">09</span> PM org.apache.coyote.AbstractProtocol start</span><br><span class="line">INFO: Starting ProtocolHandler [<span class="string">"http-nio-8080"</span>]</span><br><span class="line">Apr <span class="number">06</span>, <span class="number">2019</span> <span class="number">2</span>:<span class="number">31</span>:<span class="number">09</span> PM org.apache.coyote.AbstractProtocol start</span><br><span class="line">INFO: Starting ProtocolHandler [<span class="string">"ajp-nio-8009"</span>]</span><br><span class="line">Apr <span class="number">06</span>, <span class="number">2019</span> <span class="number">2</span>:<span class="number">31</span>:<span class="number">09</span> PM org.apache.catalina.startup.Catalina start</span><br><span class="line">INFO: Server startup in [<span class="number">2</span>,<span class="number">686</span>] milliseconds</span><br></pre></td></tr></table></figure><h3 id="Servlet-3-0-示例"><a href="#Servlet-3-0-示例" class="headerlink" title="Servlet 3.0 示例"></a>Servlet 3.0 示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Servlet 3.0 较2.5可以通过注解使Tomcat启动时自动加载Servlet 中的初始化方法: init().</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@WebServlet(value="/ServletTest" , loadOnStartup=1)</span></span><br><span class="line"><span class="comment">value : 其为一个字符串数组对象,用于接收多个Servlet,当只有一个Servlet时默认可以不写.</span></span><br><span class="line"><span class="comment">loadOnStartup : 当有多个Servlet时将按照数字大小顺序执行.其默认为-1.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(value=<span class="string">"/ServletTest"</span> , loadOnStartup=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    ······</span><br></pre></td></tr></table></figure><h3 id="总结深究-待解决的问题"><a href="#总结深究-待解决的问题" class="headerlink" title="总结深究 ( 待解决的问题 )"></a>总结深究 ( 待解决的问题 )</h3><h4 id="发现学习中我并没有关闭Tomcat服务器-但自动执行了销毁方法destory-于是查了一些资料-至今还未发现其答案-我认为-应该是Tomcat新版本的特性吧-超时自动销毁Servlet-但是自动调用Destory-时与Service-时间差也太小了吧-36-秒啊"><a href="#发现学习中我并没有关闭Tomcat服务器-但自动执行了销毁方法destory-于是查了一些资料-至今还未发现其答案-我认为-应该是Tomcat新版本的特性吧-超时自动销毁Servlet-但是自动调用Destory-时与Service-时间差也太小了吧-36-秒啊" class="headerlink" title="发现学习中我并没有关闭Tomcat服务器,但自动执行了销毁方法destory() ! 于是查了一些资料,至今还未发现其答案,我认为 : 应该是Tomcat新版本的特性吧(超时自动销毁Servlet?),但是自动调用Destory()时与Service()时间差也太小了吧 ! 36 秒啊 !"></a>发现学习中我并没有关闭<code>Tomcat</code>服务器,但自动执行了销毁方法<code>destory()</code> ! 于是查了一些资料,至今还未发现其答案,我认为 : 应该是<code>Tomcat</code>新版本的特性吧(超时自动销毁Servlet?),但是自动调用<code>Destory()</code>时与<code>Service()</code>时间差也太小了吧 ! 36 秒啊 !</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">### 3-上述来回来点击链接请求后且稍许时间后会发现Servlet自动调用了destory() !!!?</span><br><span class="line">Apr <span class="number">05</span>, <span class="number">2019</span> <span class="number">10</span>:<span class="number">31</span>:<span class="number">05</span> PM org.apache.catalina.core.StandardContext reload</span><br><span class="line">INFO: Reloading Context with name [/Servlet_basic_lifecycle] is completed</span><br><span class="line">(Servlet <span class="number">2.5</span>)init() ..</span><br><span class="line">service() -&gt; doGet() + doPost() ..       &lt;—— the result</span><br><span class="line">service() -&gt; doGet() + doPost() ..       &lt;—— the result</span><br><span class="line">service() -&gt; doGet() + doPost() ..       &lt;—— the result</span><br><span class="line">service() -&gt; doGet() + doPost() ..       &lt;—— the result</span><br><span class="line">Apr <span class="number">05</span>, <span class="number">2019</span> <span class="number">10</span>:<span class="number">31</span>:<span class="number">41</span> PM org.apache.catalina.core.StandardContext reload</span><br><span class="line">INFO: Reloading Context with name [/Servlet_basic_lifecycle] has started</span><br><span class="line">destory() ..    &lt;—— the result ? what happend ! ? (I<span class="string">'m not close the the Tomcat server now)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">······</span></span><br></pre></td></tr></table></figure><ul><li><em>注意 : <code>&lt;——</code> 是本人后期为便于大家审阅代码加上的.</em></li><li><em>后期在不断学习中会完善这些我未知的问题的 ! Stay hungry,Stay foolish.</em></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-：Java-Servlet-的生命周期及其解析&quot;&gt;&lt;a href=&quot;#学习笔记-：Java-Servlet-的生命周期及其解析&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 ：Java Servlet 的生命周期及其解析&quot;&gt;&lt;/a&gt;学习
      
    
    </summary>
    
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Servlet各版本使用详解</title>
    <link href="http://yoursite.com/2019/04/05/Java-Servlet%E5%90%84%E7%89%88%E6%9C%AC%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/04/05/Java-Servlet各版本使用详解/</id>
    <published>2019-04-05T07:22:46.000Z</published>
    <updated>2019-04-05T08:30:14.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="详细讲解各版本Java-Servlet的使用-这次哥哥讲细节-✪ω✪"><a href="#详细讲解各版本Java-Servlet的使用-这次哥哥讲细节-✪ω✪" class="headerlink" title="详细讲解各版本Java Servlet的使用,这次哥哥讲细节 (✪ω✪) !"></a>详细讲解各版本Java Servlet的使用,这次哥哥讲细节 (✪ω✪) !</h2><h3 id="Servlet-2-5-通过配置web-xml文件来映射Servlet-示例代码如下"><a href="#Servlet-2-5-通过配置web-xml文件来映射Servlet-示例代码如下" class="headerlink" title="Servlet 2.5 : 通过配置web.xml文件来映射Servlet ( 示例代码如下 )"></a><code>Servlet 2.5</code> : 通过配置<code>web.xml</code>文件来映射<code>Servlet</code> ( 示例代码如下 )</h3><ul><li><p><em>Servlet program</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7228095681625205247L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"This is doGet .."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">System.out.println(<span class="string">"This is doPost .."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * #(doGet)The result be shown as followed : </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Apr 05, 2019 10:15:33 AM org.apache.catalina.core.StandardContext reload INFO: Reloading Context with</span></span><br><span class="line"><span class="comment"> * name [/Servlet_basic] is completed</span></span><br><span class="line"><span class="comment"> * This is doGet ..</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * #(doPost)The result be shown as followed :</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Apr 05, 2019 10:57:08 AM org.apache.catalina.core.StandardContext reload INFO: Reloading Context with</span></span><br><span class="line"><span class="comment"> * name [/Servlet_basic] is completed </span></span><br><span class="line"><span class="comment"> * This is doPost ..</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * #(doPost —&gt; doGet)The result be shown as followed : </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Apr 05, 2019 11:22:21 AM org.apache.catalina.core.StandardContext reload NFO: Reloading Context with </span></span><br><span class="line"><span class="comment"> * name [/Servlet_basic] is completed</span></span><br><span class="line"><span class="comment"> * This is doGet ..</span></span><br><span class="line"><span class="comment"> * This is doPost ..</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p><em>JSP Progarm</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=ISO-8859-1"</span> <span class="attr">pageEncoding</span>=<span class="string">"ISO-8859-1"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"ISO-8859-1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Servlet 2.5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        href same as : http://localhost:8080/Servlet_basic_version_2.5/FirstServlet </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 注意: 构建路径及`WebContent`都属于 : 根目录.</span></span><br><span class="line"><span class="comment"> JSP中的'/'表示服务器的跟路径.如 : http://localhost:8080/</span></span><br><span class="line"><span class="comment"> web.xml中的'/'表示项目的根路径.如 : http://localhost:8080/Servlet_basic_version_2.5/</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/Servlet_basic_version_2.5/FirstServlet"</span>&gt;</span>doGet : FirstServlet<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意 : `form`的默认提交方式为`get`,所以修改为: method="post" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"FirstServlet"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"doGet "</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"FirstServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"doPost"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>web.xml</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Servlet_basic<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">当程序运行后,点击`HiServlet.jsp`页面中的`url`请求时`web.xml`配置文件中的映射关系如下:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        1.&lt;servlet-mapping&gt; </span></span><br><span class="line"><span class="comment">                ↓</span></span><br><span class="line"><span class="comment">                ↓</span></span><br><span class="line"><span class="comment">        2.请求被根目录(src/WebContent是根目录)下&lt;url-pattern&gt;标签中的Servlet程序拦截.</span></span><br><span class="line"><span class="comment">                ↓</span></span><br><span class="line"><span class="comment">                ↓ </span></span><br><span class="line"><span class="comment">        3.(寻找Servlet.class的桥梁) 匹配与其&lt;servlet-name&gt;名称相同的&lt;servlet&gt;.</span></span><br><span class="line"><span class="comment">                ↓</span></span><br><span class="line"><span class="comment">                ↓</span></span><br><span class="line"><span class="comment">        4.通过&lt;servlet-class&gt;标签中的`Servlet.class`响应用户的请求.</span></span><br><span class="line"><span class="comment">               </span></span><br><span class="line"><span class="comment">    可此得知标签&lt;servlet-name&gt;是&lt;servlet&gt;和&lt;servlet-mapping&gt;之间沟通的桥梁( 其名称任意,但其两者间的名称必须相同 ! )</span></span><br><span class="line"><span class="comment">如不同`Tomcat`则会抛出如下异常信息:</span></span><br><span class="line"><span class="comment">    error..Caused by: java.lang.IllegalArgumentException: Servlet mapping specifies an unknown servlet name [sameName]..</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sameName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>pers.huangyuhui.servlet.test.FirstServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sameName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/FirstServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Servlet-3-0-通过注解来映射相应的Servlet"><a href="#Servlet-3-0-通过注解来映射相应的Servlet" class="headerlink" title="Servlet 3.0 : 通过注解来映射相应的Servlet."></a><code>Servlet 3.0</code> : 通过<code>注解</code>来映射相应的<code>Servlet</code>.</h3><ul><li><p><em>Servlet program</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.Servlet 3.0 与 Servlet 2.5 的区分 :</span></span><br><span class="line"><span class="comment">Servlet 3.0 : 较`Servlet 2.0`不需要在web.xml中配置Servlet映射,但需在Servlet类的定义处上编写注解: @WenServlet("/Servlet url..")其中"/Servlet url.."与Servlet 2.0在web.xml配置文件中&lt;url-pattern&gt;标签中的内容原理是相同的.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.Servlet3.0 响应请求的路线 :</span></span><br><span class="line"><span class="comment">如: 当点击`HiServlet.jsp`中的url链接时其先与@WebServlet中的值进行匹配,如果匹配成功,则说明请求的就是该注解所对应的类.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ServletTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServletTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//response.getWriter().append("Served at: ").append(request.getContextPath());</span></span><br><span class="line">System.out.println(<span class="string">"This is doGet .."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//doGet(request, response);</span></span><br><span class="line">System.out.println(<span class="string">"This is doPost .."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*#The result be shown as followed :</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Apr 05, 2019 12:06:08 PM org.apache.catalina.startup.Catalina start </span></span><br><span class="line"><span class="comment"> * INFO: Server startup in [3,425] milliseconds</span></span><br><span class="line"><span class="comment"> * This is doGet ..    &lt;— 点击`url`链接时`Servlet`触发的响应.</span></span><br><span class="line"><span class="comment"> * This is doPost ..       &lt;— 点击`doPost`按钮时`Servlet`触发的响应.</span></span><br><span class="line"><span class="comment"> * This is doGet ..    &lt;— 点击`doGet`按钮时`Servlet`触发的响应.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p><em>JSP Program</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=ISO-8859-1"</span> <span class="attr">pageEncoding</span>=<span class="string">"ISO-8859-1"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"ISO-8859-1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Servlet 3.0<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ServletTest"</span>&gt;</span>doGet : Servlet 3.0<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"ServletTest"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"doGet "</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"ServletTest"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"doPost"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>web.xml</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无需任何修改 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Servlet_basic_version_3.0<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em><code>JSP</code>运行效果示例图</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/05/Java-Servlet各版本使用详解/Servlet2.5.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><ul><li><strong>常被问到 : 辉仔啊,都<code>大二</code>下学期了呀,怎还是没有女朋友哟 ! 心想 : 是不是太爱<code>Coding</code>了呢 (灬°ω°灬) ~</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;详细讲解各版本Java-Servlet的使用-这次哥哥讲细节-✪ω✪&quot;&gt;&lt;a href=&quot;#详细讲解各版本Java-Servlet的使用-这次哥哥讲细节-✪ω✪&quot; class=&quot;headerlink&quot; title=&quot;详细讲解各版本Java Servlet的使用,这
      
    
    </summary>
    
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Servlet同版本对应的Tomcat及不同版本的web.xml写法</title>
    <link href="http://yoursite.com/2019/04/05/Servlet%E5%90%8C%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94%E7%9A%84Tomcat%E5%8F%8A%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84web-xml%E5%86%99%E6%B3%95/"/>
    <id>http://yoursite.com/2019/04/05/Servlet同版本对应的Tomcat及不同版本的web-xml写法/</id>
    <published>2019-04-05T06:34:34.000Z</published>
    <updated>2019-04-05T07:05:35.071Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tomcat-实现了Java-Servlet规范-Java-Servlet-Pages技术-不同版本的Tomcat支持不同的Servlet及JSP规范"><a href="#Tomcat-实现了Java-Servlet规范-Java-Servlet-Pages技术-不同版本的Tomcat支持不同的Servlet及JSP规范" class="headerlink" title="Tomcat 实现了Java Servlet规范,Java Servlet Pages技术,不同版本的Tomcat支持不同的Servlet及JSP规范."></a><code>Tomcat</code> 实现了<code>Java Servlet</code>规范,<code>Java Servlet Pages</code>技术,不同版本的<code>Tomcat</code>支持不同的<code>Servlet</code>及<code>JSP</code>规范.</h3><ul><li><em>最新示例图如下所示 :</em><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/05/Servlet同版本对应的Tomcat及不同版本的web-xml写法/different-version.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><h3 id="不同版本的web-xml写法如下"><a href="#不同版本的web-xml写法如下" class="headerlink" title="不同版本的web.xml写法如下 :"></a>不同版本的<code>web.xml</code>写法如下 :</h3><ul><li><p><em>web.xml v2.3</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd"&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span>  </span><br><span class="line">   <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>web.xml v2.4</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">id</span>=<span class="string">"WebApp_9"</span> <span class="attr">version</span>=<span class="string">"2.4"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span>   </span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>web.xml v2.5</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>web.xml 3.0</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"3.0"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>web.xml 4.0</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE xml&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Tomcat-实现了Java-Servlet规范-Java-Servlet-Pages技术-不同版本的Tomcat支持不同的Servlet及JSP规范&quot;&gt;&lt;a href=&quot;#Tomcat-实现了Java-Servlet规范-Java-Servlet-Pages技术
      
    
    </summary>
    
    
      <category term="JSP" scheme="http://yoursite.com/tags/JSP/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
      <category term="xml" scheme="http://yoursite.com/tags/xml/"/>
    
      <category term="JDK" scheme="http://yoursite.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>jQuery selector</title>
    <link href="http://yoursite.com/2019/04/04/jQuery-selector/"/>
    <id>http://yoursite.com/2019/04/04/jQuery-selector/</id>
    <published>2019-04-04T10:39:52.000Z</published>
    <updated>2019-04-04T11:10:10.443Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为了配合Java-web项目的学习今天开始学习了jQuery-啦"><a href="#为了配合Java-web项目的学习今天开始学习了jQuery-啦" class="headerlink" title="为了配合Java web项目的学习今天开始学习了jQuery 啦 !"></a>为了配合<code>Java web</code>项目的学习今天开始学习了<code>jQuery</code> 啦 !</h3><ul><li><em>要知道计算机语言之间是互通的,已学习<code>C</code>和<code>Java</code>的我学习<code>jQuery</code>起来是如此的高效,基本一天就可以学习半本书哟..</em></li></ul><h4 id="下面是我下午学习jQuery选择器的总结代码-嘿嘿-案例是不是也很搞笑-高效-呢-啊哈哈-ヾ-◍°∇°◍-ﾉﾞ"><a href="#下面是我下午学习jQuery选择器的总结代码-嘿嘿-案例是不是也很搞笑-高效-呢-啊哈哈-ヾ-◍°∇°◍-ﾉﾞ" class="headerlink" title="下面是我下午学习jQuery选择器的总结代码.嘿嘿,案例是不是也很搞笑(高效)呢 ?! 啊哈哈 ヾ(◍°∇°◍)ﾉﾞ"></a>下面是我下午学习<code>jQuery选择器</code>的总结代码.嘿嘿,案例是不是也很搞笑(高效)呢 ?! 啊哈哈 ヾ(◍°∇°◍)ﾉﾞ</h4><ul><li><p><em>代码示例 ( <code>jQuery vision : jquery-1.12.4.js</code>,目前官方最新版本是: <code>jquery-3.3.1.js</code> )</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery 选择器总结案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../../jQuerySource/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">//全局选择器 (Global Select) : 用于选择文档中所有的元素.</span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("*").css("border", "1px solid red");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">//元素选择器 (Element Select) : 用于选择所有指定标签名称的元素.</span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("p").css("border", "1px solid blue");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">//ID选择器 (ID Select) : 用于选择指定ID名称的单个元素.</span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("#test01").css("border", "1px solid aqua");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">//类选择器 (Class Select) : 用于筛选出具有同一个class属性的所有元素.</span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$(".style01").css("border", "1px solid fuchsia");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">//多重选择器 (Multiple Select) : 适用于需要批量处理的多种元素.</span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("h3,div.style02").css("border", "1px solid forestgreen");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">//属性选择器 (Attribute Select) : 选择具有指定属性要求的元素.</span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("[href$='.cn']").css("background-color", "yellow");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">//表单选择器 (Form Select) : 用于选择指定类型或处于指定状态的表单元素.</span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$(":password").css("border", "2px solid blue");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">//子元素选择器 (Child Select) : 只能选择指定元素的第一层子元素.</span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("ul.ul-2&gt;li").css("background-color", "yellowgreen");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">//后代选择器 (Descendant Select) : 选择指定元素内包含的所有后代元素.比子元素选择器的涵盖范围更广.</span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("div.style04 strong").css("background-color", "chartreuse");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">//后相邻选择器 (Next Adjacent Select) : 用于选择与指定元素相邻的后一个元素.</span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("div.style03+div").css("border", "1px solid brown");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">//后兄弟选择器 (Next Siblings Selector) : 可用于选择指定元素后面跟随的所有符合条件的兄弟节点元素.</span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("div.style04~div").css("border", "1px solid burlywood");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">//CSS 选择器 (CSS Selector) : 用于改变指定HTML元素的CSS属性. </span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">$("#test03 span").css("color", "fuchsia");</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">h4 &#123;</span></span><br><span class="line"><span class="undefined">margin: 0;</span></span><br><span class="line"><span class="undefined">text-align: center;</span></span><br><span class="line"><span class="undefined">font-family: "lucida console";</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">div,</span></span><br><span class="line"><span class="undefined">p &#123;</span></span><br><span class="line"><span class="undefined">width: auto;</span></span><br><span class="line"><span class="undefined">height: 100px;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">padding: 10px;</span></span><br><span class="line"><span class="undefined">margin: 10px;</span></span><br><span class="line"><span class="undefined">font-family: "lucida console";</span></span><br><span class="line"><span class="undefined">border: 1px solid greenyellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>jQuery 选择器总结案例<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test01"</span>&gt;</span></span><br><span class="line">这是一个'div'标签..</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test02"</span>&gt;</span></span><br><span class="line">这是一个'div'标签..</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test03"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个'div'标签..<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"style01"</span>&gt;</span>这是一个'div'标签..<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">这是一个'p'标签..</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"style02"</span>&gt;</span>这是一个'div'标签..<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com.cn"</span>&gt;</span>新浪<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://163.com"</span>&gt;</span>网易<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sohu.com"</span>&gt;</span>搜狐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"style03"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ul-1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ul-2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"style04"</span>&gt;</span></span><br><span class="line">这是<span class="tag">&lt;<span class="name">span</span>&gt;</span>一个<span class="tag">&lt;<span class="name">strong</span>&gt;</span>'div'<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span>..</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"URL"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>user name</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>passoword</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>confirm<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>运行效果 ( 是不是以为我会做的花里胡哨的呢,嘿嘿这里只是为了学习所以就简单点吧,后期深入学习后有时间会写一些特炫的网页给大家的 ~ )</em></p></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/04/jQuery-selector/jQuery-selector.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为了配合Java-web项目的学习今天开始学习了jQuery-啦&quot;&gt;&lt;a href=&quot;#为了配合Java-web项目的学习今天开始学习了jQuery-啦&quot; class=&quot;headerlink&quot; title=&quot;为了配合Java web项目的学习今天开始学习了jQue
      
    
    </summary>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Simple Factory Pattern</title>
    <link href="http://yoursite.com/2019/04/03/Simple-Factory-Pattern/"/>
    <id>http://yoursite.com/2019/04/03/Simple-Factory-Pattern/</id>
    <published>2019-04-03T04:29:16.000Z</published>
    <updated>2019-04-03T10:25:41.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单工厂模式结构与实现"><a href="#简单工厂模式结构与实现" class="headerlink" title="简单工厂模式结构与实现"></a>简单工厂模式结构与实现</h2><h3 id="简单工厂模式结构"><a href="#简单工厂模式结构" class="headerlink" title="简单工厂模式结构"></a>简单工厂模式结构</h3><ol><li><code>Factory</code>(工厂角色) : 工厂角色既工厂类,它是简单工厂模式的核心,负责实现创建所有产品实例的内部逻辑.工厂类还可以被外界直接调用,创建所需的产品对象.在工厂类中提供了静态的工厂方法<code>factoryMethod()</code>,它的返回类型为抽象产品类型<code>Product</code>.</li><li><code>Product</code>(抽象产品角色) : 它是工厂类创建的所有对象的父类,封装了各种产品对象的公有方法,它的引入将提高系统的灵活性,使得在工厂类中只需定义一个通用的工厂方法,因为所有创建的具体产品对象都是其子类对象.</li><li><code>ConcreteProduct</code>(具体产品角色) : 它是简单的工厂模式的创建目标,所有被创建的对象都充当这个角色的某个具体类的实例,每一个具体产品角色都继承了抽象产品的角色.需要实现在抽象产品中声明的抽象方法.</li></ol><h3 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">某软件公司要基于Java语言开发一套图表库,该图表库可以为应用程序提供多种不同外观的图表,例如柱状图(HistogramChart),饼状图(PieChart)</span><br><span class="line">折线图(LineChart)等..该软件公司图表库设计人员希望为应用系统人员提供一套灵活易用的图标库,通过设置不同的参数即可得到不同类型的图表.</span><br><span class="line">而且可以较为方便的对图表库进行扩展,以便能够在将来增加一些新类型的图表.</span><br></pre></td></tr></table></figure><h4 id="下述用简单工厂模式来设计该图表库"><a href="#下述用简单工厂模式来设计该图表库" class="headerlink" title="下述用简单工厂模式来设计该图表库"></a>下述用简单工厂模式来设计该图表库</h4><ul><li><p><em>(1)Chart : 抽象图表接口,充当抽象产品类.</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Chart</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>(2)HistogramChart : 柱状图类,充当具体产品类.</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HistogramChart</span> <span class="keyword">implements</span> <span class="title">Chart</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HistogramChart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Create the histogram chart ."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Display the histogram chart ."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>(3)PieChart : 饼状体类,充当具体产品类.</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PieChart</span> <span class="keyword">implements</span> <span class="title">Chart</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PieChart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Create the pie chart ."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Display the pie chart ."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>(4)LineChart : 折线图类,充当具体产品类.</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineChart</span> <span class="keyword">implements</span> <span class="title">Chart</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LineChart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Create the line chart ."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Display the line chart ."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>(5)ChartFactory : 图表工厂类,充当工厂类.</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChartFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Chart <span class="title">getChart</span><span class="params">(String chartType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Chart chart = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (chartType.equalsIgnoreCase(<span class="string">"histogram"</span>)) &#123;</span><br><span class="line">chart = <span class="keyword">new</span> HistogramChart();</span><br><span class="line">System.out.println(<span class="string">"Initialize the histogram chart ."</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (chartType.equalsIgnoreCase(<span class="string">"pie"</span>)) &#123;</span><br><span class="line">chart = <span class="keyword">new</span> PieChart();</span><br><span class="line">System.out.println(<span class="string">"Initialize the pie chart ."</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (chartType.equalsIgnoreCase(<span class="string">"line"</span>)) &#123;</span><br><span class="line">chart = <span class="keyword">new</span> LineChart();</span><br><span class="line">System.out.println(<span class="string">"Initialize the line chart ."</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.err.println(<span class="string">"error : Please chakout your object name. "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chart;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>(6)SimpleFactoryPatternTest : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactoryPatternTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Chart chart = ChartFactory.getChart(<span class="string">"histogram"</span>);</span><br><span class="line">chart.display();</span><br><span class="line">Chart chart2 = ChartFactory.getChart(<span class="string">"pie"</span>);</span><br><span class="line">chart2.display();</span><br><span class="line">Chart chart3 = ChartFactory.getChart(<span class="string">"line"</span>);</span><br><span class="line">chart3.display();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*##The result be shown as followed:##</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Create the histogram chart . </span></span><br><span class="line"><span class="comment">          Initialize the histogram chart . </span></span><br><span class="line"><span class="comment">          Display the histogram chart .</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  Create the pie chart .  </span></span><br><span class="line"><span class="comment">  Initialize the pie chart .</span></span><br><span class="line"><span class="comment">          Display the pie chart .</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">  Create the line chart .  </span></span><br><span class="line"><span class="comment">          Initialize the line chart .</span></span><br><span class="line"><span class="comment">          Display the line chart .</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="不难发现-上述示例中在创建具体Chart对象时必须通过修改客户端代码中静态工厂方法的参数来更换具体产品对象-客户端代码需要重新编译-这对于客户端而言违反了开闭原则-下面介绍一种常用的解决方案-可以实现在不修改客户端代码的前提下能让客户端能够更换具体产品对象"><a href="#不难发现-上述示例中在创建具体Chart对象时必须通过修改客户端代码中静态工厂方法的参数来更换具体产品对象-客户端代码需要重新编译-这对于客户端而言违反了开闭原则-下面介绍一种常用的解决方案-可以实现在不修改客户端代码的前提下能让客户端能够更换具体产品对象" class="headerlink" title="不难发现,上述示例中在创建具体Chart对象时必须通过修改客户端代码中静态工厂方法的参数来更换具体产品对象.客户端代码需要重新编译,这对于客户端而言违反了开闭原则.下面介绍一种常用的解决方案,可以实现在不修改客户端代码的前提下能让客户端能够更换具体产品对象."></a>不难发现,上述示例中在创建具体<code>Chart</code>对象时必须通过修改客户端代码中静态工厂方法的参数来更换具体产品对象.客户端代码需要重新编译,这对于客户端而言违反了<code>开闭原则</code>.下面介绍一种常用的解决方案,可以实现在不修改客户端代码的前提下能让客户端能够更换具体产品对象.</h4><ul><li><p><em>首先可以将静态的工厂方法的参数存储在<code>XML</code>格式的配置文件中(<code>config.xml</code>).如下所示 :</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">chartType</span>&gt;</span>histograma<span class="tag">&lt;/<span class="name">chartType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>再通过一个工具类<code>XML Util</code>来读取配置文件中的字符串参数,<code>XMLUtil</code>类的代码如下 :</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String path = <span class="string">"src\\objctConfig.xml"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该方法用于从XML配置文件中提取图表类型,并返回类型名.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChartType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建文档对象.</span></span><br><span class="line">DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();</span><br><span class="line">Document document;</span><br><span class="line">document = documentBuilder.parse(<span class="keyword">new</span> File(path));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取包含图标类型的文本节点.</span></span><br><span class="line">NodeList nodeList = document.getElementsByTagName(<span class="string">"chartType"</span>);</span><br><span class="line">Node node = nodeList.item(<span class="number">0</span>).getFirstChild();</span><br><span class="line"></span><br><span class="line">String chartType = node.getNodeValue().trim();</span><br><span class="line"><span class="keyword">return</span> chartType;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (ParserConfigurationException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SAXException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在引入配置文件和工具类<code>XMLUtil</code>之后,客户端代码<code>SimpleFactoryPatternTest.java</code>修改如下 :</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactoryPatternTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通过读取配置文件中的参数来初始化指定的对象.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String chartType = XMLUtil.getChartType();</span><br><span class="line">Chart chart = ChartFactory.getChart(chartType);</span><br><span class="line"></span><br><span class="line">chart.display();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*##The result be shown as followed:##</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   Create the histogram chart .  </span></span><br><span class="line"><span class="comment">           Initialize the histogram chart .</span></span><br><span class="line"><span class="comment">   Display the histogram chart .</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>不难发现,在上述客户端代码中并不包含任何与具体图标对象相关的信息,如果需要更换具体图标对象,只需要修改配置文件<code>config.xml</code>,无须修改任何原代码,既而符合<code>开闭原则</code></strong></p></li><li><p><em><code>开闭原则</code> : 是面向对象的可复用设计的第一块基石,它是最重要的面向对象设计原则.开闭原则由<code>Bertrand Meyer</code>于1998年提出,其定义如下 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">开闭原则 : 软件实体应当对扩展开放,对修改关闭.</span><br><span class="line">Open-Closed Principle(OCP) : Software entities should be open for extension,but closed for modification.</span><br><span class="line"></span><br><span class="line">在开闭原则的定义中,软件实体可以指一个软件模块,一个由多个类组成的局部结构或一个独立的类,开闭原则就是指软件实体应尽量在不修改</span><br><span class="line">原有代码的情况下进行扩展.</span><br></pre></td></tr></table></figure></li></ul><h3 id="简单工厂模式优-缺点与适用环境"><a href="#简单工厂模式优-缺点与适用环境" class="headerlink" title="简单工厂模式优/缺点与适用环境"></a>简单工厂模式优/缺点与适用环境</h3><h4 id="简单工厂模式的优点"><a href="#简单工厂模式的优点" class="headerlink" title="简单工厂模式的优点"></a>简单工厂模式的优点</h4><ol><li>工厂类包含必要的判断逻辑,可以决定在什么时候创建哪一个产品类的实例,客户端可以避免直接创建产品对象的职责.而仅仅’消费’产品,简单工厂模式实现了对象创建和使用的分离.</li><li>客户端无须知道所创建的具体产品的类名.只需要知道具体产品类所对应的参数即可,对于一些复杂的类名,通过简单工厂模式可以在一定程度上减少使用者的记忆量.</li><li>通过引入配置文件,可以在不修改任何客户端代码的情况下更换和增加新的具体产品类,在一定程序上提高了系统的灵活性.</li></ol><h4 id="简单工厂模式的缺点"><a href="#简单工厂模式的缺点" class="headerlink" title="简单工厂模式的缺点"></a>简单工厂模式的缺点</h4><ol><li>由于工厂类集中了所有产品的创建逻辑,职责过重,一旦不能正常工作,整个系统都要受到影响.</li><li>使用简单工厂模式势必会增加系统中类的个数(引入了新的工厂类),增加了系统的复杂度和理解难度.</li><li>系统扩展困难,一旦添加新产品就不得不修改工厂逻辑,在新产品类型较多时有可能造成工厂逻辑过于复杂,不利于系统的扩展和维护.</li><li>简单工厂模式由于使用了静态工厂方法,造成工厂角色无法形成基于继承的等级结构.</li></ol><h4 id="简单工厂模式的适用环境"><a href="#简单工厂模式的适用环境" class="headerlink" title="简单工厂模式的适用环境"></a>简单工厂模式的适用环境</h4><ol><li>工厂类负责创建的对象比较少,由于创建的对象比较少,不会造成工厂方法中的业务逻辑过于复杂.</li><li>客户端只知道传入工厂类的参数,对于如何创建对象并不关心.</li></ol><ul><li><em>参考书籍《 Java设计模式 》 作者: 刘伟 (可以说本书的代码示例写的非常用心,很适合初学者参考)</em></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简单工厂模式结构与实现&quot;&gt;&lt;a href=&quot;#简单工厂模式结构与实现&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式结构与实现&quot;&gt;&lt;/a&gt;简单工厂模式结构与实现&lt;/h2&gt;&lt;h3 id=&quot;简单工厂模式结构&quot;&gt;&lt;a href=&quot;#简单工厂模式结构&quot;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://yoursite.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Spring 依赖注入</title>
    <link href="http://yoursite.com/2019/04/02/Spring-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2019/04/02/Spring-依赖注入/</id>
    <published>2019-04-02T13:12:43.000Z</published>
    <updated>2019-04-02T14:12:21.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-framework-依赖注入篇"><a href="#Spring-framework-依赖注入篇" class="headerlink" title="Spring framework 依赖注入篇"></a>Spring framework <code>依赖注入篇</code></h2><p><em>如果想区分<code>依赖注入</code>与<code>控制反转(IOC)</code>两者之间的不同,可以参考<code>Martin Fowler</code>给出的解释.查看文章: <a href="http://martinfowler.com/articles/injection.html" target="_blank" rel="noopener">GO</a></em></p><ul><li><p><em>简单来说,依赖注入的情况如下 :</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">importantMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        B b = ... <span class="comment">// get an instance of B</span></span><br><span class="line">        b.usefulMethod();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>如果要使用<code>B</code>,类<code>A</code>必须先获得组件<code>B</code>的实例引用,若<code>B</code>是一个具体类,则可以通过<code>new</code>关键字直接创建组件<code>B</code>实例.</em>但是,如果<code>B</code>是接口,且有多个实现,则问题就变得复杂了,我们固然可以任意选择接口<code>B</code>的一个实现类,但这也意味着<code>A</code>的可重用性大大降低了,因为无法采用<code>B</code>的其他实现.*</p></li><li><p><em>依赖注入是这样处理此类情景的 : 接管对象的创建工作,并将该对象的引用注入需要该对象的组件.以上述例子为例,依赖注入</em>框架会分别创建对象<code>A</code>和对象<code>B</code>,将对象<code>B</code>注入到对象<code>A</code>中.为了能让框架进行依赖注入,程序员需要编写特定的<code>set</code>方法<em>或构建方法,例如: 为了能将<code>B</code>注入到<code>A</code>中,类<code>A</code>会被修改成如下形式 :</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">importantMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// no need to worry about creating B anymore.</span></span><br><span class="line">        <span class="comment">// B b = ... // get an instance of B.</span></span><br><span class="line">        b.usefulMethod();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(B b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>修改后的类<code>A</code>新增了一个<code>setter</code>方法,该方法将会被框架调用,以注入一个<code>B</code>的实例.由于对象依赖由依赖注入,类<code>A</code>的<code>importantMethod()</code>方法不再需要在调用<code>B</code>的<code>usefulMethod()</code>方法前去创建一个<code>B</code>的实例.</em></p></li><li><p><em>当然,也可以采用<code>构造器方式</code>注入,如下所示 : (本例中,<code>Spring</code>会先创建<code>B</code>的实例,再创建实例<code>A</code>,然后把<code>B</code>注入到实例<code>A</code>中.)</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(B b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">importantMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// no need to worry about creating B anymore.</span></span><br><span class="line">        <span class="comment">// B b = ... // get an instance of B.</span></span><br><span class="line">        b.usefulMethod();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注意 : <code>Spring</code> 管理的对象称为<code>beans</code> .</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">通过提供一个控制反转器(或者依赖注入器IOC),`Spring`为我们提供一种可以&apos;聪明&apos;地管理Java对象的依赖关系的方法.</span><br><span class="line">其优雅之处在于 : 程序员无须了解`Spring`框架的存在,更不需要引入任何`Spring`类型.</span><br><span class="line"></span><br><span class="line">使用`Spring`,程序几乎将所有重要对象的创建工作移交给了`Spring`,并配置如何注入依赖.`Spring`支持`XML`和`注解`</span><br><span class="line">两种配置方式.此外还需要创建是一个`ApplicationContext`对象,其代表一个`Spring`控制反转容器,`org.springframework.</span><br><span class="line">context.ApplicationContext`接口有多个实现,包括`ClassPathXmlApplicationContext`和`FileSystemXmlApplicationContext`.</span><br><span class="line">这两个实现都需要至少一个包含`beans`信息的`XML`文件.</span><br></pre></td></tr></table></figure><ul><li><em>ClassPathXmlApplicationContext : 在类加载路径中加载配置文件.</em></li><li><em>FileSystemXmlApplicationContext : 在文件系统路径中加载文件.</em></li></ul><h4 id="下面为从类路径中加载applicationContext1-xml和applicationContext2-xml的ApplicationContext创建的一个代码示例"><a href="#下面为从类路径中加载applicationContext1-xml和applicationContext2-xml的ApplicationContext创建的一个代码示例" class="headerlink" title="下面为从类路径中加载applicationContext1.xml和applicationContext2.xml的ApplicationContext创建的一个代码示例 :"></a>下面为从类路径中加载<code>applicationContext1.xml</code>和<code>applicationContext2.xml</code>的<code>ApplicationContext</code>创建的一个代码示例 :</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">    <span class="keyword">new</span> String[]&#123;<span class="string">"applicationContext1.xml"</span>,<span class="string">"applicationContext2.xml"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过调用`ApplicationContext`的`getBean`方法获得对象</span></span><br><span class="line"><span class="comment">//getBean方法会查询`id`为`product`且类型为`Product`的`bean`对象.</span></span><br><span class="line">Product product = context.getBean(<span class="string">"product"</span>,Product.class);</span><br></pre></td></tr></table></figure><ul><li><p><strong>注 : 理想情况下,我们仅需在测试代码中创建一个<code>ApplicationContext</code>,应用程序本身无需处理,对于<code>Spring MVC</code>应用,可以通过一个<code>Spring Servlet</code>来处理<code>ApplicationContext</code>,既而无须直接处理.</strong></p></li><li><p><em>摘抄书籍 : 《 Servlet,JSP and Spring MVC - beginner 》 -&gt;  author: [加] Budi Kurniawan [美] Paul Deck</em></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-framework-依赖注入篇&quot;&gt;&lt;a href=&quot;#Spring-framework-依赖注入篇&quot; class=&quot;headerlink&quot; title=&quot;Spring framework 依赖注入篇&quot;&gt;&lt;/a&gt;Spring framework &lt;co
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>全国计算机等级考试-三级数据库技术</title>
    <link href="http://yoursite.com/2019/03/31/%E5%85%A8%E5%9B%BD%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AD%89%E7%BA%A7%E8%80%83%E8%AF%95-%E4%B8%89%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2019/03/31/全国计算机等级考试-三级数据库技术/</id>
    <published>2019-03-31T02:46:51.000Z</published>
    <updated>2019-03-31T07:52:47.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NCRE-National-Computer-Rank-Examination-——-三级数据库技术篇"><a href="#NCRE-National-Computer-Rank-Examination-——-三级数据库技术篇" class="headerlink" title="NCRE(National Computer Rank Examination) —— 三级数据库技术篇"></a>NCRE(National Computer Rank Examination) —— 三级<code>数据库技术</code>篇</h3><h4 id="来来来-先欣赏一下昨天去看樱花时拍的风景-语文学的不好的我只能用超级美来形容啦啊哈哈哈-づ｡◕ᴗᴗ◕｡-づ"><a href="#来来来-先欣赏一下昨天去看樱花时拍的风景-语文学的不好的我只能用超级美来形容啦啊哈哈哈-づ｡◕ᴗᴗ◕｡-づ" class="headerlink" title="来来来,先欣赏一下昨天去看樱花时拍的风景,语文学的不好的我只能用超级美来形容啦啊哈哈哈 (づ｡◕ᴗᴗ◕｡)づ"></a>来来来,先欣赏一下昨天去看樱花时拍的风景,语文学的不好的我只能用超级美来形容啦啊哈哈哈 (づ｡◕ᴗᴗ◕｡)づ</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/31/全国计算机等级考试-三级数据库技术/Scenery.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li><h4 id="哎呦-要是俺和自己喜欢女孩纸走在这条路上哥哥心里一定美的够够的（づ￣3￣）づ╭❤～"><a href="#哎呦-要是俺和自己喜欢女孩纸走在这条路上哥哥心里一定美的够够的（づ￣3￣）づ╭❤～" class="headerlink" title="哎呦 ~ 要是俺和自己喜欢女孩纸走在这条路上哥哥心里一定美的够够的（づ￣3￣）づ╭❤～"></a>哎呦 ~ 要是俺和自己喜欢女孩纸走在这条路上哥哥心里一定美的够够的（づ￣3￣）づ╭❤～</h4></li></ul><h3 id="敲黑板：三级数据库技术题目也不难-较二级概念题多一些-勿慌-✧⁺⸜-●˙▾˙●-⸝⁺✧"><a href="#敲黑板：三级数据库技术题目也不难-较二级概念题多一些-勿慌-✧⁺⸜-●˙▾˙●-⸝⁺✧" class="headerlink" title="敲黑板：三级数据库技术题目也不难,较二级概念题多一些 ! 勿慌 ✧⁺⸜(●˙▾˙●)⸝⁺✧"></a><code>敲黑板：三级数据库技术题目也不难,较二级概念题多一些 ! 勿慌 ✧⁺⸜(●˙▾˙●)⸝⁺✧</code></h3><h3 id="开门见山-先感受一下哥哥带来的学习笔记-详细到感动自己的那种-ヾ-❀-ω-ﾉﾞ"><a href="#开门见山-先感受一下哥哥带来的学习笔记-详细到感动自己的那种-ヾ-❀-ω-ﾉﾞ" class="headerlink" title="开门见山,先感受一下哥哥带来的学习笔记,详细到感动自己的那种..ヾ(❀^ω^)ﾉﾞ"></a><code>开门见山,先感受一下哥哥带来的学习笔记,详细到感动自己的那种..ヾ(❀^ω^)ﾉﾞ</code></h3><h4 id="填空题总结"><a href="#填空题总结" class="headerlink" title="填空题总结"></a>填空题总结</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/31/全国计算机等级考试-三级数据库技术/Database-technology-doc.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li><h4 id="笔记共记录了17张卷子所有选择题的解析及易错点-毕竟有30分呢嘿嘿-づ｡◕ᴗᴗ◕｡-づ"><a href="#笔记共记录了17张卷子所有选择题的解析及易错点-毕竟有30分呢嘿嘿-づ｡◕ᴗᴗ◕｡-づ" class="headerlink" title="笔记共记录了17张卷子所有选择题的解析及易错点,毕竟有30分呢嘿嘿.. (づ｡◕ᴗᴗ◕｡)づ"></a>笔记共记录了<code>17</code>张卷子所有选择题的<code>解析</code>及<code>易错点</code>,毕竟有<code>30</code>分呢嘿嘿.. (づ｡◕ᴗᴗ◕｡)づ</h4></li></ul><h4 id="应用题总结"><a href="#应用题总结" class="headerlink" title="应用题总结"></a>应用题总结</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/31/全国计算机等级考试-三级数据库技术/Applied-problems.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li><h4 id="笔记共记录了9张卷子所有应用题的解析及易错点-同样占据30分哟-づ｡◕ᴗᴗ◕｡-づ"><a href="#笔记共记录了9张卷子所有应用题的解析及易错点-同样占据30分哟-づ｡◕ᴗᴗ◕｡-づ" class="headerlink" title="笔记共记录了9张卷子所有应用题的解析及易错点,同样占据30分哟 (づ｡◕ᴗᴗ◕｡)づ"></a>笔记共记录了<code>9</code>张卷子所有应用题的<code>解析</code>及<code>易错点</code>,同样占据<code>30</code>分哟 (づ｡◕ᴗᴗ◕｡)づ</h4></li></ul><ul><li><strong>笔记的下载链接 :</strong> , <a href="https://github.com/YUbuntu0109/NCRE" target="_blank" rel="noopener">Good luck to you ~</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;NCRE-National-Computer-Rank-Examination-——-三级数据库技术篇&quot;&gt;&lt;a href=&quot;#NCRE-National-Computer-Rank-Examination-——-三级数据库技术篇&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="NCRE" scheme="http://yoursite.com/tags/NCRE/"/>
    
      <category term="SQL Server" scheme="http://yoursite.com/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>全国计算机等级考试-二级MySQL</title>
    <link href="http://yoursite.com/2019/03/31/%E5%85%A8%E5%9B%BD%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AD%89%E7%BA%A7%E8%80%83%E8%AF%95-%E4%BA%8C%E7%BA%A7MySQL/"/>
    <id>http://yoursite.com/2019/03/31/全国计算机等级考试-二级MySQL/</id>
    <published>2019-03-31T02:10:44.000Z</published>
    <updated>2019-03-31T03:19:47.780Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NCRE-National-Computer-Rank-Examination-——-二级MySQL篇"><a href="#NCRE-National-Computer-Rank-Examination-——-二级MySQL篇" class="headerlink" title="NCRE(National Computer Rank Examination) —— 二级MySQL篇"></a>NCRE(National Computer Rank Examination) —— 二级<code>MySQL</code>篇</h3><p><strong><code>敲黑板：二级考试的试题都是在往年的试卷中随机抽取的 ! 勿慌 ✧⁺⸜(●˙▾˙●)⸝⁺✧</code></strong></p><p><em><code>嘿嘿,没想到你点进来啦,其实我大一报考MySQL二级时并没有记笔记,这就尴尬啦..既然你点击近来啦,那就推荐一波学习资源吧 (っ•̀ω•́)っ✎⁾⁾</code></em></p><ul><li><p><em>我在备考时使用的都是<code>未来教育</code>提供的考试模拟系统,如下图示例( 没有打广告哟,是真的挺不错的！ )</em></p></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/31/全国计算机等级考试-二级MySQL/Test-system.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p><em>很多同学使用的基本都是<code>未来教育</code>的考试模拟系统,可以说和真实考试的系统几乎相似,虽然说<code>2019/3月份的全国计算机等考的考试系统更新了</code>..但题目的基本模块还是没有变化的,如果大家想考<code>二级/三级/四级</code>,真的非常建议使用未来教育的考试模拟系统！至于说能否考过那就要看你自己认真度啦嘿嘿 ~</em></p></li><li><p><strong><code>未来教育的官方网站 :</code></strong> , <a href="http://www.eduexam.cn/" target="_blank" rel="noopener">GO ~</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;NCRE-National-Computer-Rank-Examination-——-二级MySQL篇&quot;&gt;&lt;a href=&quot;#NCRE-National-Computer-Rank-Examination-——-二级MySQL篇&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="NCRE" scheme="http://yoursite.com/tags/NCRE/"/>
    
  </entry>
  
  <entry>
    <title>全国计算机等级考试-二级C语言</title>
    <link href="http://yoursite.com/2019/03/31/%E5%85%A8%E5%9B%BD%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AD%89%E7%BA%A7%E8%80%83%E8%AF%95-%E4%BA%8C%E7%BA%A7C%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2019/03/31/全国计算机等级考试-二级C语言/</id>
    <published>2019-03-31T01:45:04.000Z</published>
    <updated>2019-03-31T07:23:52.922Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NCRE-National-Computer-Rank-Examination-——-二级C篇"><a href="#NCRE-National-Computer-Rank-Examination-——-二级C篇" class="headerlink" title="NCRE(National Computer Rank Examination) —— 二级C篇"></a>NCRE(National Computer Rank Examination) —— 二级<code>C</code>篇</h3><h4 id="来来来-先欣赏一下昨天去看樱花时拍的风景-语文学的不好的我只能用超级美来形容啦啊哈哈哈-づ｡◕ᴗᴗ◕｡-づ"><a href="#来来来-先欣赏一下昨天去看樱花时拍的风景-语文学的不好的我只能用超级美来形容啦啊哈哈哈-づ｡◕ᴗᴗ◕｡-づ" class="headerlink" title="来来来,先欣赏一下昨天去看樱花时拍的风景,语文学的不好的我只能用超级美来形容啦啊哈哈哈 (づ｡◕ᴗᴗ◕｡)づ"></a>来来来,先欣赏一下昨天去看樱花时拍的风景,语文学的不好的我只能用超级美来形容啦啊哈哈哈 (づ｡◕ᴗᴗ◕｡)づ</h4><ul><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/31/全国计算机等级考试-二级C语言/Scenery.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><p><strong><code>敲黑板：二级考试的试题都是在往年的试卷中随机抽取的 ! 勿慌 ✧⁺⸜(●˙▾˙●)⸝⁺✧</code></strong></p><p><em><code>OK ! 说直白一点,二级考试真是的傻白甜,毕竟考试范围都已经给你了,况且还有可能遇到原题呢...</code></em><br><em><code>但是！但是！但是！过程很重要,相信这一切都是你走向春天的必经之路,大家千万不因傲慢而忽略了路边的风景 ！</code></em></p><ul><li><h4 id="下面是我考试前的一些练习题-阔以说将题目要求-运行结果-注意事项-易错点写的的非常的详细啦！-嘿嘿-大家阔以省下买试卷的钱咯-づ｡◕ᴗᴗ◕｡-づ"><a href="#下面是我考试前的一些练习题-阔以说将题目要求-运行结果-注意事项-易错点写的的非常的详细啦！-嘿嘿-大家阔以省下买试卷的钱咯-づ｡◕ᴗᴗ◕｡-づ" class="headerlink" title="下面是我考试前的一些练习题,阔以说将题目要求,运行结果,注意事项,易错点写的的非常的详细啦！( 嘿嘿,大家阔以省下买试卷的钱咯 (づ｡◕ᴗᴗ◕｡)づ )"></a>下面是我考试前的一些练习题,阔以说将<code>题目要求</code>,<code>运行结果</code>,<code>注意事项</code>,<code>易错点</code>写的的非常的详细啦！( 嘿嘿,大家阔以省下买试卷的钱咯 (づ｡◕ᴗᴗ◕｡)づ )</h4></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/31/全国计算机等级考试-二级C语言/examination-paper.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><ul><li><p><strong>试卷及笔记的下载链接 :</strong> , <a href="https://github.com/YUbuntu0109/NCRE" target="_blank" rel="noopener">Good luck to you ~</a></p></li><li><p><strong>建议多多刷题哟,尽情体验C语言中<code>指针</code>与<code>数据结构及算法</code>的美吧 (っ•̀ω•́)っ✎⁾⁾</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;NCRE-National-Computer-Rank-Examination-——-二级C篇&quot;&gt;&lt;a href=&quot;#NCRE-National-Computer-Rank-Examination-——-二级C篇&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="NCRE" scheme="http://yoursite.com/tags/NCRE/"/>
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>static keyword</title>
    <link href="http://yoursite.com/2019/03/16/static-keyword/"/>
    <id>http://yoursite.com/2019/03/16/static-keyword/</id>
    <published>2019-03-16T14:03:17.000Z</published>
    <updated>2019-03-18T14:54:09.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天刷C语言程序题时遇到很多关于static关键字的题目-为区分Java中的static继而回到寝室写一篇关于Java中static关键字的使用详解"><a href="#今天刷C语言程序题时遇到很多关于static关键字的题目-为区分Java中的static继而回到寝室写一篇关于Java中static关键字的使用详解" class="headerlink" title="今天刷C语言程序题时遇到很多关于static关键字的题目,为区分Java中的static继而回到寝室写一篇关于Java中static关键字的使用详解."></a>今天刷C语言程序题时遇到很多关于<code>static</code>关键字的题目,为区分Java中的<code>static</code>继而回到寝室写一篇关于Java中<code>static</code>关键字的使用详解.</h3><h3 id="先来谈谈Java中的static"><a href="#先来谈谈Java中的static" class="headerlink" title="先来谈谈Java中的static"></a>先来谈谈Java中的<code>static</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"static方法就是没有this的方法.在static方法内部不能调用非静态方法,反过来是可以的.而且可以在没有创建任何对象的前提下,仅仅通过类本身来调用static方法.这实际上正是static方法的主要用途.   ———— 《 Java编程思想 》"</span></span><br><span class="line"></span><br><span class="line">总结为一句话：方便在没有创建对象的情况下来进行调用(方法/变量).</span><br></pre></td></tr></table></figure><ul><li><h4 id="static-变量"><a href="#static-变量" class="headerlink" title="static 变量"></a><code>static</code> 变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> 变量也称作静态变量.</span><br><span class="line">静态变量:   静态变量被所有的对象所共享,在内存中只有一个副本.它当且仅当在类初次加载时会被初始化.</span><br><span class="line">非静态变量: 是对象所拥有的,在创建对象的时候被初始化.存在多个副本,各个对象拥有的副本互不影响.</span><br></pre></td></tr></table></figure></li><li><h4 id="static-方法"><a href="#static-方法" class="headerlink" title="static 方法"></a><code>static</code> 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="keyword">static</span> 修饰的方法一般称作静态方法.由于静态方法不依赖于任何对象就可以进行访问,因此对于静态方法来内说是无法使用 <span class="keyword">this</span> 关键字的,</span><br><span class="line">因为它不依附于任何对象,既然都没有对象,就谈不上 <span class="keyword">this</span> 了 ! 继而由于这个特性,在静态方法中不能访问类的非静态成员变量和非静态成员方法,</span><br><span class="line">因为非静态成员方法/变量都是必须依赖具体的`对象`才能够被调用.</span><br></pre></td></tr></table></figure></li><li><h4 id="static-代码块"><a href="#static-代码块" class="headerlink" title="static 代码块"></a><code>static</code> 代码块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">静态代码块以优化程序性能.<span class="keyword">static</span> 块可以置于类中的任何地方,类中可以有多个<span class="keyword">static</span>块.</span><br><span class="line">在类初次被加载的时候,会按照 <span class="keyword">static</span> 代码块的顺序逐个执行,并且只会执行一次.</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用JDBC中简单的Data-access-obejct实例来讲解如何利用static关键字优化程序性能-っ•̀ω•́-っ✎⁾⁾"><a href="#使用JDBC中简单的Data-access-obejct实例来讲解如何利用static关键字优化程序性能-っ•̀ω•́-っ✎⁾⁾" class="headerlink" title="使用JDBC中简单的Data access obejct实例来讲解如何利用static关键字优化程序性能 ! (っ•̀ω•́)っ✎⁾⁾"></a>使用JDBC中简单的<code>Data access obejct</code>实例来讲解如何利用<code>static</code>关键字优化程序性能 ! (っ•̀ω•́)っ✎⁾⁾</h4><ol><li><p>首先创建一个连接数据库的工具类,使用<code>static 代码块</code>解决重复加载驱动问题,提高性能.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: JDBCUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Connect to the database.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Huang Yuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Mar 13, 2019 3:19:41 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">JDBCUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize the driver of database.</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return a database connection object.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost/databaseName?"</span></span><br><span class="line">+ <span class="string">"useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true"</span>, <span class="string">"username"</span>, <span class="string">"password"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// release the resource of connecting.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">freeResource</span><span class="params">(Connection connection,PreparedStatement preparedStatement,ResultSet resultSet)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(connection!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">preparedStatement.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">resultSet.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用<code>static</code>修饰单独抽取出来的<code>Connection</code>对象使其成为静态变量.继而使得整个<code>DAO</code>可以共享此对象.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: basicConnection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Share this object of Connection.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Huang Yuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Mar 13, 2019 3:15:43 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">basicConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection connection = JDBCUtil.getConnection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小哥就简写一下<code>DAO</code>层类,便于举例: 增加数据表信息的类 + 删除数据表信息的类 + ······</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: basicConnectionTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Insert the specified data into the database.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Huang Yuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Mar 16, 2019 10:40:11 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection connection = basicConnection.connection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertInfoTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"insertInfoTest : "</span> + connection);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: DeleteTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Delete the specified data from the database.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Huang Yuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Mar 16, 2019 11:05:44 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection connection2 = basicConnection.connection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteInfoTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"deleteInfoTest : "</span> + connection2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>利用<code>JUnit</code>测试套件测试<code>Data acess object</code>中所有的测试类.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AllTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Test all class.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Huang Yuhui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Mar 16, 2019 11:04:58 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(Suite.class)</span><br><span class="line"><span class="meta">@SuiteClasses</span>(&#123; InsertTest.class, DeleteTest.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出结果如下所示.由于<code>Connection</code>对象被抽取且被<code>static</code>修饰为了静态对象.继而在整个<code>DAO</code>中可以共享这个<code>连接数据库的对象</code>.而不必每一个类中都实例化一次<code>连接数据库的对象(Connection)</code>继而提升程序的性能（づ￣3￣）づ╭❤～</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insertInfoTest : com.mysql.cj.jdbc.ConnectionImpl@<span class="number">158</span>a8276</span><br><span class="line">deleteInfoTest : com.mysql.cj.jdbc.ConnectionImpl@<span class="number">158</span>a8276</span><br></pre></td></tr></table></figure></li></ol><ul><li><em>哎哟,不知觉又半夜啦! 晚安,好梦. remember love yourself deeply.</em></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今天刷C语言程序题时遇到很多关于static关键字的题目-为区分Java中的static继而回到寝室写一篇关于Java中static关键字的使用详解&quot;&gt;&lt;a href=&quot;#今天刷C语言程序题时遇到很多关于static关键字的题目-为区分Java中的static继而
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JUnit" scheme="http://yoursite.com/tags/JUnit/"/>
    
  </entry>
  
</feed>
