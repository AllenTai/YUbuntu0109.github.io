<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎参观小灰灰的网站哟 ヾ(◍°∇°◍)ﾉﾞ ~</title>
  
  <subtitle>My Personal blog website —— be founded on March 9, 2019</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-01T13:46:08.848Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>黄宇辉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>详解Binary Tree的实现方式及其应用</title>
    <link href="http://yoursite.com/2019/09/01/%E8%AF%A6%E8%A7%A3Binary-Tree%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/01/详解Binary-Tree的实现方式及其应用/</id>
    <published>2019-09-01T13:10:45.000Z</published>
    <updated>2019-09-01T13:46:08.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-详解Binary-Tree的实现方式及其应用"><a href="#学习笔记-详解Binary-Tree的实现方式及其应用" class="headerlink" title="学习笔记 : 详解Binary Tree的实现方式及其应用"></a>学习笔记 : 详解Binary Tree的实现方式及其应用</h2><h3 id="什么是二叉树"><a href="#什么是二叉树" class="headerlink" title="什么是二叉树"></a>什么是二叉树</h3><p><em>如果一棵树中的每个结点有0,1或者2个孩子结点,那么这颗树就称为二叉树. 空树也是一棵有效的二叉树. 一个二叉树可以看作由根节点和两颗不相交的子树( 分别称为左子树和右子树 )组成. 其类型可分为 : 严格二叉树,满二叉树,完全二叉树.</em></p><h3 id="二叉树的应用"><a href="#二叉树的应用" class="headerlink" title="二叉树的应用"></a>二叉树的应用</h3><ul><li>编译器中的表达式树</li><li>用于数据压缩算法中的赫夫曼编码树</li><li>支持在集合中查找,插入和删除,其平均时间复杂度为 O(logn) 的二叉树搜索(或称为查找)树( BST )</li><li>优先队列( PQ ),它支持以对数时间( 最坏情况下 )对集合中的最小( 或最大 )数据进行搜索和删除</li></ul><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><p><em>根据实体( 结点 )处理顺序不同,可以定义不同的遍历方法. 其分类如下 :</em></p><ul><li>前序遍历( DLR ) : 根节点 ——&gt; 左子树 ——&gt; 右子树</li><li>中序遍历( LDR ) : 左子树 ——&gt; 根节点 ——&gt; 右子树</li><li>后序遍历( LRD ) : 左子树 ——&gt; 右子树 ——&gt; 根节点</li><li>层次遍历 : 这种方法由图的广度优先遍历方法启发得来</li></ul><h4 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h4><ol><li><p><em>定义二叉树的结构</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.tree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: data structures and algorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 定义二叉树的结构</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/1/2019-2:59 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> BinaryTreeNode left;</span><br><span class="line">    <span class="keyword">private</span> BinaryTreeNode right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryTreeNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryTreeNode</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryTreeNode</span><span class="params">(<span class="keyword">int</span> data, BinaryTreeNode left, BinaryTreeNode right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BinaryTreeNode <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(BinaryTreeNode left)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BinaryTreeNode <span class="title">getRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(BinaryTreeNode right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>定义单向链表的结构</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.tree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: data structures and algorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 定义单向链表的结构</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/1/2019-5:09 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LLNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> LLNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LLNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LLNode</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LLNode <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(LLNode next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>基于单向链表来实现一个栈</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.tree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: data structures and algorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 基于单向链表实现栈</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/1/2019-3:10 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LLStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LLNode&lt;T&gt; headNode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LLStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.headNode = <span class="keyword">new</span> LLNode&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> headNode == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//栈顶</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (headNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> headNode.getData();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            headNode = <span class="keyword">new</span> LLNode&lt;&gt;(data);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (headNode.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            headNode.setData(data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> llNode = <span class="keyword">new</span> LLNode&lt;&gt;(data);</span><br><span class="line">            llNode.setNext(headNode);</span><br><span class="line">            headNode = llNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> data = headNode.getData();</span><br><span class="line">            headNode = headNode.getNext();</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>分别测试二叉树的前序,中序,后序遍历方式</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.tree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: data structures and algorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 二叉树的遍历方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/1/2019-2:24 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BinaryTreeNode <span class="title">initBinaryTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BinaryTreeNode root = <span class="keyword">new</span> BinaryTreeNode();</span><br><span class="line">        root.setData(<span class="number">1</span>); <span class="comment">//根节点</span></span><br><span class="line">        root.setLeft(<span class="keyword">new</span> BinaryTreeNode(<span class="number">2</span>, <span class="keyword">new</span> BinaryTreeNode(<span class="number">4</span>), <span class="keyword">new</span> BinaryTreeNode(<span class="number">5</span>))); <span class="comment">//左子树</span></span><br><span class="line">        root.setRight(<span class="keyword">new</span> BinaryTreeNode(<span class="number">3</span>, <span class="keyword">new</span> BinaryTreeNode(<span class="number">6</span>), <span class="keyword">new</span> BinaryTreeNode(<span class="number">7</span>))); <span class="comment">//右子树</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(BinaryTreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(root.getData() + <span class="string">", "</span>);</span><br><span class="line">            preOrder(root.getLeft());</span><br><span class="line">            preOrder(root.getRight());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非递归前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderNonRecursive</span><span class="params">(BinaryTreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"error : the tree is empty"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> stack = <span class="keyword">new</span> LLStack&lt;BinaryTreeNode&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.print(root.getData() + <span class="string">", "</span>);</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.getLeft();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            root = root.getRight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(BinaryTreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inOrder(root.getLeft());</span><br><span class="line">            System.out.print(root.getData() + <span class="string">", "</span>);</span><br><span class="line">            inOrder(root.getRight());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非递归中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderNonRecursive</span><span class="params">(BinaryTreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"error : the tree is empty"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> stack = <span class="keyword">new</span> LLStack&lt;BinaryTreeNode&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.getLeft();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            System.out.print(root.getData() + <span class="string">", "</span>);</span><br><span class="line">            root = root.getRight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(BinaryTreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            postOrder(root.getLeft());</span><br><span class="line">            postOrder(root.getRight());</span><br><span class="line">            System.out.print(root.getData() + <span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非递归后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postNonRecursive</span><span class="params">(BinaryTreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//······</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BinaryTree binaryTree = <span class="keyword">new</span> BinaryTree();</span><br><span class="line">        BinaryTreeNode binaryTreeNode = BinaryTree.initBinaryTree();</span><br><span class="line">        System.out.println(<span class="string">"------ 递归前序遍历 ------"</span>);</span><br><span class="line">        binaryTree.preOrder(binaryTreeNode); <span class="comment">//1,2,4,5,3,6,7</span></span><br><span class="line">        System.out.println(<span class="string">"\n------ 非递归前序遍历 ------"</span>);</span><br><span class="line">        binaryTree.preOrderNonRecursive(binaryTreeNode);</span><br><span class="line">        System.out.println(<span class="string">"\n------ 递归中序遍历 ------"</span>);</span><br><span class="line">        binaryTree.inOrder(binaryTreeNode); <span class="comment">//4,2,5,1,6,3,7</span></span><br><span class="line">        System.out.println(<span class="string">"\n------ 非递归中序遍历 ------"</span>);</span><br><span class="line">        binaryTree.inOrderNonRecursive(binaryTreeNode);</span><br><span class="line">        System.out.println(<span class="string">"\n------ 递归后序遍历 ------"</span>);</span><br><span class="line">        binaryTree.postOrder(binaryTreeNode); <span class="comment">//4,5,2,6,7,3,1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下所示 :</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">------ 递归前序遍历 ------</span><br><span class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, </span><br><span class="line">------ 非递归前序遍历 ------</span><br><span class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, </span><br><span class="line">------ 递归中序遍历 ------</span><br><span class="line"><span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, </span><br><span class="line">------ 非递归中序遍历 ------</span><br><span class="line"><span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, </span><br><span class="line">------ 递归后序遍历 ------</span><br><span class="line"><span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>,</span><br></pre></td></tr></table></figure></li></ol><p><em>参考书籍( 已完善书中的示例代码 ) : 《数据结构与算法经典问题解析 - 原书第2版》</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-详解Binary-Tree的实现方式及其应用&quot;&gt;&lt;a href=&quot;#学习笔记-详解Binary-Tree的实现方式及其应用&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : 详解Binary Tree的实现方式及其应用&quot;&gt;&lt;/a&gt;学习笔
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="data structures and algorithms" scheme="http://yoursite.com/tags/data-structures-and-algorithms/"/>
    
  </entry>
  
  <entry>
    <title>详解Queue的实现方式及其应用</title>
    <link href="http://yoursite.com/2019/08/31/%E8%AF%A6%E8%A7%A3Queue%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/31/详解Queue的实现方式及其应用/</id>
    <published>2019-08-31T13:37:20.000Z</published>
    <updated>2019-09-01T13:11:42.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-详解Queue的实现方式及其应用"><a href="#学习笔记-详解Queue的实现方式及其应用" class="headerlink" title="学习笔记 : 详解Queue的实现方式及其应用"></a>学习笔记 : 详解Queue的实现方式及其应用</h2><h3 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h3><p><em>队列是一种只能在一端插入( 队尾 ),在另外一端删除( 堆首 )的有序线性表. 队列中第一个插入的元素也是第一个被删除的元素. 所以,队列是一种先进先出( FIFO,First In First Out )或后进后出( LILO,Last In Last Out )线性表.</em></p><h3 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h3><ol><li>直接相关的应用</li></ol><ul><li>操作系统根据( 具有相同优先级的 )任务到达的顺序调度任务( 例如,打印队列 )</li><li>模拟现实世界中的队列,如售票柜台前的队伍,或者任何需要先来先服务的场景</li><li>多道程序设计</li><li>异步数据传输( 文件输入输出,管道,套接字 )</li></ul><ol start="2"><li>间接相关的应用</li></ol><ul><li>作为算法的辅助数据结构</li><li>其他数据结构的组件</li></ul><h3 id="队列的实现方式"><a href="#队列的实现方式" class="headerlink" title="队列的实现方式"></a>队列的实现方式</h3><p><em>队列抽象数据类型( 与栈类似 )有多种实现方式,下面是常用的方法 :</em></p><ul><li>基于简单循环数组的实现方法</li><li>基于动态循环数据的实现方法</li><li>基于链表的实现方法</li></ul><h4 id="简单循环数组的实现方法"><a href="#简单循环数组的实现方法" class="headerlink" title="简单循环数组的实现方法"></a>简单循环数组的实现方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.queue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: Data structures and algorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 基于简单循环数组实现队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/31/2019-9:59 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = size;</span><br><span class="line">        front = rear = -<span class="number">1</span>;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayQueue <span class="title">createQueue</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayQueue(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (front == -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((rear + <span class="number">1</span>) % capacity == front);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueueSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size = (capacity - front + rear + <span class="number">1</span>) % capacity;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> capacity;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            System.err.println(<span class="string">"error : the queue is overflow"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rear = (rear + <span class="number">1</span>) % capacity;</span><br><span class="line">            array[rear] = data;</span><br><span class="line">            <span class="keyword">if</span> (front == -<span class="number">1</span>) &#123;</span><br><span class="line">                front = rear;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"enter the data into the queue successfully : "</span> + data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.err.println(<span class="string">"error : the queue is empty"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            data = array[front];</span><br><span class="line">            array[front] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (front == rear) &#123;</span><br><span class="line">                front = rear = -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                front = (front + <span class="number">1</span>) % capacity;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"delete the data from the queue successfully : "</span> + data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayQueue queue = ArrayQueue.createQueue(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//enter</span></span><br><span class="line">        queue.enQueue(<span class="number">1</span>);</span><br><span class="line">        queue.enQueue(<span class="number">2</span>);</span><br><span class="line">        queue.enQueue(<span class="number">3</span>);</span><br><span class="line">        queue.enQueue(<span class="number">4</span>);</span><br><span class="line">        queue.enQueue(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"the size of queue : "</span> + queue.getQueueSize());</span><br><span class="line">        System.out.print(<span class="string">"traverse the queue : "</span>);</span><br><span class="line">        queue.traverse();</span><br><span class="line">        <span class="comment">//delete</span></span><br><span class="line">        queue.deQueue();</span><br><span class="line">        queue.deQueue();</span><br><span class="line">        queue.deQueue();</span><br><span class="line">        queue.deQueue();</span><br><span class="line">        queue.deQueue();</span><br><span class="line">        System.out.println(<span class="string">"the size of queue : "</span> + queue.getQueueSize());</span><br><span class="line">        System.out.print(<span class="string">"traverse the queue : "</span>);</span><br><span class="line">        queue.traverse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>程序运行结果如下 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enter the data into the queue successfully : <span class="number">1</span></span><br><span class="line">enter the data into the queue successfully : <span class="number">2</span></span><br><span class="line">enter the data into the queue successfully : <span class="number">3</span></span><br><span class="line">enter the data into the queue successfully : <span class="number">4</span></span><br><span class="line">enter the data into the queue successfully : <span class="number">5</span></span><br><span class="line">the size of queue : <span class="number">5</span></span><br><span class="line">traverse the queue : [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">delete the data from the queue successfully : <span class="number">1</span></span><br><span class="line">delete the data from the queue successfully : <span class="number">2</span></span><br><span class="line">delete the data from the queue successfully : <span class="number">3</span></span><br><span class="line">delete the data from the queue successfully : <span class="number">4</span></span><br><span class="line">delete the data from the queue successfully : <span class="number">5</span></span><br><span class="line">the size of queue : <span class="number">0</span></span><br><span class="line">traverse the queue : [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><h4 id="动态循环数据的实现方法"><a href="#动态循环数据的实现方法" class="headerlink" title="动态循环数据的实现方法"></a>动态循环数据的实现方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: Data structures and algorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 基于动态循环数组实现队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/1/2019-8:59 AM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynArrayQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DynArrayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        capacity = <span class="number">1</span>;</span><br><span class="line">        front = rear = -<span class="number">1</span>;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DynArrayQueue <span class="title">createDynArrayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DynArrayQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (front == -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((rear + <span class="number">1</span>) % capacity == front);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueueSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size = (capacity - front + rear + <span class="number">1</span>) % capacity;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> capacity;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//扩容</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resizeQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> initCapacity = capacity;</span><br><span class="line">        capacity *= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span>[] oldArray = array;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.capacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oldArray.length; i++) &#123;</span><br><span class="line">            array[i] = oldArray[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//important</span></span><br><span class="line">        <span class="keyword">if</span> (rear &lt; front) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; front; i++) &#123;</span><br><span class="line">                array[i + initCapacity] = <span class="keyword">this</span>.array[i];</span><br><span class="line">                array[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            rear += initCapacity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            resizeQueue();</span><br><span class="line">        &#125;</span><br><span class="line">        rear = (rear + <span class="number">1</span>) % capacity;</span><br><span class="line">        array[rear] = data;</span><br><span class="line">        <span class="keyword">if</span> (front == -<span class="number">1</span>) &#123;</span><br><span class="line">            front = rear;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"enter a data into the queue successfully : "</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> data = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.err.println(<span class="string">"error : the queue is empty"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            data = array[front];</span><br><span class="line">            array[front] = <span class="number">0</span>; <span class="comment">//delete the data</span></span><br><span class="line">            <span class="keyword">if</span> (front == rear) &#123;</span><br><span class="line">                front = rear = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                front = (front + <span class="number">1</span>) % capacity;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"delete a data from the queue successfully : "</span> + data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DynArrayQueue dynArrayQueue = DynArrayQueue.createDynArrayQueue();</span><br><span class="line">        <span class="comment">//enter</span></span><br><span class="line">        dynArrayQueue.enQueue(<span class="number">1</span>);</span><br><span class="line">        dynArrayQueue.enQueue(<span class="number">2</span>);</span><br><span class="line">        dynArrayQueue.enQueue(<span class="number">3</span>);</span><br><span class="line">        dynArrayQueue.enQueue(<span class="number">4</span>);</span><br><span class="line">        dynArrayQueue.enQueue(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"the size of queue : "</span> + dynArrayQueue.getQueueSize());</span><br><span class="line">        System.out.print(<span class="string">"traverse the queue : "</span>);</span><br><span class="line">        dynArrayQueue.traverse();</span><br><span class="line">        <span class="comment">//delete</span></span><br><span class="line">        dynArrayQueue.deQueue();</span><br><span class="line">        dynArrayQueue.deQueue();</span><br><span class="line">        dynArrayQueue.deQueue();</span><br><span class="line">        dynArrayQueue.deQueue();</span><br><span class="line">        dynArrayQueue.deQueue();</span><br><span class="line">        System.out.println(<span class="string">"the size of queue : "</span> + dynArrayQueue.getQueueSize());</span><br><span class="line">        System.out.print(<span class="string">"traverse the queue : "</span>);</span><br><span class="line">        dynArrayQueue.traverse();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>程序运行结果如下所示 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enter a data into the queue successfully : <span class="number">1</span></span><br><span class="line">enter a data into the queue successfully : <span class="number">2</span></span><br><span class="line">enter a data into the queue successfully : <span class="number">3</span></span><br><span class="line">enter a data into the queue successfully : <span class="number">4</span></span><br><span class="line">enter a data into the queue successfully : <span class="number">5</span></span><br><span class="line">the size of queue : <span class="number">5</span></span><br><span class="line">traverse the queue : [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">delete a data from the queue successfully : <span class="number">1</span></span><br><span class="line">delete a data from the queue successfully : <span class="number">2</span></span><br><span class="line">delete a data from the queue successfully : <span class="number">3</span></span><br><span class="line">delete a data from the queue successfully : <span class="number">4</span></span><br><span class="line">delete a data from the queue successfully : <span class="number">5</span></span><br><span class="line">the size of queue : <span class="number">0</span></span><br><span class="line">traverse the queue : [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><h4 id="链表的实现方法"><a href="#链表的实现方法" class="headerlink" title="链表的实现方法"></a>链表的实现方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个单向链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LLNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> LLNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LLNode</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LLNode <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(LLNode next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: Data structures and algorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 基于链表实现队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/1/2019-9:19 AM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LLQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LLNode frontNode; <span class="comment">//represents headNode</span></span><br><span class="line">    <span class="keyword">private</span> LLNode rearNode; <span class="comment">//represents lastNode</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LLQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.frontNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.rearNode = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LLQueue <span class="title">createQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LLQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (frontNode == <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueueSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        LLNode currentNode = frontNode;</span><br><span class="line">        <span class="keyword">while</span> (currentNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            currentNode = currentNode.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.err.println(<span class="string">"error : the queue is empty !"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LLNode currentNode = frontNode;</span><br><span class="line">        System.out.print(<span class="string">"the all data of queue : [ "</span>);</span><br><span class="line">        <span class="keyword">while</span> (currentNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(currentNode.getData() + <span class="string">" ,"</span>);</span><br><span class="line">            currentNode = currentNode.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">" ]\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        LLNode newNode = <span class="keyword">new</span> LLNode(data);</span><br><span class="line">        <span class="keyword">if</span> (rearNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rearNode.setNext(newNode);</span><br><span class="line">        &#125;</span><br><span class="line">        rearNode = newNode;</span><br><span class="line">        <span class="keyword">if</span> (frontNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            frontNode = rearNode;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"enter the data into the queue successfully : "</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.err.println(<span class="string">"error : the queue is empty"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            data = frontNode.getData();</span><br><span class="line">            frontNode = frontNode.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"delete the data from the queue successfully : "</span> + data);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LLQueue queue = LLQueue.createQueue();</span><br><span class="line">        <span class="comment">//enter</span></span><br><span class="line">        queue.enQueue(<span class="number">1</span>);</span><br><span class="line">        queue.enQueue(<span class="number">2</span>);</span><br><span class="line">        queue.enQueue(<span class="number">3</span>);</span><br><span class="line">        queue.enQueue(<span class="number">4</span>);</span><br><span class="line">        queue.enQueue(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"the size of the queue : "</span> + queue.getQueueSize());</span><br><span class="line">        System.out.print(<span class="string">"traverse the queue : "</span>);</span><br><span class="line">        queue.traverse();</span><br><span class="line">        <span class="comment">//delete</span></span><br><span class="line">        queue.deQueue();</span><br><span class="line">        queue.deQueue();</span><br><span class="line">        queue.deQueue();</span><br><span class="line">        queue.deQueue();</span><br><span class="line">        queue.deQueue();</span><br><span class="line">        System.out.println(<span class="string">"the size of the queue : "</span> + queue.getQueueSize());</span><br><span class="line">        System.out.print(<span class="string">"traverse the queue : "</span>);</span><br><span class="line">        queue.traverse();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>程序运行结果如下所示 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enter the data into the queue successfully : <span class="number">1</span></span><br><span class="line">enter the data into the queue successfully : <span class="number">2</span></span><br><span class="line">enter the data into the queue successfully : <span class="number">3</span></span><br><span class="line">enter the data into the queue successfully : <span class="number">4</span></span><br><span class="line">enter the data into the queue successfully : <span class="number">5</span></span><br><span class="line">the size of the queue : <span class="number">5</span></span><br><span class="line">traverse the queue : the all data of queue : [ <span class="number">1</span> ,<span class="number">2</span> ,<span class="number">3</span> ,<span class="number">4</span> ,<span class="number">5</span> , ]</span><br><span class="line"></span><br><span class="line">delete the data from the queue successfully : <span class="number">1</span></span><br><span class="line">delete the data from the queue successfully : <span class="number">2</span></span><br><span class="line">delete the data from the queue successfully : <span class="number">3</span></span><br><span class="line">delete the data from the queue successfully : <span class="number">4</span></span><br><span class="line">delete the data from the queue successfully : <span class="number">5</span></span><br><span class="line">the size of the queue : <span class="number">0</span></span><br><span class="line">traverse the queue : error : the queue is empty !</span><br></pre></td></tr></table></figure></p><p><em>参考书籍( 已纠正书中错误的示例代码 ) : 《数据结构与算法经典问题解析 - 原书第2版》</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-详解Queue的实现方式及其应用&quot;&gt;&lt;a href=&quot;#学习笔记-详解Queue的实现方式及其应用&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : 详解Queue的实现方式及其应用&quot;&gt;&lt;/a&gt;学习笔记 : 详解Queue的实现方式及其
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="data structures and algorithms" scheme="http://yoursite.com/tags/data-structures-and-algorithms/"/>
    
  </entry>
  
  <entry>
    <title>软件工程琐碎知识点</title>
    <link href="http://yoursite.com/2019/08/31/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2019/08/31/软件工程琐碎知识点/</id>
    <published>2019-08-31T00:16:29.000Z</published>
    <updated>2019-08-31T04:00:49.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-软件工程琐碎知识点"><a href="#学习笔记-软件工程琐碎知识点" class="headerlink" title="学习笔记 : 软件工程琐碎知识点"></a>学习笔记 : 软件工程琐碎知识点</h2><p><em>以下摘自软件工程书籍中各个章节的习题,一些琐碎的知识点而已~</em></p><h3 id="软件工程概述"><a href="#软件工程概述" class="headerlink" title="软件工程概述"></a>软件工程概述</h3><ol><li><p>什么是软件 ?</p><ul><li>答 : 计算机软件( Software )是指与计算机系统操作有关的程序,规程,规则及任何与之有关的数据和文档资料.</li></ul></li><li><p>什么是软件危机 ?</p><ul><li>答 : 西方计算机界的科学家把软件开发和维护过程中遇到的一系列严重问题统称为”软件危机”.</li></ul></li><li><p>什么是软件工程 ? 构成软件工程的要素是什么 ?</p><ul><li>答 : 软件工程是指导计算机软件开发和维护的工程学科. 软件工程的方法,工具,过程构成了软件工程的三要素.</li></ul></li></ol><h3 id="过程和声明周期的建模"><a href="#过程和声明周期的建模" class="headerlink" title="过程和声明周期的建模"></a>过程和声明周期的建模</h3><ol><li><p>什么是软件周期生命周期模型 ? 有哪些主要模型 ?</p><ul><li>答 : 瀑布模型( waterfall model )也称为软件生命周期模型 : 从时间角度对软件开发和维护的复杂问题进行分解,把软件生存的漫长周期依次划分为若干个阶段,每个阶段有相对独立的任务,然后逐步完成每个阶段的任务. 主要软件开发模型有 : 瀑布模型,渐近模型,螺旋模型,增量式开发模型等. . .</li></ul></li><li><p>什么是软件生存周期 ? 它有哪些活动 ? </p><ul><li>答 : 软件开发过程有时被称为软件生命周期,因为它从<code>概念</code>到<code>实现</code>,<code>交付</code>,<code>使用</code>和<code>维护</code>描述了软件产品的生命.</li></ul></li></ol><h3 id="可行性研究"><a href="#可行性研究" class="headerlink" title="可行性研究"></a>可行性研究</h3><ol><li><p>可行性研究的任务是什么 ? </p><ul><li>答 : 用最小的代价在尽可能短的时间内确定问题是否能够解决,是否有必要去解决</li></ul></li><li><p>说明系统流程图的作用 ?</p><ul><li>答 : 系统分析员可直接在系统流程图上模拟出可以实现计算机处理的部分,可利用系统流程图来分析业务流程的合理性,这些都是系统流程图的作用</li></ul></li></ol><h3 id="需求分析基础"><a href="#需求分析基础" class="headerlink" title="需求分析基础"></a>需求分析基础</h3><ol><li>需求分析阶段的任务是什么 ? <ul><li>答 : 对软件进行需求分析,继而将软件功能和性能的总体概念描述为具体的规格说明书,而这种规格说明书正式开发软件的基础哟</li></ul></li></ol><h3 id="面向数据流的分析方法"><a href="#面向数据流的分析方法" class="headerlink" title="面向数据流的分析方法"></a>面向数据流的分析方法</h3><ol><li><p>什么是数据流图 ? 其作用是什么 ? 其中基本符号各表示什么含义 ?</p><ul><li>答 :  数据流图( Data Flow Diagram )是软件系统逻辑模型的一种图形表示. 其作用为描述数据在系统中的流动和处理的情况,具有直观,形象,容易理解等优点. 数据流用箭头表示,加工用圆表示,文件用直线段表示,数据流的源点和终点用长方形表示.</li></ul></li><li><p>什么是数据词典 ? 其作用是什么 ? 它有哪些条目 ? </p><ul><li>答 : 数据字典( Data Dictionary )的作用与一般字典的作用一致,只不过它是用来对数据流图中出现的所有名字进行定义的,包括数据流,加工,文件等. 其作用为可以借助数据字典查出数据流图中每个名字的具体含义. 其包含的条目为<code>数据流</code>,<code>文件</code>,<code>数据项</code>,<code>加工</code>.</li></ul></li></ol><h3 id="软件设计基础"><a href="#软件设计基础" class="headerlink" title="软件设计基础"></a>软件设计基础</h3><ol><li><p>通常采用哪些措施来降低模块间的耦合度 ? </p><ul><li>答 : 一使用过程语句( 函数方式等 )调用其它模块,降低接口的复杂性. 二模块间传送的参数是数据. 三模块间共用的信息尽量少.</li></ul></li><li><p>PDL是什么 ?</p><ul><li>答 : 过程设计语言( Process Design Language )又称伪程序( Pseudo Code ),它是一种混杂语言.</li></ul></li><li><p>PAD是什么 ?</p><ul><li>答 : 问题分析图( Problem Analysis Diagram ),用二维树形结构的图来表示程序的控制流,将这种按”走树”规则翻译成程序代码比较容易.</li></ul></li><li><p>什么是模块的作用范围 ?</p><ul><li>答 : 模块的作用范围是指这个模块内的一个判定的作用范围. 判定的作用范围是指所有受这个判定( 直接或间接 )影响的模块.</li></ul></li></ol><h3 id="程序设计语言和编码"><a href="#程序设计语言和编码" class="headerlink" title="程序设计语言和编码"></a>程序设计语言和编码</h3><ol><li><p>程序设计语言主要有哪几类 ?</p><ul><li>答 : 机器语言( 第一代语言 ),汇编语言( 第二代语言 ),高级语言 : 包含第三代既面向过程的语言,第四代既新型程序设计语言.</li></ul></li><li><p>程序设计风格是什么 ? </p><ul><li>答 : 编程风格是在不影响性能的前提下,有效地编排和组织程序,以提高可读性和可维护性.</li></ul></li></ol><h3 id="检验和测试方法"><a href="#检验和测试方法" class="headerlink" title="检验和测试方法"></a>检验和测试方法</h3><ol><li><p>为什么要进行软件检测 ? 软件检测的主要手段有哪几种 ? </p><ul><li>答 : 若在软件投入生产运行之前,没有发现并纠正软件中的大部分差错,则这些错误迟早会在生产过程中暴露出来,那时不仅改正这些错误的代码更高,而且往往会造成很恶劣的后果哟. 软件检测的主要手段有 : 静态检查,动态检查,正确性证明</li></ul></li><li><p>为什么要进行软件评审 ? </p><ul><li>答 : 软件评审综合了技术性和管理性措施,手续并不复杂,难度不是很大,所需开支也不高,但效果甚好哟~</li></ul></li><li><p>软件测试的目的是什么 ? </p><ul><li>答 : 测试的目的是为了发现错误并而执行程序,只是在心理上被看做一种”破坏的步骤”</li></ul></li><li><p>什么是黑盒测试法 ?</p><ul><li>答 : 如果产品具备的功能已经知道,则可以测试它的每一个功能是否都达到了预期的要求.</li></ul></li><li><p>什么是白盒测试法 ?</p><ul><li>答 : 如果产品内部活动方式已经知道,则可以测试它的内部活动是否符合设计要求.</li></ul></li></ol><h3 id="软件维护"><a href="#软件维护" class="headerlink" title="软件维护"></a>软件维护</h3><ol><li><p>为什么要进行软件维护 ?</p><ul><li>答 : 因为计算机程序总是在变化 : 故障需要排除,改进的要加进去,而且优化工作也要做.</li></ul></li><li><p>什么是软件的可维护性 ?</p><ul><li>答 : 可维护性是指维护人员为纠正软件系统出现的错误或缺陷,以及为满足新的要求而理解,修改和完善软件系统的难易程度.</li></ul></li><li><p>软件维护的流程是 ? </p><ul><li>答 : 修改软件设计,复查,必要的代码修改,单元测试,整体测试,有效性测试和复审.</li></ul></li></ol><h3 id="统一建模语言"><a href="#统一建模语言" class="headerlink" title="统一建模语言"></a>统一建模语言</h3><ol><li><p>简述面向对象方法的特点 ?</p><ul><li>答 : 面向对象( Object Oriented). 面向对象方法的特点为 : 与人类习惯的思维方法一致,软件系统结构稳定,软件系统具有可复用性,软件系统易于维护.</li></ul></li><li><p>类与对象的关系是什么 ?</p><ul><li>答 : 类是指具有相同属性和操作的对象集合,是对象的抽象.</li></ul></li><li><p>UML有哪几部分组成 ?</p><ul><li>答 : 视图,图,模型元素,公共机制.</li></ul></li></ol><h3 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h3><ol><li><p>如何进行系统分解 ?</p><ul><li>答 : 可以将系统结构分为顶层,中间层和底层. 其中顶层为主控界面,中间层为业务处理子系统,底层为实体类与报表.</li></ul></li><li><p>简述动态模型的构成 ? </p><ul><li>答 : 动态模型分为交互模型和状态模型,其中交互模型包括顺序图与协作图,状态图模型包括状态图和活动图.</li></ul></li><li><p>顺序图中的消息分为哪几种类型 ?</p><ul><li>答 : 消息的类型包括简单消息,同步消息,异步消息和返回消息. 其中发送消息以实线箭头表示,返回消息以虚线箭头表示.</li></ul></li></ol><h3 id="面向对象软件开发工具"><a href="#面向对象软件开发工具" class="headerlink" title="面向对象软件开发工具"></a>面向对象软件开发工具</h3><ol><li><p>简述 Rational Rose 的特点 ?</p><ul><li>答 : 模型与代码高度一致,支持UML建模,可生成软件文档,可支持多种程序设计语言等特点.</li></ul></li><li><p>什么是顺序图 ?</p><ul><li>答 : 顺序图用于描述对象之间的交互行为,注重消息的时间顺序,是一种交互图.</li></ul></li><li><p>正向工程的概念是什么 ?</p><ul><li>答 : 正向工程( Forward Engineering )指从Rational Rose模型转换为某种特定语言代码的过程.</li></ul></li><li><p>逆向工程的概念是什么 ?</p><ul><li>答 : 逆向工程( Reverse Engineering )指将某种特定语言转化为Rational Rose模型的过程.</li></ul></li></ol><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ol><li>什么是设计模式 ? 其目的是什么 ?<ul><li>答 : 设计模式( Design Pattern )是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结. 其目的是为了代码可重用性、让代码更容易被他人理解、保证代码可靠性</li></ul></li></ol><h3 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h3><ol><li><p>什么是敏捷开发 ?</p><ul><li>答 : 敏捷开发( Aglie Development )是一种面临迅速变化的需求快速开发软件的能力.</li></ul></li><li><p>什么是极限编程 ?</p><ul><li>答 : 极限编程( eXtreme Programming )是敏捷方法中最著名的一种方法. 它是由一系列简单却相互依赖的实践组成,这些实践结合在一起形成了一个胜于部分结合的整体.</li></ul></li><li><p>什么是重构 ?</p><ul><li>答 : 重构( 名词 ) : 对软件内部结构的一种调整,目的是在不改变”软件之可观察行为”前提下提高其可理解性,降低其修改成本. 重构( 动词 ) : 使用一系列重构准则(手法),在不改变”软件之可观察行为”前提下,调整其结构.</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-软件工程琐碎知识点&quot;&gt;&lt;a href=&quot;#学习笔记-软件工程琐碎知识点&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : 软件工程琐碎知识点&quot;&gt;&lt;/a&gt;学习笔记 : 软件工程琐碎知识点&lt;/h2&gt;&lt;p&gt;&lt;em&gt;以下摘自软件工程书籍中各个章
      
    
    </summary>
    
    
      <category term="software engineering" scheme="http://yoursite.com/tags/software-engineering/"/>
    
  </entry>
  
  <entry>
    <title>使用MyBatis完成通用DAO和通用Service</title>
    <link href="http://yoursite.com/2019/08/27/%E4%BD%BF%E7%94%A8MyBatis%E5%AE%8C%E6%88%90%E9%80%9A%E7%94%A8DAO%E5%92%8C%E9%80%9A%E7%94%A8Service/"/>
    <id>http://yoursite.com/2019/08/27/使用MyBatis完成通用DAO和通用Service/</id>
    <published>2019-08-27T10:43:03.000Z</published>
    <updated>2019-08-27T14:52:50.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-使用MyBatis完成通用DAO和通用Service"><a href="#学习笔记-使用MyBatis完成通用DAO和通用Service" class="headerlink" title="学习笔记 : 使用MyBatis完成通用DAO和通用Service"></a>学习笔记 : 使用MyBatis完成通用DAO和通用Service</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><em>如 UserMapper 里面有 insert(User user) , find(Integer id) ,delete(Integer id) 等方法，则在 Service 中也要有这些方法的实现,假设每个 Mapper 有5个方法,则 Service 也需要有5个方法的实现. 如果有10个实体类, Mapper 可以省略( 可由工具生成 ),但是 Service 需要有这50个方法的实现. 既而后期会导致代码臃肿难以维护,且项目难以扩展哟~ 一般 Java 项目的分层结构图如下所示,详情请参考学习笔记 : <a href="https://yubuntu0109.github.io/2019/08/15/Java%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%ADPO-BO-VO-DTO-POJO-DAO%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/" target="_blank" rel="noopener">Java项目开发中PO,BO,VO,DTO,POJO,DAO的概念及其作用</a></em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/08/27/使用MyBatis完成通用DAO和通用Service/一般Java项目的分层结构.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="通用的DAO接口"><a href="#通用的DAO接口" class="headerlink" title="通用的DAO接口"></a>通用的DAO接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.memo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: memo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 通用的Mapper接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/22/2019-8:44 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(ID[] id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(T record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">selectByPrimaryKey</span><span class="params">(ID id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">selectBySelective</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(T record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeyWithBLOBs</span><span class="params">(T record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(T record)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用的Service接口"><a href="#通用的Service接口" class="headerlink" title="通用的Service接口"></a>通用的Service接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.memo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.memo.object.BaseConditionVO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: memo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 通用的Service接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/22/2019-8:54 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseService</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setBaseMapper</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(ID[] id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(T record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">selectByPrimaryKey</span><span class="params">(ID id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">selectBySelective</span><span class="params">(T record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">PageInfo&lt;T&gt; <span class="title">selectForPage</span><span class="params">(T reccord, BaseConditionVO baseConditionVO)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(T record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeyWithBLOBs</span><span class="params">(T record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(T record)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通用的Service实现类"><a href="#通用的Service实现类" class="headerlink" title="通用的Service实现类"></a>通用的Service实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.memo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.memo.object.BaseConditionVO;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.memo.dao.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.memo.service.BaseService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: memo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 通用的Service实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/22/2019-8:55 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractService</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">implements</span> <span class="title">BaseService</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BaseMapper&lt;T, ID&gt; baseMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化baseMapper</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBaseMapper</span><span class="params">(BaseMapper&lt;T, ID&gt; baseMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.baseMapper = baseMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(ID[] id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(T record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.insertSelective(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">selectByPrimaryKey</span><span class="params">(ID id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">selectBySelective</span><span class="params">(T record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectBySelective(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageInfo&lt;T&gt; <span class="title">selectForPage</span><span class="params">(T record, BaseConditionVO baseConditionVO)</span> </span>&#123;</span><br><span class="line">        PageHelper.startPage(baseConditionVO.getPageNum(), baseConditionVO.getPageSize()); <span class="comment">//设置每页的记录数</span></span><br><span class="line">        List&lt;T&gt; list = baseMapper.selectBySelective(record); <span class="comment">//获取列表信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(T record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.updateByPrimaryKey(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateByPrimaryKeyWithBLOBs</span><span class="params">(T record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.updateByPrimaryKeyWithBLOBs(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(T record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.updateByPrimaryKey(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(T record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.insert(record);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体的Mapper写法"><a href="#具体的Mapper写法" class="headerlink" title="具体的Mapper写法"></a>具体的Mapper写法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.memo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.memo.bean.Friend;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: memo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 好友信息数据访问层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019-08-25 10:06 AM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FriendMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Friend</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 8/23/2019 添加好友信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(Friend friend)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 8/23/2019 选择性查询好友信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">List&lt;Friend&gt; <span class="title">selectBySelective</span><span class="params">(Friend friend)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 8/23/2019 更新好友信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(Friend friend)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 8/23/2019 删除好友信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Integer[] id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体的Service写法"><a href="#具体的Service写法" class="headerlink" title="具体的Service写法"></a>具体的Service写法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.memo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.memo.bean.Friend;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: memo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 好友信息业务层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019-08-25 10:30 AM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FriendService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">Friend</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 8/25/2019 添加好友信息 </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(Friend friend)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 8/25/2019 选择性查询好友信息 </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">List&lt;Friend&gt; <span class="title">selectBySelective</span><span class="params">(Friend friend)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 8/25/2019 更新好友信息 </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(Friend friend)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 8/25/2019 删除好友信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Integer[] id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体的Service实现类写法"><a href="#具体的Service实现类写法" class="headerlink" title="具体的Service实现类写法"></a>具体的Service实现类写法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.memo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.memo.bean.Friend;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.memo.dao.FriendMapper;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.memo.object.BaseConditionVO;</span><br><span class="line"><span class="keyword">import</span> pers.huangyuhui.memo.service.FriendService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: memo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 好友信息业务层的实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/22/2019-x:xx PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FriendServiceImpl</span> <span class="keyword">extends</span> <span class="title">AbstractService</span>&lt;<span class="title">Friend</span>, <span class="title">Integer</span>&gt; <span class="keyword">implements</span> <span class="title">FriendService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FriendMapper friendMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//the method must be implemented</span></span><br><span class="line">    <span class="comment">//注:记得注入对象哟,不然会报空指针异常,因为在实际掉用的时候不是BaseMapper调用,而是这个friendMapper</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBaseMapper</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">super</span>.setBaseMapper(friendMapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(Friend record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.insertSelective(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Friend&gt; <span class="title">selectBySelective</span><span class="params">(Friend record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.selectBySelective(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageInfo&lt;Friend&gt; <span class="title">selectForPage</span><span class="params">(Friend record, BaseConditionVO baseConditionVO)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.selectForPage(record, baseConditionVO); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(Friend record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.updateByPrimaryKeySelective(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Integer[] id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>更多实现细节请参考我的 SpringBoot 小项目 : <a href="https://github.com/YUbuntu0109/springboot-beginner/tree/refactor-190823" target="_blank" rel="noopener">https://github.com/YUbuntu0109/springboot-beginner/tree/refactor-190823</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-使用MyBatis完成通用DAO和通用Service&quot;&gt;&lt;a href=&quot;#学习笔记-使用MyBatis完成通用DAO和通用Service&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : 使用MyBatis完成通用DAO和通用Serv
      
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>详解JDK 11中的新特性</title>
    <link href="http://yoursite.com/2019/08/22/JDK-11%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/22/JDK-11新特性详解/</id>
    <published>2019-08-22T01:17:34.000Z</published>
    <updated>2019-08-25T06:31:00.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-详解JDK-11中的新特性"><a href="#学习笔记-详解JDK-11中的新特性" class="headerlink" title="学习笔记 : 详解JDK 11中的新特性"></a>学习笔记 : 详解JDK 11中的新特性</h2><p><em>北京时间2018年9月26日,Oracle官方宣布 Java11 正式发布,这是 Java 大版本周期变化的第一个长期支持版本,非常值得关注. 从官网既可下载,最新发布的 Java11 将带来 ZGC, Http Client 等重要特性,一共包含17个 JEP (JDK Enhancement Proposals,既 JDK 增强方案提议), 其内容如下所示,更多详细信息请参阅 : <a href="http://openjdk.java.net/projects/jdk/11/" target="_blank" rel="noopener">http://openjdk.java.net/projects/jdk/11/</a></em></p><ol><li>181: Nest-Based Access Control (嵌套类可见性控制)</li><li>309: Dynamic Class-File Constants (动态文件常量)</li><li>315: Improve Aarch64 Intrinsics (改进Aarch64 Intrinsics)</li><li>318: Epsilon: A No-Op Garbage Collector (Epsilon:一个无操作的垃圾收集器)</li><li>320: Remove the Java EE and CORBA Modules (删除Java EE和CORBA模块)</li><li>321: HTTP Client (Standard) (<code>重点:标准HTTP客户端</code>)</li><li>323: Local-Variable Syntax for Lambda Parameters (用于Lambda参数的局部变量语法)</li><li>324: Key Agreement with Curve25519 and Curve448 (Curve25519和Curve448算法的密钥协议)</li><li>327: Unicode 10</li><li>328: Flight Recorder (飞行记录器)</li><li>329: ChaCha20 and Poly1305 Cryptographic Algorithms (haCha20和Poly1305加密算法支持)</li><li>330: Launch Single-File Source-Code Programs (启动单一文件的源代码程序)</li><li>331: Low-Overhead Heap Profiling (低开销的Heap Profiling)</li><li>332: Transport Layer Security (TLS) 1.3 (<code>重点:支持 TLS 1.3</code>)</li><li>333: ZGC: A Scalable Low-Latency Garbage Collector (Experimental) (可伸缩低延迟垃圾收集器)</li><li>335: Deprecate the Nashorn JavaScript Engine (弃用Nashorn JavaScript引擎)</li><li>336: Deprecate the Pack200 Tools and API (弃用Pack200工具和API)</li></ol><h3 id="String-新增方法"><a href="#String-新增方法" class="headerlink" title="String 新增方法"></a>String 新增方法</h3><p><em>新增加一系列字符串处理方法,程序示例如下 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断字符串是否为空白</span></span><br><span class="line">    <span class="keyword">var</span> blank = <span class="string">" \t \n "</span>.isBlank();</span><br><span class="line">    <span class="comment">//去除首尾空白</span></span><br><span class="line">    <span class="keyword">var</span> strip = <span class="string">" JavaStack "</span>.strip();</span><br><span class="line">    <span class="comment">//去除尾部空格</span></span><br><span class="line">    <span class="keyword">var</span> trailing = <span class="string">"JavaStack "</span>.stripTrailing();</span><br><span class="line">    <span class="comment">//去除首部空格</span></span><br><span class="line">    <span class="keyword">var</span> leading = <span class="string">" JavaStack"</span>.stripLeading();</span><br><span class="line">    <span class="comment">//复制字符串</span></span><br><span class="line">    <span class="keyword">var</span> repeat = <span class="string">"JavaStack"</span>.repeat(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//行数统计</span></span><br><span class="line">    <span class="keyword">var</span> count = <span class="string">"A\nB\nC"</span>.lines().count();</span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    List.of(blank, strip, trailing, leading, repeat, count).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>程序运行结果如下所示 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">JavaStack</span><br><span class="line">JavaStack</span><br><span class="line">JavaStack</span><br><span class="line">JavaStackJavaStackJavaStack</span><br><span class="line">3</span><br></pre></td></tr></table></figure></p><h3 id="启动单一文件的源代码程序"><a href="#启动单一文件的源代码程序" class="headerlink" title="启动单一文件的源代码程序"></a>启动单一文件的源代码程序</h3><p><em>JDK11之前我们若运行一个 Java 源代码必须先编译,再运行,两个执行步骤. 而在 JDK11 版本中我们可以通过一个 Java 命令就直接搞定咯,如下所示 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDK11版本之前需先编译后再运行程序</span></span><br><span class="line">javac JavaStack.java</span><br><span class="line">java JavaStack</span><br><span class="line"><span class="comment">//JDK11版本可直接运行程序</span></span><br><span class="line">java JavaStack.java</span><br></pre></td></tr></table></figure></p><p><em>一个命令编译运行源代码的注意点 :</em></p><ul><li>只执行源文件中的第一个类,既第一个类必须包含主方法</li><li>不可以使用其它源文件中的自定义类( 本文件中的自定义类是可以使用的 )</li></ul><h3 id="优化局部变量类型推断"><a href="#优化局部变量类型推断" class="headerlink" title="优化局部变量类型推断"></a>优化局部变量类型推断</h3><p><em>在 var 上添加注解的语法格式在 JDK10 中是不能实现的,但在 JDK11 中加入了这样的语法</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; consumer = (<span class="meta">@Nonnull</span> <span class="keyword">var</span> s) -&gt; s.toUpperCase();</span><br></pre></td></tr></table></figure></p><h3 id="删除-Java-EE-和-CORBA-模块"><a href="#删除-Java-EE-和-CORBA-模块" class="headerlink" title="删除 Java EE 和 CORBA 模块"></a>删除 Java EE 和 CORBA 模块</h3><p><em>Java EE和 CORBA 两个模块在 JDK9 中已经标记<code>deprecated</code>,在 JDK11 中正式移除. JDK中 deprecated 的意思是在不建议使用,在未来的release版本会被删除. JavaEE由4部分组成 :</em></p><ul><li>JAX-WS (Java API for XML-Based Web Services)</li><li>JAXB (Java Architecture for XML Binding)</li><li>JAF (the JavaBeans Activation Framework)</li><li>Common Annotations</li></ul><p><em>这些特性和 JavaSE 关系不大,并且JavaEE被维护在 Github( <a href="https://github.com/javaee" target="_blank" rel="noopener">https://github.com/javaee</a> )中,版本同步造成维护困难. 最后,JavaEE 可以单独引用,Maven中心仓库也提供了 JavaEE( <a href="https://mvnrepository.com/artifact/javax/javaee-api" target="_blank" rel="noopener">https://mvnrepository.com/artifact/javax/javaee-api</a> ),所以没必要把JavaEE包含到JavaSE中. 而 CORBA( Common Object Request Broker Architecture,公共对象请求代理体系结构 )被标记为 Proposed Optional,既而表明将来可能会放弃对这些技术的必要支持</em></p><p><em>更多 JDK11 的新特性描述请参阅 : <a href="https://docs.oracle.com/en/java/javase/11/" target="_blank" rel="noopener">JDK11 官方文档</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-详解JDK-11中的新特性&quot;&gt;&lt;a href=&quot;#学习笔记-详解JDK-11中的新特性&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : 详解JDK 11中的新特性&quot;&gt;&lt;/a&gt;学习笔记 : 详解JDK 11中的新特性&lt;/h2&gt;&lt;p&gt;&lt;e
      
    
    </summary>
    
    
      <category term="JDK11" scheme="http://yoursite.com/tags/JDK11/"/>
    
  </entry>
  
  <entry>
    <title>详解JDK 10中的新特性</title>
    <link href="http://yoursite.com/2019/08/21/JDK-10%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/21/JDK-10新特性详解/</id>
    <published>2019-08-21T08:49:44.000Z</published>
    <updated>2019-08-25T06:31:00.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-详解JDK-10中的新特性"><a href="#学习笔记-详解JDK-10中的新特性" class="headerlink" title="学习笔记 : 详解JDK 10中的新特性"></a>学习笔记 : 详解JDK 10中的新特性</h2><p><em>2018年3月21日,Oracle官方宣布 Java10 正式发布. 需要注意的是 Java9 和 Java19 都不是 LTS( Long-Term-Support )版本,和过去的 Java 大版本升级不同,这两个只有两年半左右的开发和维护期. 而 Java11,也就是18.9LTS,才是继 Java8 之后的第一个 LTS 版本. JDK10 中一共定义了109个新特性,其中包含12个 JEP,还有一些新 API 和 JVM 规范以及 Java 语言规范上的改动,JDK10 的12个 JEP( JDK Enhancement Proposal 特性加强提议 )如下所示,更多信息请参阅官方文档 : <a href="http://openjdk.java.net/projects/jdk/10/" target="_blank" rel="noopener">http://openjdk.java.net/projects/jdk/10/</a></em></p><ol><li>Local-Variable Type Inference (<code>主要重点:局部变量类型推断</code>)</li><li>Consolidate the JDK Forest into a Single Repository (JDK库的合并)</li><li>Garbage-Collector Interface (统一的垃圾回收接口)</li><li>Parallel Full GC for G1 (为G1提供并行的Full GC)</li><li>Application Class-Data Sharing (应用程序类数据( AppCDS )共享)</li><li>Thread-Local Handshakes (threadLocal握手交互)</li><li>Remove the Native-Header Generation Tool (javah) (移除JDK中附带的javah工具)</li><li>Additional Unicode Language-Tag Extensions (使用附加的Unicode语言标记扩展)</li><li>Heap Allocation on Alternative Memory Devices (在可选内存设备上进行堆分配)</li><li>Experimental Java-Based JIT Compiler (使用基于Java的JIT编译器)</li><li>Root Certificates (根证书)</li><li>Time-Based Release Versioning (基于时间的发布版本)</li></ol><h3 id="局部变量类型推断"><a href="#局部变量类型推断" class="headerlink" title="局部变量类型推断"></a>局部变量类型推断</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><em>很多人抱怨 Java 是一种强类型,需要引入大量的样板代码. 甚至在这些情况下,给定好变量名,通常很清楚发生了什么,明显类型声明往往被认为是不必要的. 许多流行的编程语言都已经支持某种形式的局部变量类型推断 : 如C++ (auto), C# (var), Scala (var/val), Go (declaration with :=)等</em></p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><em>Java 局部变量类型推断( LVTI ),JDK10 中可以使用 var 作为局部变量类型推断标识符,<code>此符号仅适用于局部变量,增强for循环的索引,以及传统for循环的本地变量. 它不能使用于方法形式参数,构造函数形式参数,方法返回类型,字段,catch块形式参数或任何其他类型的变量声明</code>. 标识符 var 不是关键字,相反,它是一个保留的类型名称. 这意味着 var 用作变量,方法名或则包名称的代码不会受到影响. 但 var 不能作为类或则接口的名字( 但这样命名是比较罕见的,因为他违反了通常的命名约定,类和接口首字母应该大写 ). <code>其工作原理为 : 在处理 var 时,编译器先是查看表达式右边部分,并根据右边变量值的类型进行推断,作为左边变量的类型,然后将该类型写入字符码当中</code></em></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><em>类型推断代码示例 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"ABC"</span>; <span class="comment">//根据推断为字符串类型</span></span><br><span class="line"><span class="keyword">var</span> l = <span class="number">10L</span>; <span class="comment">//根据10L推断为long类型</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="keyword">true</span>; <span class="comment">//根据true推断为boolean类型</span></span><br><span class="line"><span class="keyword">var</span> flag1 = <span class="number">1</span>; <span class="comment">//这里会推断boolean类型,0表示false非0表示true</span></span><br><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">//推断为ArrayList&lt;String&gt;</span></span><br><span class="line"><span class="keyword">var</span> stream = list.stream(); <span class="comment">//推断为Stream&lt;String&gt;</span></span><br></pre></td></tr></table></figure></p><p><em>上述示例代码的反编译class文件 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"ABC"</span>;</span><br><span class="line"><span class="keyword">long</span> l = <span class="number">10L</span>;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">int</span> flag1 = <span class="keyword">true</span>;</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">Stream&lt;String&gt; stream = list.stream();</span><br></pre></td></tr></table></figure></p><p><em>遍历代码中使用类型推断 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合遍历</span></span><br><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> s : list) &#123; &#125;</span><br><span class="line"><span class="comment">//普通遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123; &#125;</span><br></pre></td></tr></table></figure></p><p><em>var 类型可以被final修饰符修饰</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> limit = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><em>在局部变量使用中,这些情况不适用类型推断哟 : <code>没有初始化的局部变量声明</code>, <code>方法的返回类型</code>, <code>方法的参数类型</code>, <code>构造器的参数类型</code>, <code>属性</code>, <code>catch块</code>. 部分示例如下所示</em></p><ol><li><p><em>初始值不能为null,既如果局部变量不赋值,则无法实现类型推断</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//error</span></span><br><span class="line"><span class="keyword">var</span> string1;</span><br><span class="line"><span class="keyword">var</span> string2 = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></li><li><p><em>为数组静态初始化中,语法格式需要注意</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">//正确写法</span></span><br><span class="line"><span class="keyword">var</span> array2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">//正确写法</span></span><br><span class="line"><span class="keyword">var</span> array3 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">//错误写法</span></span><br></pre></td></tr></table></figure></li><li><p><em>Lambda表达式及方法引用中,左边的函数式接口不能声明为 var</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确写法</span></span><br><span class="line">Comparator&lt;Integer&gt; comparator = (o1, o2) -&gt; Integer.compare(o1, o2);</span><br><span class="line"><span class="comment">//错误写法</span></span><br><span class="line"><span class="keyword">var</span> comparator = (o1, o2) -&gt; Integer.compare(o1, o2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确写法</span></span><br><span class="line">Consumer&lt;String&gt; consumer = System.out::println;</span><br><span class="line"><span class="comment">//错误写法</span></span><br><span class="line"><span class="keyword">var</span> consumer = System.out::println;</span><br></pre></td></tr></table></figure></li></ol><p><em>更多 JDK10 的新特性描述请参阅 : <a href="http://openjdk.java.net/projects/jdk/10/" target="_blank" rel="noopener">官方文档</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-详解JDK-10中的新特性&quot;&gt;&lt;a href=&quot;#学习笔记-详解JDK-10中的新特性&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : 详解JDK 10中的新特性&quot;&gt;&lt;/a&gt;学习笔记 : 详解JDK 10中的新特性&lt;/h2&gt;&lt;p&gt;&lt;e
      
    
    </summary>
    
    
      <category term="JDK10" scheme="http://yoursite.com/tags/JDK10/"/>
    
  </entry>
  
  <entry>
    <title>详解JDK 9中的新特性</title>
    <link href="http://yoursite.com/2019/08/21/JDK-9%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/21/JDK-9新特性详解/</id>
    <published>2019-08-21T02:15:16.000Z</published>
    <updated>2019-08-25T06:31:00.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-详解JDK-9中的新特性"><a href="#学习笔记-详解JDK-9中的新特性" class="headerlink" title="学习笔记 : 详解JDK 9中的新特性"></a>学习笔记 : 详解JDK 9中的新特性</h2><p><em>由于 JDK9 中下面两个特性很重要,所有小哥我就单独分开写啦~</em></p><ul><li>详解JDK 9中的新特性 : <a href="https://github.com/YUbuntu0109/YUbuntu0109.github.io/blob/824e4435b7805308c25cf6d4bc9d12dfe57c3acb/source/_posts/JDK-9%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E7%9A%84%E5%8F%98%E5%8C%96%E5%8F%8A%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E6%A8%A1%E5%9D%97%E5%8C%96.md" target="_blank" rel="noopener">JDK 9目录结构的变化及新特性之模块化</a> </li><li>详解JDK 9中的新特性 : <a href="https://github.com/YUbuntu0109/YUbuntu0109.github.io/blob/5d65a860c457559e757af21b4aac423d6f7e912f/source/_posts/JDK-9%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BREPL-JShell.md" target="_blank" rel="noopener">JDK 9新特性之REPL(JShell)</a></li></ul><h3 id="接口的私有方法"><a href="#接口的私有方法" class="headerlink" title="接口的私有方法"></a>接口的私有方法</h3><p><em>Java 8 中规定接口中的方法除了抽象方法之外,还可以定义静态和默认的方法. 一定程度上扩展了接口的功能,此时的接口更像是一个抽象类. 而在 Java 9 中,接口更加的灵活和强大,连方法的访问权限修饰符都可以声明为 private 的了,此时方法将不会成为你对外暴露的 API 的一部分,话说这个语法的改进不应该在 Java 8 中就施行的嘛~ 示例程序如下 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.jdk9;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注:其方法的默认权限为public哟</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">//jdk 8</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        privateMethod();</span><br><span class="line">        System.out.println(<span class="string">"this is default method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//jdk 8</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is static method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//jdk 9</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">privateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is private method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 测试JDK8及JDK9中的接口新语法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/21/2019-10:26 AM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grammar</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Override</span></span><br><span class="line">    <span class="comment">//public void defaultMethod() &#123;</span></span><br><span class="line">    <span class="comment">//    System.out.println("override the default method");</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyInterface.staticMethod();</span><br><span class="line">        <span class="keyword">new</span> Grammar().defaultMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>程序运行结果如下所示 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this is static method</span><br><span class="line">this is private method</span><br><span class="line">this is default method</span><br></pre></td></tr></table></figure></p><h3 id="钻石操作符的使用升级"><a href="#钻石操作符的使用升级" class="headerlink" title="钻石操作符的使用升级"></a>钻石操作符的使用升级</h3><p><em>与匿名实现类共同使用钻石操作符( diamond operator )在 Java 8 中如下的操作是会报错的,编译报错信息 : <code>Cannot use &quot;&lt;&gt;&quot; with anonymous inner classes</code>,在IDEA中将 Language level 调成 Java 9 即可解决编译错误啦</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> Comparator&lt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(o1, o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparator.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化代码:(JDK8)Lambda表达式写法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testComparatorWithLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; comparator = (o1, o2) -&gt; Integer.compare(o1, o2);</span><br><span class="line">    System.out.println(comparator.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化代码:(JDK8)方法引用写法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testComparatorWithMethodRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; comparator = Integer::compare;</span><br><span class="line">    System.out.println(comparator.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="改进的-try-with-resourcs"><a href="#改进的-try-with-resourcs" class="headerlink" title="改进的 try-with-resourcs"></a>改进的 try-with-resourcs</h3><p><em>在 Java 7 中可以实现资源的自动关闭,但是<code>要求必须将需要自动关闭的所有资源必须在try子句中进行初始化</code>,否则编译不通过. 而在 Java 9 中可以将需要自动关闭的资源的实例放在 try 的小括号外哟,程序示例如下所示 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDK7版本之前释放资源的写法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    InputStreamReader reader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        reader = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">        <span class="keyword">char</span>[] buffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">50</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">if</span> ((len = reader.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            String s = <span class="keyword">new</span> String(buffer, <span class="number">0</span>, len);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JDK7版本释放资源的写法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTryWithJDK7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(System.in)) &#123;</span><br><span class="line">        <span class="comment">//reader = null; //注意:此时reader已被为设置为常量,既而不能修改</span></span><br><span class="line">        <span class="keyword">char</span>[] buffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">50</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">if</span> ((len = reader.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            String s = <span class="keyword">new</span> String(buffer, <span class="number">0</span>, len);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JDK9版本优化了JDK7释放资源的写法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTryWithJDK9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">    OutputStreamWriter writer = <span class="keyword">new</span> OutputStreamWriter(System.out);<span class="comment">//unused</span></span><br><span class="line">    <span class="keyword">try</span> (reader; writer) &#123;</span><br><span class="line">        <span class="keyword">char</span>[] buffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">50</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">if</span> ((len = reader.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            String s = <span class="keyword">new</span> String(buffer, <span class="number">0</span>, len);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="String存储结构的变更"><a href="#String存储结构的变更" class="headerlink" title="String存储结构的变更"></a>String存储结构的变更</h3><p><em>从很多不同应用程序收集的信息表明,发现字符串是堆使用的主要组成部分. 而且,大多数字符串对象只包含一个字符,这样的字符只需要一个字节的存储空间,既而导致这些字符串对象的内部char数组中有一半的空间被闲置</em></p><ul><li>JDK9 之前 String 底层使用 char 数组存储数据 <code>private final char value[]</code></li><li>JDK9 将 String 底层存储数据改为 byte 数组存储数据 <code>private final byte[] value</code></li><li>StringBuffer 和 StringBuilder 也同样做了变更,将以往 char 数组改为 byte 数组</li></ul><h3 id="快速创建只读集合"><a href="#快速创建只读集合" class="headerlink" title="快速创建只读集合"></a>快速创建只读集合</h3><p><em>JDK9在 List、Set 和 Map 集合中新增 of 静态方法,快速创建只读集合,程序示例如下所示 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.jdk9;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 快速创建只读集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/21/2019-1:19 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在JDK9之前创建只读集合</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"A"</span>);</span><br><span class="line">        list.add(<span class="string">"B"</span>);</span><br><span class="line">        list.add(<span class="string">"C"</span>);</span><br><span class="line">        <span class="comment">//将List集合设为只读</span></span><br><span class="line">        list = Collections.unmodifiableList(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">"E"</span>);</span><br><span class="line">        set.add(<span class="string">"F"</span>);</span><br><span class="line">        set.add(<span class="string">"G"</span>);</span><br><span class="line">        <span class="comment">//将Set集合设为只读</span></span><br><span class="line">        set = Collections.unmodifiableSet(set);</span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">        map.put(<span class="string">"k2"</span>, <span class="string">"v2"</span>);</span><br><span class="line">        map.put(<span class="string">"k3"</span>, <span class="string">"v3"</span>);</span><br><span class="line">        <span class="comment">//将Map集合设为只读</span></span><br><span class="line">        map = Collections.unmodifiableMap(map);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在JDK9中,可以使用of方法直接快速创建只读集合</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithJDK9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建List只读集合</span></span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//创建Set只读集合</span></span><br><span class="line">        Set&lt;String&gt; set = Set.of(<span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"G"</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">        <span class="comment">//创建List只读集合</span></span><br><span class="line">        Map&lt;String, String&gt; map = Map.of(<span class="string">"k1"</span>, <span class="string">"v1"</span>, <span class="string">"k2"</span>, <span class="string">"v2"</span>, <span class="string">"k3"</span>, <span class="string">"v3"</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>程序运行结果相同,如下所示 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[A, B, C]</span><br><span class="line">[E, F, G]</span><br><span class="line">&#123;k1=v1, k2=v2, k3=v3&#125;</span><br></pre></td></tr></table></figure></p><h3 id="增强的-InputStream-API"><a href="#增强的-InputStream-API" class="headerlink" title="增强的 InputStream API"></a>增强的 InputStream API</h3><p><em>InputStream 终于有了一个非常有用的方法 : <code>transferTo</code>, 可以用来将数据直接传输到 OutputStream,这是在处理原始数据流时非常常见的一种用法,示例代码如下所示 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransferTo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">    ClassLoader classLoader = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line">    InputStream is = classLoader.getResourceAsStream(<span class="string">"from.txt"</span>);</span><br><span class="line">    OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"to.txt"</span>);</span><br><span class="line">    <span class="keyword">try</span> (is; os) &#123;</span><br><span class="line">        <span class="keyword">assert</span> is != <span class="keyword">null</span>;</span><br><span class="line">        is.transferTo(os);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="增强的-Stream-API"><a href="#增强的-Stream-API" class="headerlink" title="增强的 Stream API"></a>增强的 Stream API</h3><p><em>Java 的 Stream API 是 Java 标准款最好的改进之一,让开发者能够快速运算,从而能够有效的利用数据并行计算. Java 8 提供的Stream能够利用多核架构实现声明式的数据处理. 而在 Java 9 中,Stream API 变得更好,Stream 接口中添加了4个新方法 ( <code>takeWhile</code>, <code>dropWhile</code>, <code>ofNullable</code>, <code>iterate的重载方法</code> ), 及为你提供一个 Predicate( 判断条件 )来指定什么时候结束迭代. 除了对 Stream 本身的扩展, Optional 和 Stream 之间的结合也得到了改进,现在可以通过 Optional 的新对象 stream() 来将一个 Optional 对象转换为一个可能为空的 Stream 对象. 程序示例如下所示 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//takeWhile: 可以用于从Stream中获取一部分数据,接受一个Predicate来进行选择,在有序的Stream中,takeWhile返回从头开始的尽可能多的元素</span></span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">45</span>, <span class="number">43</span>, <span class="number">76</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">77</span>, <span class="number">90</span>, <span class="number">73</span>, <span class="number">67</span>, <span class="number">88</span>);</span><br><span class="line">    list.stream().takeWhile((x) -&gt; x &lt; <span class="number">80</span>).forEach(System.out::println);</span><br><span class="line">    <span class="comment">//运行结果 : 45 43 76</span></span><br><span class="line">    <span class="comment">//从返回结果可以看出:takeWhile将会按照list集合有序的从45开始到第一个不符合条件为止的所有结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//dropWhile: dropWhile方法刚好与takeWhile想法,返回剩余的元素</span></span><br><span class="line">    List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">45</span>, <span class="number">43</span>, <span class="number">76</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">77</span>, <span class="number">90</span>, <span class="number">73</span>, <span class="number">67</span>, <span class="number">88</span>);</span><br><span class="line">    list2.stream().dropWhile((x) -&gt; x &lt; <span class="number">80</span>).forEach(System.out::println);</span><br><span class="line">    <span class="comment">//运行结果 :87 42 77 90 73 67 88</span></span><br><span class="line">    <span class="comment">//从返回结果可以看出:dropWhile方法刚好和takeWhile方法形成互补,按照list集合有序的返回从第一个不满足条件元素开始到最后为止的所有结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ofNullable: 在JDK8中Stream不能完全为null,否则会报空指针异常. 而在JDK9中ofNullable方法允许创建一个为空的Stream</span></span><br><span class="line">    <span class="comment">//Stream&lt;Object&gt; stream1 = Stream.of(null);</span></span><br><span class="line">    <span class="comment">//System.out.println(stream1.count());//NullPointerException</span></span><br><span class="line">    <span class="comment">//不报异常,允许这样写</span></span><br><span class="line">    Stream&lt;String&gt; stringStream = Stream.of(<span class="string">"AA"</span>, <span class="string">"BB"</span>, <span class="keyword">null</span>);</span><br><span class="line">    System.out.println(stringStream.count()); <span class="comment">//程序运行结果:3</span></span><br><span class="line">    <span class="comment">//不报异常,允许这样写</span></span><br><span class="line">    List&lt;String&gt; list3 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list3.add(<span class="string">"A"</span>);</span><br><span class="line">    list3.add(<span class="keyword">null</span>);</span><br><span class="line">    System.out.println(list3.stream().count()); <span class="comment">//程序运行结果:2</span></span><br><span class="line">    <span class="comment">//ofNullable():允许值为 null</span></span><br><span class="line">    Stream&lt;Object&gt; stream = Stream.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">    System.out.println(stream.count()); <span class="comment">//程序运行结果:0</span></span><br><span class="line">    Stream&lt;String&gt; stream2 = Stream.ofNullable(<span class="string">"Hello World"</span>);</span><br><span class="line">    System.out.println(stream2.count()); <span class="comment">//程序运行结果:1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//iterate()的重载方法</span></span><br><span class="line">    <span class="comment">//JDK8 使用iterate方法,需配合limit截止</span></span><br><span class="line">    Stream.iterate(<span class="number">1</span>, (x) -&gt; x + <span class="number">1</span>).limit(<span class="number">10</span>).forEach(System.out::print);</span><br><span class="line">    <span class="comment">//JDK9 使用iterate的重载方法可以直接使用Predicate来截止</span></span><br><span class="line">    Stream.iterate(<span class="number">1</span>, (x) -&gt; x &lt;= <span class="number">10</span>, (x) -&gt; x + <span class="number">1</span>).forEach(System.out::print);</span><br><span class="line">    <span class="comment">//程序运行结果:12345678910</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="改进的-Optional-类"><a href="#改进的-Optional-类" class="headerlink" title="改进的 Optional 类"></a>改进的 Optional 类</h3><p><em>Optional 类是在JDK8中新增的类,主要是为了解决空指针异常. 在JDK9中对这个类进行了改进,主要是新增了三个方法 : <code>stream</code>, <code>ifPresentOrElse</code> 和 <code>or</code></em></p><ul><li><code>stream</code> : 将 Optional转为一个 Stream,如果 Optional 没有值就返回一个 Stream.empty</li><li><code>ifPresentOrElse</code> : 如果 Optional 包含值,则对其包含的值调用函数 action,即 action.accept(value),这与 ifPresent 一致.与 ifPresent 方法的区别在于 ifPresentOrElse 还有第二个参数 emptyAction. 如果 Optional 不包含值,那么 ifPresentOrElse 便会调用 emptyAction,即 emptyAction.run()</li><li><code>or</code> : 如果 Optional 有值,返回 Optional 指定的值,否则返回一个预设的值</li></ul><h3 id="全新的-HTTP-客服端-API"><a href="#全新的-HTTP-客服端-API" class="headerlink" title="全新的 HTTP 客服端 API"></a>全新的 HTTP 客服端 API</h3><p><em>JDK9 中有新的方式来处理 HTTP 调用. 它提供了一个新的HTTP客户端(HttpClient),它将替代仅适用于 blocking 模式的HttpURLConnection( HttpURLConnection是在HTTP 1.0的时代创建的,并使用了协议无关的方法 ),并提供对 WebSocket 和 HTTP/2 的支持. 此外,HTTP 客户端还提供 API 来处理 HTTP/2 的特性,比如流和服务器推送等功能. 全新的 HTTP 客户端 API 可以从 jdk.incubator.httpclient 模块中获取. 因为在默认情况下,这个模块是不能根据 classpath 获取的,需要使用<code>add modules</code>命令选项配置这个模块,将这个模块添加到 classpath中</em></p><h3 id="javadoc-的-HTML5-支持"><a href="#javadoc-的-HTML5-支持" class="headerlink" title="javadoc 的 HTML5 支持"></a>javadoc 的 HTML5 支持</h3><p><em>JDK8 生成的 java 帮助文档是在 HTML4 中,而HTML4 已经是很久的标准了. JDK9 的 javadoc 现支持HTML5 标准</em></p><p><em>更多 JDK9 的新特性描述请参阅 : <a href="https://docs.oracle.com/javase/9/whatsnew/toc.htm" target="_blank" rel="noopener">What’s New in JDK9</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-详解JDK-9中的新特性&quot;&gt;&lt;a href=&quot;#学习笔记-详解JDK-9中的新特性&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : 详解JDK 9中的新特性&quot;&gt;&lt;/a&gt;学习笔记 : 详解JDK 9中的新特性&lt;/h2&gt;&lt;p&gt;&lt;em&gt;由于
      
    
    </summary>
    
    
      <category term="JDK9" scheme="http://yoursite.com/tags/JDK9/"/>
    
  </entry>
  
  <entry>
    <title>JDK 9新特性之REPL( JShell )</title>
    <link href="http://yoursite.com/2019/08/20/JDK-9%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BREPL-JShell/"/>
    <id>http://yoursite.com/2019/08/20/JDK-9新特性之REPL-JShell/</id>
    <published>2019-08-20T10:24:35.000Z</published>
    <updated>2019-08-25T06:31:00.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-JDK-9新特性之REPL-JShell"><a href="#学习笔记-JDK-9新特性之REPL-JShell" class="headerlink" title="学习笔记 : JDK 9新特性之REPL( JShell )"></a>学习笔记 : JDK 9新特性之REPL( JShell )</h2><h3 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h3><p><em>像 Python 和 Scala之类的语言早就有交互式编程环境 REPL( read-evaluate-print-loop )了,以交互式的方式对语句和表达式进行求值,开发者只需要输入一些代码,就可以在编译前获得对程序的反馈. 而之前的 Java 版本想要执行代码,必须创建文件,声明类,提供测试方法才可以实现,而现在使用 JShell( 既写既的,快速运行 ) 就可以摆脱这种困扰咯~</em></p><h3 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h3><ul><li>Java9 终于拥有了 REPL 工具 JShell : 既而可以让 Java 可以像脚本语言一样运行,从控制台启动 JShell,利用 JShell 在没有创建类的情况下直接声明变量,计算表达式,执行语句. 既开发时可以在命令行里直接运行Java的代码,而无需再创建 Java 文件,无需再使用 <code>public static void main(String[]args)</code>这句废话</li><li>JShell 也可以从文件中加载语句或将语句保存到文件中</li><li>JShell 也可以是 tab 键进行自动补全和自动添加分号</li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><em>JShell 中的命令和代码片段是不一样的,命令都是以前导的反斜杠 <code>/</code> 开头,比如要显示所有已经定义的变量,可以使用 <code>/var</code>, 要显示所有已经定义的方法,可以使用 <code>/methods</code>,要显示所有已经定义的类型,可以使用 <code>/types</code>, 要显示所有输入的代码片段,可以使用 <code>/list</code> · · ·</em></p><p><em>进入JShell命令行环境 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator</span><br><span class="line">λ jshell</span><br><span class="line">|  Welcome to JShell -- Version 11.0.2</span><br><span class="line">|  For an introduction type: /help intro</span><br><span class="line"></span><br><span class="line">jshell&gt;</span><br></pre></td></tr></table></figure></p><p><em>输入<code>/help</code>可以查看 JShell 相关的命令 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; /help                                                                                     </span><br><span class="line">|  Type a Java language expression, statement, or declaration.                                    </span><br><span class="line">|  Or type one of the following commands:                                                         </span><br><span class="line">|  /list [&lt;name or id&gt;|-all|-start]                                                               </span><br><span class="line">|       list the source you have typed                                                            </span><br><span class="line">|  /edit &lt;name or id&gt;                                                                             </span><br><span class="line">|       edit a source entry                                                                       </span><br><span class="line">|  /drop &lt;name or id&gt;                                                                             </span><br><span class="line">|       delete a source entry                                                                     </span><br><span class="line">|  /save [-all|-history|-start] &lt;file&gt;                                                            </span><br><span class="line">|       Save snippet source to a file                                                             </span><br><span class="line">|  /open &lt;file&gt;                                                                                   </span><br><span class="line">|       open a file as source input                                                               </span><br><span class="line">|  /vars [&lt;name or id&gt;|-all|-start]                                                               </span><br><span class="line">|       list the declared variables and their values                                              </span><br><span class="line">|  /methods [&lt;name or id&gt;|-all|-start]                                                            </span><br><span class="line">|       list the declared methods and their signatures                                            </span><br><span class="line">|  /types [&lt;name or id&gt;|-all|-start]                                                              </span><br><span class="line">|       list the type declarations                                                                </span><br><span class="line">|  /imports                                                                                       </span><br><span class="line">|       list the imported items                                                                   </span><br><span class="line">|  /exit [&lt;integer-expression-snippet&gt;]                                                           </span><br><span class="line">|       exit the jshell tool                                                                      </span><br><span class="line">|  /env [-class-path &lt;path&gt;] [-module-path &lt;path&gt;] [-add-modules &lt;modules&gt;] ...                   </span><br><span class="line">|       view or change the evaluation context                                                     </span><br><span class="line">|  /reset [-class-path &lt;path&gt;] [-module-path &lt;path&gt;] [-add-modules &lt;modules&gt;]...                  </span><br><span class="line">|       reset the jshell tool                                                                     </span><br><span class="line">|  /reload [-restore] [-quiet] [-class-path &lt;path&gt;] [-module-path &lt;path&gt;]...                      </span><br><span class="line">|       reset and replay relevant history -- current or previous (-restore)                       </span><br><span class="line">|  /history [-all]                                                                                </span><br><span class="line">|       history of what you have typed                                                            </span><br><span class="line">|  /help [&lt;command&gt;|&lt;subject&gt;]                                                                    </span><br><span class="line">|       get information about using the jshell tool                                               </span><br><span class="line">|  /set editor|start|feedback|mode|prompt|truncation|format ...                                   </span><br><span class="line">|       set configuration information                                                             </span><br><span class="line">|  /? [&lt;command&gt;|&lt;subject&gt;]                                                                       </span><br><span class="line">|       get information about using the jshell tool                                               </span><br><span class="line">|  /!                                                                                             </span><br><span class="line">|       rerun last snippet -- see /help rerun                                                     </span><br><span class="line">|  /&lt;id&gt;                                                                                          </span><br><span class="line">|       rerun snippets by ID or ID range -- see /help rerun                                       </span><br><span class="line">|  /-&lt;n&gt;                                                                                          </span><br><span class="line">|       rerun n-th previous snippet -- see /help rerun                                            </span><br><span class="line">|                                                                                                 </span><br><span class="line">|  For more information type &apos;/help&apos; followed by the name of a                                    </span><br><span class="line">|  command or a subject.                                                                          </span><br><span class="line">|  For example &apos;/help /list&apos; or &apos;/help intro&apos;.                                                    </span><br><span class="line">|                                                                                                 </span><br><span class="line">|  Subjects:                                                                                      </span><br><span class="line">|                                                                                                 </span><br><span class="line">|  intro                                                                                          </span><br><span class="line">|       an introduction to the jshell tool                                                        </span><br><span class="line">|  id                                                                                             </span><br><span class="line">|       a description of snippet IDs and how use them                                             </span><br><span class="line">|  shortcuts                                                                                      </span><br><span class="line">|       a description of keystrokes for snippet and command completion,                           </span><br><span class="line">|       information access, and automatic code generation                                         </span><br><span class="line">|  context                                                                                        </span><br><span class="line">|       a description of the evaluation context options for /env /reload and /reset               </span><br><span class="line">|  rerun                                                                                          </span><br><span class="line">|       a description of ways to re-evaluate previously entered snippets                          </span><br><span class="line">                                                                                                  </span><br><span class="line">jshell&gt;</span><br></pre></td></tr></table></figure></p><p><em>JShell 命令的自动补全功能 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; /</span><br><span class="line">/!          /?          /drop       /edit       /env        /exit       /help       /history    /imports</span><br><span class="line">/list       /methods    /open       /reload     /reset      /save       /set        /types      /vars</span><br><span class="line"></span><br><span class="line">&lt;press tab again to see synopsis&gt;</span><br><span class="line"></span><br><span class="line">jshell&gt; /</span><br></pre></td></tr></table></figure></p><p><em><code>System.out.</code>后按下 Tab 键,就会列出当前类的所有的 public 方法的列表哟</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; System.out.</span><br><span class="line">append(        checkError()   close()        equals(        flush()        format(        getClass()</span><br><span class="line">hashCode()     notify()       notifyAll()    print(         printf(        println(       toString()</span><br><span class="line">wait(          write(</span><br><span class="line"></span><br><span class="line">jshell&gt;</span><br></pre></td></tr></table></figure></p><p><em>实例 : 在 JShell 中使用 Stream 流过滤并遍历输出数组元素 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; public void streamDemo()&#123;</span><br><span class="line">   ...&gt; String[]array = &#123;&quot;a&quot;,&quot;bc&quot;,&quot;bcd&quot;,&quot;abcd&quot;&#125;;</span><br><span class="line">   ...&gt; Stream.of(array).filter(e-&gt;e.startsWith(&quot;a&quot;)).filter(e-&gt;e.length()&gt;3).forEach(System.out::println);</span><br><span class="line">   ...&gt; &#125;</span><br><span class="line">|  created method streamDemo()</span><br><span class="line"></span><br><span class="line">jshell&gt; streamDemo();</span><br><span class="line">abcd</span><br></pre></td></tr></table></figure></p><p><em>例如使用<code>/imports</code>命令用于查看已导入的包 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; /imports</span><br><span class="line">|    import java.io.*</span><br><span class="line">|    import java.math.*</span><br><span class="line">|    import java.net.*</span><br><span class="line">|    import java.nio.file.*</span><br><span class="line">|    import java.util.*</span><br><span class="line">|    import java.util.concurrent.*</span><br><span class="line">|    import java.util.function.*</span><br><span class="line">|    import java.util.prefs.*</span><br><span class="line">|    import java.util.regex.*</span><br><span class="line">|    import java.util.stream.*</span><br><span class="line"></span><br><span class="line">jshell&gt;</span><br></pre></td></tr></table></figure></p><p><em>列出到目前为止当前 <code>session</code> 里所有有效的代码片段 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; /list</span><br><span class="line"></span><br><span class="line">   1 : System.out.println(&quot;demo&quot;);</span><br><span class="line">   2 : public void streamDemo()&#123;</span><br><span class="line">       String[]array = &#123;&quot;a&quot;,&quot;bc&quot;,&quot;bcd&quot;,&quot;abcd&quot;&#125;;</span><br><span class="line">       Stream.of(array)</span><br><span class="line">       .filter(e-&gt;e.startsWith(&quot;a&quot;))</span><br><span class="line">       .filter(e-&gt;e.length()&gt;3)</span><br><span class="line">       .forEach(System.out::println);</span><br><span class="line">       &#125;</span><br><span class="line">   3 : streamDemo();</span><br><span class="line"></span><br><span class="line">jshell&gt;</span><br></pre></td></tr></table></figure></p><p><em>列出到目前为止当前 session 里所有方法 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; /method</span><br><span class="line">|    void StreamDemo()</span><br></pre></td></tr></table></figure></p><p><em>在 JShell 中可以启用 JShell Edit Pad 编辑器来写更加便捷地书写 Java 代码,只需要输入命令<code>/edit</code>,代码编辑完成后,先点击”Accept”按钮,再点击”Exit”按钮,继而退出编辑器</em><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/08/20/JDK-9新特性之REPL-JShell/JShell-Edit-Pad-Demo.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p><em>调用已修改的程序,其运行结果如下所示 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; /edit</span><br><span class="line">|  created method streamDemo()</span><br><span class="line"></span><br><span class="line">jshell&gt; /edit</span><br><span class="line">|  modified method streamDemo()</span><br><span class="line">|    update overwrote method streamDemo()</span><br><span class="line"></span><br><span class="line">jshell&gt; streamDemo();</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">jshell&gt;</span><br></pre></td></tr></table></figure></p><p><em>JShell Edit Pad 编辑器功能非常有限,仅能提供一些最基础的功能,不过好消息是 JShell 可以配置外部的代码编辑器,只需要使用 <code>/edit</code> 设置外部编辑器的完整路径即可,例如使用 VS Code 来作为外部的代码编辑器</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; /set editor /Visual Studio Code/Microsoft VS Code/Code.exe</span><br><span class="line">|  Editor set to: /Visual Studio Code/Microsoft VS Code/Code.exe</span><br></pre></td></tr></table></figure></p><p><em>从外部加载源代码 : 如果在外部已经有写好的 Java 文件,则可以使用 <code>/open</code> 命令导入到 JShell 环境中,例如现在有一个Test.java文件</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; /open /Java/Test.java</span><br><span class="line"></span><br><span class="line">jshell&gt; /methods</span><br><span class="line">|    int add(int,int)</span><br><span class="line">|    int sub(int,int)</span><br><span class="line"></span><br><span class="line">jshell&gt; add(1,2);</span><br><span class="line">$5 ==&gt; 3</span><br><span class="line"></span><br><span class="line">jshell&gt;</span><br></pre></td></tr></table></figure></p><p><em>JShell 命令缩写,例如 <code>/list</code> 的缩写为 <code>/l</code>,例如 <code>/list -all</code> 的缩写为 <code>/l -a</code>. 例如,我们可以使用 <code>/l -a</code> 来代替 <code>list -all</code> 输出所有的代码片段 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; /l -a                                                                     </span><br><span class="line">                                                                                  </span><br><span class="line">  s1 : import java.io.*;                                                          </span><br><span class="line">  s2 : import java.math.*;                                                        </span><br><span class="line">  s3 : import java.net.*;                                                         </span><br><span class="line">  s4 : import java.nio.file.*;                                                    </span><br><span class="line">  s5 : import java.util.*;                                                        </span><br><span class="line">  s6 : import java.util.concurrent.*;                                             </span><br><span class="line">  s7 : import java.util.function.*;                                               </span><br><span class="line">  s8 : import java.util.prefs.*;                                                  </span><br><span class="line">  s9 : import java.util.regex.*;                                                  </span><br><span class="line"> s10 : import java.util.stream.*;                                                 </span><br><span class="line">   1 : System.out.println(&quot;demo&quot;);                                                </span><br><span class="line">   2 : public void StreamDemo()&#123;                                                  </span><br><span class="line">       String[]array = &#123;&quot;a&quot;,&quot;bc&quot;,&quot;bcd&quot;,&quot;abcd&quot;&#125;;                                   </span><br><span class="line">       Stream.of(array)                                                           </span><br><span class="line">       .filter(e-&gt;e.startsWith(&quot;a&quot;))                                              </span><br><span class="line">       .filter(e-&gt;e.length()&gt;3)                                                   </span><br><span class="line">       .forEach(System.out::println);                                             </span><br><span class="line">       &#125;                                                                          </span><br><span class="line">   3 : StreamDemo();                                                              </span><br><span class="line">   4 : public void streamDemo() &#123;                                                 </span><br><span class="line">           String[] array = &#123;&quot;a&quot;, &quot;bc&quot;, &quot;abc&quot;, &quot;bcd&quot;, &quot;abcd&quot;&#125;;                    </span><br><span class="line">           long count = Stream.of(array)                                          </span><br><span class="line">        .filter(element -&gt; element.startsWith(&quot;a&quot;))                               </span><br><span class="line">        .filter(element -&gt; element.length()&gt;3)                                    </span><br><span class="line">        .count();                                                                 </span><br><span class="line">           System.out.println(count);                                             </span><br><span class="line">       &#125;                                                                          </span><br><span class="line">   5 : public void streamDemo() &#123;                                                 </span><br><span class="line">           String[] array = &#123;&quot;a&quot;, &quot;bc&quot;, &quot;abc&quot;, &quot;bcd&quot;, &quot;abcd&quot;, &quot;abcde&quot;&#125;;           </span><br><span class="line">           long count = Stream.of(array)                                          </span><br><span class="line">        .skip(1)                                                                  </span><br><span class="line">        .filter(element -&gt; element.startsWith(&quot;a&quot;))                               </span><br><span class="line">        .filter(element -&gt; element.length()&gt;3)                                    </span><br><span class="line">        .count();                                                                 </span><br><span class="line">           System.out.println(count);                                             </span><br><span class="line">       &#125;                                                                          </span><br><span class="line">   6 : streamDemo();                                                              </span><br><span class="line">                                                                                  </span><br><span class="line">jshell&gt;</span><br></pre></td></tr></table></figure></p><p><em>退出 JShell</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; /exit</span><br><span class="line">|  Goodbye</span><br></pre></td></tr></table></figure></p><p><em>更多 JShell 的详细介绍请参考 : <a href="https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm" target="_blank" rel="noopener">官方介绍文档</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-JDK-9新特性之REPL-JShell&quot;&gt;&lt;a href=&quot;#学习笔记-JDK-9新特性之REPL-JShell&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : JDK 9新特性之REPL( JShell )&quot;&gt;&lt;/a&gt;学习笔记 :
      
    
    </summary>
    
    
      <category term="JDK9" scheme="http://yoursite.com/tags/JDK9/"/>
    
  </entry>
  
  <entry>
    <title>JDK 9目录结构的变化及新特性之模块化</title>
    <link href="http://yoursite.com/2019/08/20/JDK-9%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E7%9A%84%E5%8F%98%E5%8C%96%E5%8F%8A%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://yoursite.com/2019/08/20/JDK-9目录结构的变化及新特性之模块化/</id>
    <published>2019-08-20T08:21:13.000Z</published>
    <updated>2019-08-25T06:31:00.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-JDK-9目录结构的变化及新特性之模块化"><a href="#学习笔记-JDK-9目录结构的变化及新特性之模块化" class="headerlink" title="学习笔记 : JDK 9目录结构的变化及新特性之模块化"></a>学习笔记 : JDK 9目录结构的变化及新特性之模块化</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><em>JDK 9( JDK 9以后的版本 )的具体目录结构如下所示 :</em></p><ul><li><code>bin</code> : 该目录包含所有的命令</li><li><code>conf</code> : 包含用户可以编辑的配置文件,例如以前位于jre\lib 目录中的 .properties 和 .policy 文件</li><li><code>include</code> : 包含一些编译本地代码时使用的C/C++头文件</li><li><code>jmods</code> : 包含JMOD 格式的平台模块,创建自定义运行映射时需要它</li><li><code>legal</code> : 包含法律声明</li><li><code>lib</code> : 包含非 Windows 平台上动态链接的本地库,其子目录和文件不应由开发人员直接编辑或使用</li></ul><p><em>注 : <code>JDK9 目录中不再有jre子目录</code></em></p><h3 id="模块化系统"><a href="#模块化系统" class="headerlink" title="模块化系统"></a>模块化系统</h3><p><em>Java 9最大的变化之一是引入了模块系统( Jigsaw 项目 ),主要原因是Java和相关生态在不断丰富的同时越来越暴露一些问题 :</em></p><ul><li>Java 运行环境的膨胀和臃肿. 每次加载 JVM 启动时,至少会有 30 ~ 60MB 内存加载,主要原因是<code>JVM需要加载rt.jar</code>,不管其中的类是否被 classloader 加载,第一步整个 jar 都会被 JVM 加载到内存当中去( 而模块化可以根据模块的需要加载程序运行需要的class )</li><li>当代码库越来越大,创建复杂,盘根错节的”意大利面条式代码”的几率呈指数级的增长, 不同版本的类库交叉依赖导致让人头疼的问题,这些都是阻碍了 Java 开发和运行效率的提升</li><li>很难真正地对代码进行封装,而系统并没有对不同部分( 也就是JAR文件 ) 之间的依赖关系有个明确的概念,每一个公共类都可以被类路径之下任何其它的公共类访问到,这样就会导致无意中使用了并不想被公开访问的 API </li></ul><p><em><code>模块化的概念</code> : 模块( 代码和数据的封装体 )的概念其实就是package外再包裹一层,用模块来管理各个package,使得代码组织上更加安全,因为他可以指定哪些部分可以暴露,哪些部分可以隐藏</em></p><p><em><code>模块化的特性</code> : Java9 模块的重要特征是在其工件 (artifact) 的根目录中包含了一个描述模块的 module-info.class 文件,这个文件由根目录中的源代码文件 module-info.java 编译而来,该模块声明文件可以描述模块的不同特征. JDK 9将 JDK 分成一组模块,可以在编译时,运行时或构建时进行组合. 模块化可以减少内存开销,只需必要的模块,并非全部模块,既而可以简化各种类库和大型应用的开发和维护</em></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ol><li><em>模块目录结构如下所示( 有两个名称分别为modela, modelb的模块 ) :</em></li></ol><p><img src="/2019/08/20/JDK-9目录结构的变化及新特性之模块化/JDK9-新特性之模块化-模块目录结构.png" alt></p><ol><li><p><em>modela模块中的module-info.java :</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> modela &#123;</span><br><span class="line">    <span class="keyword">exports</span> com.cnblogs.bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>modelb模块中的module-info.java :</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> modelb &#123;</span><br><span class="line">    <span class="keyword">requires</span> modela;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>modelb模块中的Test.java :</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cnblogs.tset;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.cnblogs.bean.Person;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">"jdk9"</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=&apos;jdk9&apos;, age=2&#125;</span><br></pre></td></tr></table></figure></li></ol><p><em>如上示例,如果需要在modelb模块项目中使用modela模块项目的内容,必须在modela项目的module-info.java中定义<code>exports com.cnblogs.bean</code>将该目录下可以被其他模块使用,如果没有写,则包默认是封装在模块下,不被外界使用. 而在modela项目中需要使用<code>requires modela</code>导入需要使用的模块名,则可以在modelb中使用modela定义exports的类 (即而才可以在Test类中使用Person类)</em></p><ul><li><code>module-info.java</code> : 该文件必须位于项目的根目录中. 该文件用于定义模块需要什么依赖,以及那些包被外部使用</li><li><code>exports</code> : 控制着那些包可以被其他模块访问到,所有不被exports的包默认都被封装在模块里面不被外界所使用</li><li><code>requires</code> : 指明对其他模块的依赖</li></ul><p><em>参考博客 : <a href="https://www.cnblogs.com/peter1018/p/9209951.html" target="_blank" rel="noopener">《JDK9 新特性》</a></em></p><p><em>更多新特性详细信息请参阅 : <a href="https://docs.oracle.com/javase/9/whatsnew/toc.htm" target="_blank" rel="noopener">What’s New in JDK9</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-JDK-9目录结构的变化及新特性之模块化&quot;&gt;&lt;a href=&quot;#学习笔记-JDK-9目录结构的变化及新特性之模块化&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : JDK 9目录结构的变化及新特性之模块化&quot;&gt;&lt;/a&gt;学习笔记 : JD
      
    
    </summary>
    
    
      <category term="JDK9" scheme="http://yoursite.com/tags/JDK9/"/>
    
  </entry>
  
  <entry>
    <title>JDK 9新特性概述</title>
    <link href="http://yoursite.com/2019/08/20/JDK-9%E6%96%B0%E7%89%B9%E6%80%A7%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2019/08/20/JDK-9新特性概述/</id>
    <published>2019-08-20T01:01:19.000Z</published>
    <updated>2019-08-25T06:31:00.987Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习笔记-JDK-9新特性概述"><a href="#学习笔记-JDK-9新特性概述" class="headerlink" title="学习笔记 : JDK 9新特性概述"></a>学习笔记 : JDK 9新特性概述</h3><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><em>⏳ 来看一下Java成立到Java 9版本发布的时间线吧,不得不说比我还大三岁哟~</em></p><ul><li>1990年初, 最初被命名为Oak</li><li>1995年5月23日, Java语言诞生</li><li>1996年1月, 第一个JDK-JDK1.0诞生</li><li>1996年4月, 10个最主要的操作系统供应商申明将在其产品中嵌入Java技术</li><li>1996年9月, 约8.3万个网页应用了Java技术来制作</li><li>1997年2月18日, JDK1.1发布</li><li>1997年4月2日, JavaOne会议召开, 参与者逾一万人, 创当时全球同类会议纪录</li><li>1997年9月, JavaDeveloperConnection 社区成员超过十万</li><li>1998年2月, JDK1.1被下载超过2,000,000次</li><li>1998年12月8日, Java 2企业平台J2EE发布</li><li>1999年6月, SUN公司发布Java三个版本 : 标准版(J2SE)、企业版(J2EE)和微型版(J2ME)</li><li>2000年5月8日, JDK1.3发布</li><li>2000年5月29日, JDK1.4发布</li><li>2001年6月5日, Nokia宣布到2003年将出售1亿部支持Java的手机</li><li>2001年9月24日, J2EE1.3发布</li><li>2002年2月26日, J2SE1.4发布, 此后Java的计算能力有了大幅提升</li><li>2004年9月30日, J2SE1.5发布, 成为Java语言发展史上的又一里程碑. 为了表示该版本的重要性, J2SE1.5更名为Java SE 5.0</li><li>2005年6月, JavaOne大会召开, SUN公司公开Java SE 6. 此时Java的各种版本已经更名, 以取消其中的数字”2” : J2EE更名为Java EE,J2SE更名为Java SE, J2ME更名为Java ME</li><li>2006年12月, SUN公司发布JRE6.0</li><li>2009年4月20日, 甲骨文以74亿美元的价格收购SUN公司, 取得java的版权, 业界传闻说这对Java程序员是个坏消息(其实恰恰相反)</li><li>2010年11月, 由于甲骨文对Java社区的不友善,因此Apache扬言将退出JCP</li><li>2011年7月28日, 甲骨文发布Java SE 7</li><li>2014年3月18日, 甲骨文发表Java SE 8</li><li>2017年7月, 甲骨文发表Java SE 9, 其带来了很多新特性, 其中最主要的变化是已经实现的模块化系统</li></ul><h3 id="JDK-9新特新"><a href="#JDK-9新特新" class="headerlink" title="JDK 9新特新"></a>JDK 9新特新</h3><ol><li><code>模块系统</code> : 模块是一个包的容器,Java 9 最大的变化之一是引入了模块系统(Jigsaw 项目)</li><li><code>REPL (JShell)</code> : 交互式编程环境</li><li><code>HTTP 2 客户端</code> : HTTP/2标准是HTTP协议的最新版本,新的 HTTPClient API 支持 WebSocket 和 HTTP2 流以及服务器推送特性</li><li><code>改进的 Javadoc</code> : Javadoc 现在支持在 API 文档中的进行搜索,另外Javadoc 的输出现在符合兼容 HTML5 标准</li><li><code>多版本兼容 JAR 包</code> : 多版本兼容 JAR 功能能让你创建仅在特定版本的 Java 环境中运行库程序时选择使用的 class 版本</li><li><code>集合工厂方法</code> : List,Set 和 Map 接口中,新的静态工厂方法可以创建这些集合的不可变实例</li><li><code>私有接口方法</code> : 在接口中使用private私有方法,我们可以使用 private 访问修饰符在接口中编写私有方法</li><li><code>进程 API</code> : 改进的 API 来控制和管理操作系统进程. 引进 java.lang.ProcessHandle 及其嵌套接口 Info 来让开发者逃离时常因为要获取一个本地进程的 PID 而不得不使用本地代码的窘境</li><li><code>改进的 Stream API</code> : 改进的 Stream API 添加了一些便利的方法,使流处理更容易,并使用收集器编写复杂的查询</li><li><code>改进 try-with-resources</code> : 如果你已经有一个资源是 final 或等效于 final 变量,您可以在 try-with-resources 语句中使用该变量,而无需在 try-with-resources 语句中声明一个新变量</li><li><code>改进的弃用注解 @Deprecated</code> : 注解 @Deprecated 可以标记 Java API 状态,可以表示被标记的 API 将会被移除,或者已经破坏</li><li><code>改进钻石操作符(Diamond Operator)</code>  : 匿名类可以使用钻石操作符(Diamond Operator)</li><li><code>改进 Optional 类</code> : java.util.Optional 添加了很多新的有用方法,Optional 可以直接转为 stream</li><li><code>多分辨率图像 API</code> : 定义多分辨率图像API,开发者可以很容易的操作和展示不同分辨率的图像了</li><li><code>改进的 CompletableFuture API</code> : CompletableFuture 类的异步机制可以在 ProcessHandle.onExit 方法退出时执行操作</li><li><code>轻量级的 JSON API</code> : 内置了一个轻量级的JSON API</li><li><code>响应式流(Reactive Streams) API</code> : Java 9中引入了新的响应式流 API 来支持 Java 9 中的响应式编程</li></ol><p><em>更多的新特性描述请参阅 : <a href="https://docs.oracle.com/javase/9/whatsnew/toc.htm" target="_blank" rel="noopener">What’s New in JDK9</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;学习笔记-JDK-9新特性概述&quot;&gt;&lt;a href=&quot;#学习笔记-JDK-9新特性概述&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : JDK 9新特性概述&quot;&gt;&lt;/a&gt;学习笔记 : JDK 9新特性概述&lt;/h3&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="JDK9" scheme="http://yoursite.com/tags/JDK9/"/>
    
  </entry>
  
  <entry>
    <title>JDK 8新特性之默认方法的基本使用</title>
    <link href="http://yoursite.com/2019/08/19/JDK-8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/19/JDK-8新特性之默认方法的基本使用/</id>
    <published>2019-08-19T12:41:39.000Z</published>
    <updated>2019-08-25T06:31:00.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-JDK-8新特性之默认方法的基本使用"><a href="#学习笔记-JDK-8新特性之默认方法的基本使用" class="headerlink" title="学习笔记 : JDK 8新特性之默认方法的基本使用"></a>学习笔记 : JDK 8新特性之默认方法的基本使用</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><em>Java 8 新增了接口的默认方法,简单点说既默认方法就是接口可以有实现方法,而且不需要实现类去实现其方法. 我们只需在方法名前面加个 default 关键字即可实现默认方法的定义哟~ 那为什么要引入这个特性呢 ? 解答如下 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">首先,之前的接口是个双刃剑,好处是面向抽象而不是面向具体编程. 缺陷是当需要修改接口时候,需要修改全部实现该接口的类,目前的 java 8 之前的集合框架没有 foreach 方法,通常能想到的解决办法是在JDK里给相关的接口添加新的方法及实现. 然而,对于已经发布的版本,是没法在给接口添加新方法的同时不影响已有的实现. 所以引进的默认方法,他们的目的是为了解决接口的修改与现有的实现不兼容的问题</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">*接口默认方法的`类优先`原则 : 若一个接口中定义了一个默认方法,而另一个父类或接口中又定义了一个同名的方法时,可分为情况 :*</span><br><span class="line">* 选择父类中的方法 : 如果一个父类提供了具体的实现,那么接口中具有相同名称和参数的默认方法会被忽略</span><br><span class="line">* 接口冲突 : 如果一个父接口提供了一个默认方法,而另一个接口也提供了一个具有相同名称和参数列表的方法( 不管方法是否为默认方法 ),那么必须覆盖该方法来解决冲突</span><br><span class="line"></span><br><span class="line">*语法格式如下所示 :*</span><br><span class="line">```java</span><br><span class="line">public interface Vehicle &#123;</span><br><span class="line">   default void print()&#123;</span><br><span class="line">      System.out.println(&quot;this is a car&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="多个默认方法"><a href="#多个默认方法" class="headerlink" title="多个默认方法"></a>多个默认方法</h3><p><em>一个接口有默认方法,考虑这样的情况,一个类实现了多个接口,且这些接口有相同的默认方法,以下实例说明了这种情况的解决方法 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"this is a car"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FourWheeler</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"this is a brougham"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>第一个解决方案是创建自己的默认方法,来覆盖重写接口的默认方法 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Vehicle</span>, <span class="title">FourWheeler</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"this is a motorcycle"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>第二种解决方案可以使用 super 来调用指定接口的默认方法 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Vehicle</span>, <span class="title">FourWheeler</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Vehicle.<span class="keyword">super</span>.print();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="静态默认方法"><a href="#静态默认方法" class="headerlink" title="静态默认方法"></a>静态默认方法</h3><p><em>Java 8 的另一个特性是接口可以声明( 并且可以提供实现 )静态方法,例如 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"this is a car"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">blowHorn</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"sound the horn"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="默认方法实例"><a href="#默认方法实例" class="headerlink" title="默认方法实例"></a>默认方法实例</h3><p><em>通过以下代码来了解下关于默认方法的使用吧~</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.jdk8.method;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is a car"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">blowHorn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sound the horn"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">FourWheeler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is a brougham"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Vehicle</span>, <span class="title">FourWheeler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Vehicle.<span class="keyword">super</span>.print();</span><br><span class="line">        FourWheeler.<span class="keyword">super</span>.print();</span><br><span class="line">        Vehicle.blowHorn();</span><br><span class="line">        System.out.println(<span class="string">"this is a motorcycle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 默认方法实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/19/2019-9:11 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Vehicle vehicle = <span class="keyword">new</span> Car();</span><br><span class="line">        vehicle.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>程序运行结果如下所示 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this is a car</span><br><span class="line">this is a brougham</span><br><span class="line">sound the horn</span><br><span class="line">this is a motorcycle</span><br></pre></td></tr></table></figure></p><p><em>参考 《Java 8 默认方法》 : <a href="https://www.runoob.com/java/java8-default-methods.html" target="_blank" rel="noopener">https://www.runoob.com/java/java8-default-methods.html</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-JDK-8新特性之默认方法的基本使用&quot;&gt;&lt;a href=&quot;#学习笔记-JDK-8新特性之默认方法的基本使用&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : JDK 8新特性之默认方法的基本使用&quot;&gt;&lt;/a&gt;学习笔记 : JDK 8新特性
      
    
    </summary>
    
    
      <category term="JDK8" scheme="http://yoursite.com/tags/JDK8/"/>
    
  </entry>
  
  <entry>
    <title>JDK 8新特性之Optional类的基本使用</title>
    <link href="http://yoursite.com/2019/08/19/JDK-8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BOptional%E7%B1%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/19/JDK-8新特性之Optional类的基本使用/</id>
    <published>2019-08-19T09:59:44.000Z</published>
    <updated>2019-08-25T06:31:00.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-JDK-8新特性之Optional类的基本使用"><a href="#学习笔记-JDK-8新特性之Optional类的基本使用" class="headerlink" title="学习笔记 : JDK 8新特性之Optional类的基本使用"></a>学习笔记 : JDK 8新特性之Optional类的基本使用</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><em>到目前为止,臭名昭著的空指针异常是导致Java应用程序失败的最常见原因. 以前为了解决空指针异常,Google公司著名的Guava项目引入了<code>Optional类</code>,Guava通过使用检查空值的方法来防止代码受污染,它鼓励程序员写更干净的代码~ 受到Google Guava的启发,Option类已经成为Java 8类库的一部分. <code>java.util.Optional&lt;T&gt;</code>是一个容器类,它可以保存类型为T的值,代表这个值存在. 或者仅仅保存null,表示这个值不存在. 原来用null表示一个值不存在,现在Optional可以更好的表达这个概念,并且可以避免空指针异常~</em></p><ul><li><em>Optional类的javadoc对其的描述为 : 这是一个可以为null的容器对象,如果值存在则<code>isPresent()</code>方法会返回true,调用<code>get()</code>方法会返回该对象</em></li></ul><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><ol><li><p><code>static &lt;T&gt; Optional&lt;T&gt; empty()</code> : 返回空的 Optional 实例</p></li><li><p><code>boolean equals(Object obj)</code> : 判断其他对象是否等于 Optional</p></li><li><p><code>Optional&lt;T&gt; filter(Predicate&lt;? super &lt;T&gt; predicate)</code> : 如果值存在,并且这个值匹配给定的 predicate,返回一个Optional用以描述这个值,否则返回一个空的Optional</p></li><li><p><code>&lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T,Optional&lt;U&gt;&gt; mapper)</code> : 如果值存在,返回基于Optional包含的映射方法的值,否则返回一个空的Optional</p></li><li><p><code>T get()</code> : 如果在这个Optional中包含这个值,返回值,否则抛出异常:NoSuchElementException</p></li><li><p><code>int hashCode()</code> : 返回存在值的哈希码,如果值不存在则返回 0</p></li><li><p><code>void ifPresent(Consumer&lt;? super T&gt; consumer)</code> : 如果值存在则使用该值调用 consumer,否则不做任何事情</p></li><li><p><code>boolean isPresent()</code> : 如果值存在则方法会返回true,否则返回 false</p></li><li><p><code>&lt;U&gt;Optional&lt;U&gt; map(Function&lt;? super T,? extends U&gt; mapper)</code> : 如果有值,则对其执行调用映射函数得到返回值. 如果返回值不为 null,则创建包含映射返回值的Optional作为map方法返回值,否则返回空Optional</p></li><li><p><code>static &lt;T&gt; Optional&lt;T&gt; of(T value)</code> : 返回一个指定非null值的Optional</p></li><li><p><code>static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value)</code> : 如果为非空,返回 Optional 描述的指定值,否则返回空的 Optional</p></li><li><p><code>T orElse(T other)</code> : 如果存在该值,返回值,否则返回 other</p></li><li><p><code>T orElseGet(Supplier&lt;? extends T&gt; other)</code> : 如果存在该值,返回值,否则触发 other,并返回 other 调用的结果</p></li><li><p><code>&lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</code> : 如果存在该值,返回包含的值，否则抛出由 Supplier 继承的异常</p></li><li><p><code>String toString()</code> : 返回一个Optional的非空字符串,用来调试</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-JDK-8新特性之Optional类的基本使用&quot;&gt;&lt;a href=&quot;#学习笔记-JDK-8新特性之Optional类的基本使用&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : JDK 8新特性之Optional类的基本使用&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="JDK 8" scheme="http://yoursite.com/tags/JDK-8/"/>
    
  </entry>
  
  <entry>
    <title>Stream流基本使用的综合案例</title>
    <link href="http://yoursite.com/2019/08/19/Stream%E6%B5%81%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E7%9A%84%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    <id>http://yoursite.com/2019/08/19/Stream流基本使用的综合案例/</id>
    <published>2019-08-19T05:27:27.000Z</published>
    <updated>2019-08-25T06:31:01.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Stream流基本使用的综合案例"><a href="#学习笔记-Stream流基本使用的综合案例" class="headerlink" title="学习笔记 : Stream流基本使用的综合案例"></a>学习笔记 : Stream流基本使用的综合案例</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><em>现有两个<code>ArrayList</code>集合分别存储着若干个元素,要求 : 一使用传统的for循环 / 增强for循环依次进行以下若干操作步骤, 二使用Stream流的方式依次进行以下若干操作步骤,相信最后你定会体会到<code>Stream</code>的美 (✪ω✪)~</em></p><ol><li>第一个集合只要包含’E’字符的元素,并将其存储到一个新集合中</li><li>第一个集合筛选之后只要前3个元素,并将其存储到新集合中</li><li>第二个集合只要包含’K’字符的元素,并将其存储到新集合中</li><li>第二个集合筛选之后不要前2两个元素,并将其存储到一个新集合中</li><li>将两个集合合并成一个集合,并存储到一个新集合中</li><li>根据合并后的集合中的元素值创建Element对象,并将其存储到新集合中</li><li>打印整个集合的Element对象信息</li></ol><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><h4 id="传统方式的代码实现"><a href="#传统方式的代码实现" class="headerlink" title="传统方式的代码实现"></a>传统方式的代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.jdk8.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义Element类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Element</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Element&#123;"</span> + <span class="string">"name='"</span> + name + <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 传统方式的代码实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/19/2019-1:32 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Eaxmple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//A集合</span></span><br><span class="line">        List&lt;String&gt; alist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        alist.add(<span class="string">"ABC"</span>);</span><br><span class="line">        alist.add(<span class="string">"BCD"</span>);</span><br><span class="line">        alist.add(<span class="string">"CDE"</span>);</span><br><span class="line">        alist.add(<span class="string">"DEF"</span>);</span><br><span class="line">        alist.add(<span class="string">"EFG"</span>);</span><br><span class="line">        alist.add(<span class="string">"EEE"</span>);</span><br><span class="line">        <span class="comment">//1.第一个集合只要包含'E'字符的元素,并将其存储到一个新集合中</span></span><br><span class="line">        List&lt;String&gt; alistA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : alist) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.contains(<span class="string">"E"</span>)) &#123;</span><br><span class="line">                alistA.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.第一个集合筛选之后只要前3个元素,并将其存储到新集合中</span></span><br><span class="line">        List&lt;String&gt; alistB = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : alistA) &#123;</span><br><span class="line">            <span class="keyword">if</span> (alistB.size() != <span class="number">3</span>) &#123;</span><br><span class="line">                alistB.add(s); <span class="comment">//[CDE, DEF, EFG]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//B集合</span></span><br><span class="line">        List&lt;String&gt; blist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        blist.add(<span class="string">"HIJ"</span>);</span><br><span class="line">        blist.add(<span class="string">"IJK"</span>);</span><br><span class="line">        blist.add(<span class="string">"JKL"</span>);</span><br><span class="line">        blist.add(<span class="string">"KLM"</span>);</span><br><span class="line">        blist.add(<span class="string">"KKK"</span>);</span><br><span class="line">        <span class="comment">//3.第二个集合只要包含'K'字符的元素,并将其存储到新集合中</span></span><br><span class="line">        List&lt;String&gt; blistA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : blist) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.contains(<span class="string">"K"</span>)) &#123;</span><br><span class="line">                blistA.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.第二个集合筛选之后不要前2两个元素,并将其存储到一个新集合中</span></span><br><span class="line">        List&lt;String&gt; blistB = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; blistA.size(); i++) &#123;</span><br><span class="line">            blistB.add(blistA.get(i)); <span class="comment">//[KLM, KKK]</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.将两个集合合并成一个集合,并存储到一个新集合中</span></span><br><span class="line">        List&lt;String&gt; abList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        abList.addAll(alistB);</span><br><span class="line">        abList.addAll(blistB);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.根据合并后的集合中的元素值创建Element对象,并将其存储到新集合中</span></span><br><span class="line">        List&lt;Element&gt; pList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : abList) &#123;</span><br><span class="line">            pList.add(<span class="keyword">new</span> Element(s));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.打印整个集合的Element对象信息</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : pList) &#123;</span><br><span class="line">            System.out.println(element.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>程序运行结果如下 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=&apos;CDE&apos;&#125;</span><br><span class="line">Person&#123;name=&apos;DEF&apos;&#125;</span><br><span class="line">Person&#123;name=&apos;EFG&apos;&#125;</span><br><span class="line">Person&#123;name=&apos;KLM&apos;&#125;</span><br><span class="line">Person&#123;name=&apos;KKK&apos;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="使用Stream流的代码实现"><a href="#使用Stream流的代码实现" class="headerlink" title="使用Stream流的代码实现"></a>使用Stream流的代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.jdk8.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义Element类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Element</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Element&#123;"</span> + <span class="string">"value='"</span> + value + <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 使用Stream流的代码实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/19/2019-3:57 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//A集合</span></span><br><span class="line">        List&lt;String&gt; alist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        alist.add(<span class="string">"ABC"</span>);</span><br><span class="line">        alist.add(<span class="string">"BCD"</span>);</span><br><span class="line">        alist.add(<span class="string">"CDE"</span>);</span><br><span class="line">        alist.add(<span class="string">"DEF"</span>);</span><br><span class="line">        alist.add(<span class="string">"EFG"</span>);</span><br><span class="line">        alist.add(<span class="string">"EEE"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.第一个集合只要包含'E'字符的元素,并将其存储到一个新集合中</span></span><br><span class="line">        <span class="comment">//2.第一个集合筛选之后只要前3个元素,并将其存储到新集合中</span></span><br><span class="line">        Stream&lt;String&gt; streamA = alist.stream()</span><br><span class="line">                .filter(value -&gt; value.contains(<span class="string">"E"</span>))</span><br><span class="line">                .limit(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//B集合</span></span><br><span class="line">        List&lt;String&gt; blist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        blist.add(<span class="string">"HIJ"</span>);</span><br><span class="line">        blist.add(<span class="string">"IJK"</span>);</span><br><span class="line">        blist.add(<span class="string">"JKL"</span>);</span><br><span class="line">        blist.add(<span class="string">"KLM"</span>);</span><br><span class="line">        blist.add(<span class="string">"KKK"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.第二个集合只要包含'K'字符的元素,并将其存储到新集合中</span></span><br><span class="line">        <span class="comment">//4.第二个集合筛选之后不要前2两个元素,并将其存储到一个新集合中</span></span><br><span class="line">        Stream&lt;String&gt; streamB = blist.stream()</span><br><span class="line">                .filter(value -&gt; value.contains(<span class="string">"K"</span>))</span><br><span class="line">                .skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.将两个集合合并成一个集合,并存储到一个新集合中</span></span><br><span class="line">        <span class="comment">//6.根据合并后的集合中的元素值创建Element对象,并将其存储到新集合中</span></span><br><span class="line">        <span class="comment">//7.打印整个集合的Element对象信息</span></span><br><span class="line">        Stream.concat(streamA, streamB)</span><br><span class="line">                .map(Element::<span class="keyword">new</span>) <span class="comment">//.map(value -&gt; new Element(value))</span></span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>程序运行结果如下 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Element&#123;value=&apos;CDE&apos;&#125;</span><br><span class="line">Element&#123;value=&apos;DEF&apos;&#125;</span><br><span class="line">Element&#123;value=&apos;EFG&apos;&#125;</span><br><span class="line">Element&#123;value=&apos;KLM&apos;&#125;</span><br><span class="line">Element&#123;value=&apos;KKK&apos;&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Stream流基本使用的综合案例&quot;&gt;&lt;a href=&quot;#学习笔记-Stream流基本使用的综合案例&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Stream流基本使用的综合案例&quot;&gt;&lt;/a&gt;学习笔记 : Stream流基本使用的综合
      
    
    </summary>
    
    
      <category term="JDK8" scheme="http://yoursite.com/tags/JDK8/"/>
    
  </entry>
  
  <entry>
    <title>JDK 8新特性之Stream流的基本使用</title>
    <link href="http://yoursite.com/2019/08/18/JDK-8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BStream%E6%B5%81%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/18/JDK-8新特性之Stream流的基本使用/</id>
    <published>2019-08-18T13:09:29.000Z</published>
    <updated>2019-08-25T06:31:00.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-JDK-8新特性之Stream流的基本使用"><a href="#学习笔记-JDK-8新特性之Stream流的基本使用" class="headerlink" title="学习笔记 : JDK 8新特性之Stream流的基本使用"></a>学习笔记 : JDK 8新特性之Stream流的基本使用</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><em>Java 8 API添加了一个新的抽象称为<code>Stream流</code>,其让你以一种声明的方式处理数据. Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象. 其 API 可以极大提高Java程序员的生产力,让程序员写出高效率、干净、简洁的代码. 其把将要处理的元素集合看作一种流, 流在管道中传输, 并且可以在管道的节点上进行处理, 比如筛选,排序,聚合等, 元素流在管道中经过中间操作 (intermediate operation) 的处理,最后由最终操作 (terminal operation) 得到前面处理的结果</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+--------------------+       +------+   +------+   +---+   +-------+</span><br><span class="line">| stream of elements +-----&gt; |filter+-&gt; |sorted+-&gt; |map+-&gt; |collect|</span><br><span class="line">+--------------------+       +------+   +------+   +---+   +-------+</span><br></pre></td></tr></table></figure><p><em>以上的流程可以转换Java代码 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; transactionsIds = </span><br><span class="line">widgets.stream()</span><br><span class="line">        .filter(b -&gt; b.getColor() == RED)</span><br><span class="line">        .sorted((x,y) -&gt; x.getWeight() - y.getWeight())</span><br><span class="line">        .mapToInt(Widget::getWeight)</span><br><span class="line">        .sum();</span><br></pre></td></tr></table></figure></p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><p><em>Stream (流) 是一个来自数据源的元素队列并支持聚合操作 :</em></p><ul><li>元素是特定类型的对象,形成一个队列. Java中的<code>Stream并不会存储元素,而是按需计算</code></li><li>数据源,流的来源可以是集合,数组,I/O channel,产生器generator等</li><li>聚合操作,类似SQL语句一样的操作,比如filter, map, reduce, find, match, sorted等</li></ul><p><em>和以前的Collection操作不同， Stream操作还有如下两个基础的特征 :</em></p><ul><li><code>Pipelining</code> : 中间操作都会返回流对象本身, 这样多个操作可以串联成一个管道,如同流式风格(fluent style), 这样做可以对操作进行优化,比如延迟执行(laziness)和短路(short-circuiting)</li><li><code>内部迭代</code> : 以前对集合遍历都是通过Iterator或者For-Each的方式, 显式的在集合外部进行迭代,这叫做外部迭代. Stream则提供了内部迭代的方式,通过<code>访问者模式(Visitor)</code>实现</li></ul><p><em>当使用一个流的时候,通常包括三个基本步骤 : 获取一个数据源(source) -&gt; 数据转换 -&gt; 执行操作获取想要的结果,每次转换原有 Stream 对象不改变,返回一个新的 Stream 对象(可以有多次转换),这就允许对其操作可以像链条一样排列,变成一个管道. <code>注 : Steam流属于管道流,既只能被消费/使用一次哟</code></em></p><h4 id="获取Stream流的方式"><a href="#获取Stream流的方式" class="headerlink" title="获取Stream流的方式"></a>获取Stream流的方式</h4><p><em><code>java.util.stream.Stream&lt;T&gt;</code>是Java8新加入的最常用的流接口 (注 : 这并不是一个函数式接口哟),获取一个流非常简单,有以下几种常用的方式 :</em></p><ol><li><em>所有的<code>Collection</code>集合都可以通过stream默认方法获取流</em></li><li><em>通过<code>Stream</code>接口的静态方法<code>of</code>可以获取数组对应的流</em></li></ol><h4 id="Stream流的常用方法"><a href="#Stream流的常用方法" class="headerlink" title="Stream流的常用方法"></a>Stream流的常用方法</h4><p><em>Stream流模型的操作很丰富,其方法可以划分为两类 :</em></p><ol><li><em><code>延迟方法</code> : 返回值类型仍然是<code>Stream</code>接口自身类型的方法,因此支持链式调用( 除了终结方法外,其余方法均为延迟方法 )</em></li><li><em><code>终结方法</code> : 返回值类型不再是<code>Stream</code>接口自身类型的方法,因此不再支持类似<code>StringBuilder</code>那样的链式调用,终结方法例如<code>count</code>和<code>forEach</code></em></li></ol><h4 id="程序示例-对比"><a href="#程序示例-对比" class="headerlink" title="程序示例(对比)"></a>程序示例(对比)</h4><p><em>话不多说,来对比一下传统遍历并过滤集合与使用Stream流遍历并过滤集合的代码,感受下Stream流的美~</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 使用Stream流遍历并过滤集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/18/2019-9:10 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传统方式:遍历并过滤集合</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"bc"</span>);</span><br><span class="line">        list.add(<span class="string">"abc"</span>);</span><br><span class="line">        list.add(<span class="string">"bcd"</span>);</span><br><span class="line">        list.add(<span class="string">"abcd"</span>);</span><br><span class="line">        <span class="comment">//元素内容过滤</span></span><br><span class="line">        List&lt;String&gt; list_a = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.startsWith(<span class="string">"a"</span>)) &#123;</span><br><span class="line">                list_a.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//元素长度过滤</span></span><br><span class="line">        List&lt;String&gt; list_len = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : list_a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.length() &gt; <span class="number">3</span>) &#123;</span><br><span class="line">                list_len.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印集合元素</span></span><br><span class="line">        <span class="keyword">for</span> (String s : list_len) &#123;</span><br><span class="line">            System.out.println(s); <span class="comment">//结果:abcd</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Steam流:遍历并过滤集合</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"bc"</span>);</span><br><span class="line">        list.add(<span class="string">"abc"</span>);</span><br><span class="line">        list.add(<span class="string">"bcd"</span>);</span><br><span class="line">        list.add(<span class="string">"abcd"</span>);</span><br><span class="line">        <span class="comment">//过滤集合元素后输出</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .filter(name -&gt; name.startsWith(<span class="string">"a"</span>)) <span class="comment">//元素内容过滤</span></span><br><span class="line">                .filter(name -&gt; name.length() &gt; <span class="number">3</span>) <span class="comment">//元素长度过滤</span></span><br><span class="line">                <span class="comment">//.forEach(name -&gt; System.out.println(name));</span></span><br><span class="line">                .forEach(System.out::println); <span class="comment">//结果:abcd</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="获取Stream流的两种方式"><a href="#获取Stream流的两种方式" class="headerlink" title="获取Stream流的两种方式"></a>获取Stream流的两种方式</h3><p><em>获取流的两种方式 : 一将集合装换为Stream流, 二将数组转换为Stream流</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 获取流的两种方式:将集合装换为Stream流,及将数组转换为Stream流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/19/2019-8:30 AM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetStreamWay</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将List集合装换为Stream流</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将Set集合转换为Stream流</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Stream&lt;String&gt; stream = set.stream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将Map集合转换为Stream流</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分别获取并存储键与值</span></span><br><span class="line">        Set&lt;Integer&gt; integers = map.keySet();</span><br><span class="line">        Collection&lt;String&gt; values = map.values();</span><br><span class="line">        <span class="comment">//将存储键与值的集合转换为Stream流</span></span><br><span class="line">        Stream&lt;Integer&gt; key = integers.stream();</span><br><span class="line">        Stream&lt;String&gt; value = values.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取键值对(键与值映射关系),并将其转换为Stream流</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, String&gt;&gt; entries = map.entrySet();</span><br><span class="line">        Stream&lt;Map.Entry&lt;Integer, String&gt;&gt; entry = entries.stream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数组转换为Stream流</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] array = &#123;<span class="string">"a"</span>, <span class="string">"ab"</span>, <span class="string">"bc"</span>, <span class="string">"abc"</span>, <span class="string">"bcd"</span>, <span class="string">"abcd"</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ······</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="forEach方法"><a href="#forEach方法" class="headerlink" title="forEach方法"></a>forEach方法</h3><p><em>该方法接收一个<code>Consumer</code>接口函数,会将每一个流元素交给该函数进行处理</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="复习Consumer接口"><a href="#复习Consumer接口" class="headerlink" title="复习Consumer接口"></a>复习Consumer接口</h4><p><em>此前已学过<code>java.util.function.Consumer&lt;T&gt;</code>函数式接口,该接口是一个消费型接口,其中唯一的抽象方法如下,意为消费一个指定泛型的数据</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p><em>遍历输出数组中的元素</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testForEach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] array = &#123;<span class="string">"a"</span>, <span class="string">"bc"</span>, <span class="string">"abc"</span>, <span class="string">"bcd"</span>, <span class="string">"abcd"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一种方式</span></span><br><span class="line">    Stream&lt;String&gt; stream = Arrays.stream(array);</span><br><span class="line">    stream.forEach(element -&gt; System.out.println(element));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种方式</span></span><br><span class="line">    Stream&lt;String&gt; stream2 = Stream.of(array);</span><br><span class="line">    stream2.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="filter方法"><a href="#filter方法" class="headerlink" title="filter方法"></a>filter方法</h3><p><em>可以通过<code>filter</code>方法将一个流转换成另一个子集流,该接口接收一个<code>Predicate</code>函数式接口参数( 可以是一个Lambda或方法引用 )作为筛选条件</em></p><h4 id="复习Predicate接口"><a href="#复习Predicate接口" class="headerlink" title="复习Predicate接口"></a>复习Predicate接口</h4><p><em>此前已学过<code>java.util.function.Predicate&lt;T&gt;</code>函数式接口,其中唯一的抽象方法如下,该方法将会产生一个boolean值结果,代表指定的条件是否满足,如果结果为true,那么Stream流的<code>filter</code>方法将会留用元素,反之舍弃</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><p><em>延迟方法与终结方法结合使用 : 过滤并遍历数组元素</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] array = &#123;<span class="string">"a"</span>, <span class="string">"bc"</span>, <span class="string">"abc"</span>, <span class="string">"bcd"</span>, <span class="string">"abcd"</span>&#125;;</span><br><span class="line">    Stream.of(array)</span><br><span class="line">            .filter(element -&gt; element.startsWith(<span class="string">"a"</span>))</span><br><span class="line">            .filter(element -&gt; element.length() &gt; <span class="number">3</span>)</span><br><span class="line">            .forEach(System.out::println); <span class="comment">//abcd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="map方法"><a href="#map方法" class="headerlink" title="map方法"></a>map方法</h3><p><em>如果需要将流中的元素映射到另一个流中,则可以使用<code>map</code>方法,方法签名如下,该接口需要一个函数式接口参数,可以将当前流中的T类型数据转换为另一种R类型的流</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(function&lt;? <span class="keyword">super</span> T,? extends R&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="复习Function接口"><a href="#复习Function接口" class="headerlink" title="复习Function接口"></a>复习Function接口</h4><p><em>此前已学过<code>java.util.function.Function&lt;T, R&gt;</code>函数式接口,其中唯一的抽象方法如下,其可以将一种 T 类型转换为 R 类型,而这种转换的动作称为<code>映射</code></em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h4><p><em>将String类型的数组元素装换为Integer类型并输出</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Lambda表达式写法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapWithLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] array = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>&#125;;</span><br><span class="line">    Stream&lt;String&gt; stream = Stream.of(array);</span><br><span class="line">    Stream&lt;Integer&gt; stream2 = stream.map((String string) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(string);</span><br><span class="line">    &#125;);</span><br><span class="line">    stream2.forEach(element -&gt; System.out.println(element));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda表达式简写</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapWithSimpleLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] array = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>&#125;;</span><br><span class="line">    Stream.of(array)</span><br><span class="line">            .map(string -&gt; Integer.valueOf(string))</span><br><span class="line">            .forEach(element -&gt; System.out.println(element));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法引用写法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapWithMethodRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] array = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>&#125;;</span><br><span class="line">    Stream.of(array)</span><br><span class="line">            .map(Integer::valueOf)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="count方法"><a href="#count方法" class="headerlink" title="count方法"></a>count方法</h3><p><em>正如就集合<code>Collection</code>当中的<code>size</code>方法一样,Stream流提供了<code>count</code>方法来计数元素个数,该方法返回一个long值代表元素个数(不再像同旧集合为int值). 注 : 该方法为终结方法哟~</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="基本使用-3"><a href="#基本使用-3" class="headerlink" title="基本使用"></a>基本使用</h4><p><em>统计数组中以”a”开头的元素个数</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] array = &#123;<span class="string">"a"</span>, <span class="string">"bc"</span>, <span class="string">"abc"</span>, <span class="string">"bcd"</span>, <span class="string">"abcd"</span>&#125;;</span><br><span class="line">    <span class="keyword">long</span> count = Stream.of(array).filter(element -&gt; element.startsWith(<span class="string">"a"</span>)).count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="limit方法"><a href="#limit方法" class="headerlink" title="limit方法"></a>limit方法</h3><p><em><code>limit</code>方法可以对流进行截取,如果集合当前长度大于参数则进行截取,否则不进行操作</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">limit</span><span class="params">(<span class="keyword">long</span> maxSize)</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="基本使用-4"><a href="#基本使用-4" class="headerlink" title="基本使用"></a>基本使用</h4><p><em>截取数组中的前三个元素并输出</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] array = &#123;<span class="string">"a"</span>, <span class="string">"bc"</span>, <span class="string">"abc"</span>, <span class="string">"bcd"</span>, <span class="string">"abcd"</span>&#125;;</span><br><span class="line">    Stream.of(array).limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="skip方法"><a href="#skip方法" class="headerlink" title="skip方法"></a>skip方法</h3><p><em>如果希望跳过前几个元素,可以使用<code>skip</code>方法获取一个截取之后的流. 如果流的当前长度大于n,则跳过前n个,否则将会的到一个长度为0的空流</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="基本使用-5"><a href="#基本使用-5" class="headerlink" title="基本使用"></a>基本使用</h4><p><em>使用<code>skip</code>方法跳过数组中的前三个元素并输出</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSkip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] array = &#123;<span class="string">"a"</span>, <span class="string">"bc"</span>, <span class="string">"abc"</span>, <span class="string">"bcd"</span>, <span class="string">"abcd"</span>&#125;;</span><br><span class="line">    Stream.of(array).skip(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="concat方法"><a href="#concat方法" class="headerlink" title="concat方法"></a>concat方法</h3><p><em>如果有两个流,希望合并称为一个流,那么可以使用Stream接口的静态方法<code>concat</code>. 注 : 这是一个静态方法,不用与<code>java.lang.String</code>中的<code>concat</code>方法哟</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="基本使用-6"><a href="#基本使用-6" class="headerlink" title="基本使用"></a>基本使用</h4><p><em>通过合并两个数组中的元素得到新的流,并输出合并后的数组元素</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Lambda表达式写法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConcat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] array1 = &#123;<span class="string">"a"</span>, <span class="string">"abc"</span>&#125;;</span><br><span class="line">    String[] array2 = &#123;<span class="string">"abcd"</span>, <span class="string">"abcde"</span>&#125;;</span><br><span class="line">    Stream&lt;String&gt; stream1 = Stream.of(array1);</span><br><span class="line">    Stream&lt;String&gt; stream2 = Stream.of(array2);</span><br><span class="line">    Stream&lt;Serializable&gt; concatStream = Stream.concat(stream1, stream2);</span><br><span class="line">    concatStream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleConcat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] array1 = &#123;<span class="string">"a"</span>, <span class="string">"abc"</span>&#125;;</span><br><span class="line">    String[] array2 = &#123;<span class="string">"abcd"</span>, <span class="string">"abcde"</span>&#125;;</span><br><span class="line">    Stream.concat(Stream.of(array1), Stream.of(array2)).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>参考《Java 8 Stream》 : <a href="https://www.runoob.com/java/java8-streams.html" target="_blank" rel="noopener">https://www.runoob.com/java/java8-streams.html</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-JDK-8新特性之Stream流的基本使用&quot;&gt;&lt;a href=&quot;#学习笔记-JDK-8新特性之Stream流的基本使用&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : JDK 8新特性之Stream流的基本使用&quot;&gt;&lt;/a&gt;学习笔记 :
      
    
    </summary>
    
    
      <category term="JDK8" scheme="http://yoursite.com/tags/JDK8/"/>
    
  </entry>
  
  <entry>
    <title>JDK 8新特性之方法引用</title>
    <link href="http://yoursite.com/2019/08/18/JDK-8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/18/JDK-8新特性之方法引用/</id>
    <published>2019-08-18T02:42:23.000Z</published>
    <updated>2019-08-25T06:31:00.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-JDK-8新特性之方法引用"><a href="#学习笔记-JDK-8新特性之方法引用" class="headerlink" title="学习笔记 : JDK 8新特性之方法引用"></a>学习笔记 : JDK 8新特性之方法引用</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><em>当要传递给Lambda体的操作已经有实现的方法时,就可以使用<code>方法引用</code>咯~ 方法引用可以看做是Lambda表达式深层的表达,换句话说 : 方法引用就是Lambda表达式,既函数式接口的一个实例,通过方法的名字来指定一个方法,可以认为是Lambda表达式的一个语法糖~</em></p><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><p><em>实现接口的抽象方法的参数列表和返回值类型,必须与方法引用的方法的参数列表和返回值类型保持一致</em></p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p><em>使用操作符 <code>::</code> 将类(或对象)与方法名分隔开来</em></p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul><li>对象 :: 实例方法名</li><li>类 :: 静态方法名</li><li>类 :: 实例方法名</li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><em>下面通过一个简单的程序示例,来对比Lambda表达式与方法引用写法之间的区别 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Ignore;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个函数式接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Java 8新特性之方法引用的基本使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/18/2019-2:15 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">methodTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义打印字符的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printResult</span><span class="params">(String s, Printable printable)</span> </span>&#123;</span><br><span class="line">        printable.print(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传统写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printResult(<span class="string">"hello lambda"</span>, <span class="keyword">new</span> Printable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Lambda表达式写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintStringWithLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printResult(<span class="string">"hello lambda"</span>, s1 -&gt; System.out.println(s1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法引用写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintStringWithMethodRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对象 :: 实例方法名</span></span><br><span class="line">        printResult(<span class="string">"hello lambda"</span>, System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h4><p><em>例如上例中,<code>System.out</code>对象中有一个重载的<code>println(String)</code>方法恰好就是我们所需要的,那么对于<code>printResult</code>方法的函数式接口参数,对比以下两种写法,完全等效 :</em></p><ul><li>Lambda表达式写法 : <code>s -&gt; System.out.println(s)</code></li><li>方法引用写法 : <code>System.out::println</code></li></ul><p><em>第一种语义是指 : 拿到参数之后,继而传递给<code>System.out.println</code>方法去处理</em><br><em>第二种语义是指 : 直接让<code>System.out</code>中的<code>println</code>方法取代Lambda. 这种写法复用了已有方案,更加简洁</em></p><h3 id="常用的几种方法引用"><a href="#常用的几种方法引用" class="headerlink" title="常用的几种方法引用"></a>常用的几种方法引用</h3><h4 id="通过对象名引用成员方法"><a href="#通过对象名引用成员方法" class="headerlink" title="通过对象名引用成员方法"></a>通过对象名引用成员方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义函数式接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义含有成员方法类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Method</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUpperCaseStr</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 通过对象名引用成员方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/18/2019-3:07 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefMethodByObjTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printResult</span><span class="params">(String s, Printable printable)</span> </span>&#123;</span><br><span class="line">        printable.print(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传统方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printResult(<span class="string">"hello lambda"</span>, <span class="keyword">new</span> Printable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Method obj = <span class="keyword">new</span> Method(); <span class="comment">//创建Method对象</span></span><br><span class="line">                obj.printUpperCaseStr(s); <span class="comment">//调用对象的成员方法,将字符串转换为大写后输出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Lambda表达式写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintResultWithLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printResult(<span class="string">"hello lambda"</span>, s -&gt; &#123;</span><br><span class="line">            Method obj = <span class="keyword">new</span> Method();</span><br><span class="line">            obj.printUpperCaseStr(s);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法引用写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintResultWithMethodRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Method obj = <span class="keyword">new</span> Method();</span><br><span class="line">        printResult(<span class="string">"hello lambda"</span>, obj::printUpperCaseStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过类名引用静态方法"><a href="#通过类名引用静态方法" class="headerlink" title="通过类名引用静态方法"></a>通过类名引用静态方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义函数式接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">calculable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义含有静态方法类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Method</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 通过类名引用静态方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/18/2019-3:36 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefStatisMethodByClazzName</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, calculable calculable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calculable.add(x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传统写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = getResult(<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">new</span> calculable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Method.add(x, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Lambda表达式写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetResultWithLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = getResult(<span class="number">1</span>, <span class="number">2</span>, (x, y) -&gt; Method.add(x, y));</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法引用写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetResultWithMethodRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = getResult(<span class="number">1</span>, <span class="number">2</span>, Method::add);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过Supper引用父类中的成员方法"><a href="#通过Supper引用父类中的成员方法" class="headerlink" title="通过Supper引用父类中的成员方法"></a>通过Supper引用父类中的成员方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个函数式接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Agreeable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello my sun !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 通过Supper引用父类中的成员方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/18/2019-4:06 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefMethodBySupper</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello my father !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printResult</span><span class="params">(Agreeable agreeable)</span> </span>&#123;</span><br><span class="line">        agreeable.greet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传统写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printResult(<span class="keyword">new</span> Agreeable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                RefMethodBySupper.<span class="keyword">super</span>.hello();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Lambda表达式写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintResultWithLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printResult(() -&gt; <span class="keyword">super</span>.hello());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法引用写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintResultWithMethodRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printResult(<span class="keyword">super</span>::hello);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过this引用成员方法"><a href="#通过this引用成员方法" class="headerlink" title="通过this引用成员方法"></a>通过this引用成员方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义函数式接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Supermarket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 通过this引用成员方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/18/2019-4:30 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefMethodByThis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyLaptop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"buy a laptop successfully"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printResult</span><span class="params">(Supermarket supermarket)</span> </span>&#123;</span><br><span class="line">        supermarket.buy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传统写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printResult(<span class="keyword">new</span> Supermarket() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                buyLaptop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Lambda表达式写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintResultWithLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printResult(() -&gt; <span class="keyword">this</span>.buyLaptop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法引用写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintResultWithMethodRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printResult(<span class="keyword">this</span>::buyLaptop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类的构造器引用"><a href="#类的构造器引用" class="headerlink" title="类的构造器引用"></a>类的构造器引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义函数式接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">builder</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义含待引用的构造方法类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 类的构造器引用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/18/2019-7:09 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefConstructor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printResult</span><span class="params">(String name, UserBuilder userBuilder)</span> </span>&#123;</span><br><span class="line">        User user = userBuilder.builder(name);</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传统写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printResult(<span class="string">"yubuntu0109"</span>, <span class="keyword">new</span> UserBuilder() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> User <span class="title">builder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> User(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Lambda表达式写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintResultWithLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printResult(<span class="string">"yubuntu0109"</span>, s -&gt; <span class="keyword">new</span> User(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法引用写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrintResultWithMethodRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printResult(<span class="string">"yubuntu0109"</span>, User::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组的构造器引用"><a href="#数组的构造器引用" class="headerlink" title="数组的构造器引用"></a>数组的构造器引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义函数式接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ArrayBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] builderArray(<span class="keyword">int</span> length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 数组的构造器引用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/18/2019-7:51 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefArrayConstructor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getArray(<span class="keyword">int</span> length, ArrayBuilder arrayBuilder) &#123;</span><br><span class="line">        <span class="keyword">return</span> arrayBuilder.builderArray(length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传统写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testgetArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = getArray(<span class="number">10</span>, <span class="keyword">new</span> ArrayBuilder() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">int</span>[] builderArray(<span class="keyword">int</span> length) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Lambda表达式写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testArrayWithLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = getArray(<span class="number">10</span>, length -&gt; <span class="keyword">new</span> <span class="keyword">int</span>[length]);</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法引用写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testArrayWithMethodRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = getArray(<span class="number">10</span>, <span class="keyword">int</span>[]::<span class="keyword">new</span>);</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-JDK-8新特性之方法引用&quot;&gt;&lt;a href=&quot;#学习笔记-JDK-8新特性之方法引用&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : JDK 8新特性之方法引用&quot;&gt;&lt;/a&gt;学习笔记 : JDK 8新特性之方法引用&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
    
      <category term="JDK8" scheme="http://yoursite.com/tags/JDK8/"/>
    
  </entry>
  
  <entry>
    <title>JDK 8新特性之函数式接口的基本使用</title>
    <link href="http://yoursite.com/2019/08/18/JDK-8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/18/JDK-8新特性之函数式接口的基本使用/</id>
    <published>2019-08-18T00:48:00.000Z</published>
    <updated>2019-08-25T06:31:00.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-JDK-8新特性之函数式接口的基本使用"><a href="#学习笔记-JDK-8新特性之函数式接口的基本使用" class="headerlink" title="学习笔记 : JDK 8新特性之函数式接口的基本使用"></a>学习笔记 : JDK 8新特性之函数式接口的基本使用</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><em><code>函数式接口</code>是整个 Lambda 表达式的一个根源,换句话来说 Java8 中的 Lambda 表达式要想彻底掌握,前提是要彻底理解好函数式接口哟,那么什么是函数接口呢 ? 答 : 函数式接口 (Functional Interface) 就是一个有且仅有一个抽象方法,但是可以有多个非抽象方法的接口,函数式接口可以被隐式转换为 Lambda 表达式. 注 : 我们可以通过在接口上使用 <code>@FunctionalInterface</code> 注解来检查它是否是一个函数接口. Java8中丰富的函数式接口都定义在 Java.util.function 包中哟~</em></p><h3 id="Java内置四大核心函数式接口"><a href="#Java内置四大核心函数式接口" class="headerlink" title="Java内置四大核心函数式接口"></a>Java内置四大核心函数式接口</h3><table><thead><tr><th style="text-align:center">函数式接口</th><th style="text-align:center">参数类型</th><th style="text-align:center">返回类型</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center"><code>Consumer&lt;T&gt;</code> 消费性接口</td><td style="text-align:center">T</td><td style="text-align:center">void</td><td style="text-align:center">对类型为T的对象应用操作,包含方法: void accept(T t)</td></tr><tr><td style="text-align:center"><code>Supplier&lt;T&gt;</code> 供给性接口</td><td style="text-align:center">无</td><td style="text-align:center">T</td><td style="text-align:center">返回类型为T的对象,包含方法: T get()</td></tr><tr><td style="text-align:center"><code>Function&lt;T,R&gt;</code> 函数型接口</td><td style="text-align:center">T</td><td style="text-align:center">R</td><td style="text-align:center">对类型为T的对象应用操作,并返回结果是R类型的对象,包含方法: R apply(T t)</td></tr><tr><td style="text-align:center"><code>Predicate&lt;T&gt;</code> 断定性接口</td><td style="text-align:center">T</td><td style="text-align:center">boolean</td><td style="text-align:center">确定类型为T的对象是否满足某约束,并返回boolean值,包含方法: boolean test(T t)</td></tr></tbody></table><h3 id="四大核心函数式接口程序示例"><a href="#四大核心函数式接口程序示例" class="headerlink" title="四大核心函数式接口程序示例"></a>四大核心函数式接口程序示例</h3><p><em>消费性接口的程序示例 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Ignore;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Java 8中函数式接口的基本使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/18/2019-9:30 AM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">functionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//四大核心函数式接口:模拟消费性接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">(<span class="keyword">double</span> monery, Consumer&lt;Double&gt; consumer)</span> </span>&#123;</span><br><span class="line">        consumer.accept(monery);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//未使用Lambda表达式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        consumer(<span class="number">100.0</span>, <span class="keyword">new</span> Consumer&lt;Double&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Double monery)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"costed monery : "</span> + monery);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Lambda表达式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConsumerWithLamdba</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可简写为: consumer(100.0, m -&gt; System.out.println("costed monery : " + m));</span></span><br><span class="line">        consumer(<span class="number">100.0</span>, (Double m) -&gt; System.out.println(<span class="string">"costed monery :"</span> + m));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>断定性接口的程序示例 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Ignore;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: jdk-learnig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Java 8中函数式接口的基本使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/18/2019-9:30 AM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">functionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//四大核心函数式接口:模拟断定性接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">predicate</span><span class="params">(List&lt;String&gt; list, Predicate&lt;String&gt; p)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.test(s)) &#123;</span><br><span class="line">                arrayList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//未使用Lambd表达式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPredicate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">"ab"</span>, <span class="string">"bc"</span>, <span class="string">"abc"</span>, <span class="string">"bcd"</span>, <span class="string">"abcd"</span>, <span class="string">"bcde"</span>);</span><br><span class="line">        List&lt;String&gt; filterList = predicate(list, <span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.contains(<span class="string">"a"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(filterList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Lambda表达式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPredicateWithLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">"ab"</span>, <span class="string">"bc"</span>, <span class="string">"abc"</span>, <span class="string">"bcd"</span>, <span class="string">"abcd"</span>, <span class="string">"bcde"</span>);</span><br><span class="line">        <span class="comment">//可简写为: List&lt;String&gt; filterList = predicate(list, s -&gt; s.contains("a"));</span></span><br><span class="line">        List&lt;String&gt; filterList = predicate(list, (String s) -&gt; s.contains(<span class="string">"a"</span>));</span><br><span class="line">        System.out.println(filterList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-JDK-8新特性之函数式接口的基本使用&quot;&gt;&lt;a href=&quot;#学习笔记-JDK-8新特性之函数式接口的基本使用&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : JDK 8新特性之函数式接口的基本使用&quot;&gt;&lt;/a&gt;学习笔记 : JDK 8
      
    
    </summary>
    
    
      <category term="JDK8" scheme="http://yoursite.com/tags/JDK8/"/>
    
  </entry>
  
  <entry>
    <title>JDK 8新特性之Lambda表达式的基本语法</title>
    <link href="http://yoursite.com/2019/08/17/JDK-8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/17/JDK-8新特性之Lambda表达式的基本语法/</id>
    <published>2019-08-17T08:40:31.000Z</published>
    <updated>2019-08-25T06:31:00.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-JDK-8新特性之Lambda表达式的基本语法"><a href="#学习笔记-JDK-8新特性之Lambda表达式的基本语法" class="headerlink" title="学习笔记 : JDK 8新特性之Lambda表达式的基本语法"></a>学习笔记 : JDK 8新特性之Lambda表达式的基本语法</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><em>Lambda表达式 : 在Java8语言中引入的一种新的语言元素和操作符,这个操作符为<code>-&gt;</code>,该操作符被称为<code>Lambda操作符</code>或<code>箭头操作符</code>,它将Lambda分为以下两个部分</em></p><ol><li><em><code>左侧</code> : 指定Lambda表达式需要的参数列表</em></li><li><em><code>右侧</code> : 制定了Lambda体,是抽象方法的实现逻辑,也既Lambda表达式要执行的功能</em></li></ol><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>可选类型声明 : 不需要声明参数类型,编译器可以统一识别参数值</li><li>可选的参数圆括号 : 一个参数无需定义圆括号,但多个参数需要定义圆括号</li><li>可选的大括号 : 如果主体包含了一个语句,就不需要使用大括号</li><li>可选的返回关键字 : 如果主体只有一个表达式返回值则编译器会自动返回值,大括号需要指定明表达式返回了一个数值</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol><li><p>语法格式一 : 无参,无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runnable runnable = () -&gt; System.out.println(<span class="string">"Hello Lambda1 !"</span>);</span><br></pre></td></tr></table></figure></li><li><p>语法格式二 : Lambda需要一个参数,但是没有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以简写为:  Consumer&lt;String&gt; consumer = System.out::println;</span></span><br><span class="line">Consumer&lt;String&gt; consumer = (String str) -&gt; System.out.println(str);</span><br></pre></td></tr></table></figure></li><li><p>语法格式三 : 数据类型可以省略,因为可由编译器推断得出,称为”类型推断”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; c = (str) -&gt; &#123; System.out.println(str) &#125;;</span><br></pre></td></tr></table></figure></li><li><p>语法格式四 :  Lambda若需要一个参数时,参数的小括号可以省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; c = str -&gt; &#123; System.out.println(str) &#125;;</span><br></pre></td></tr></table></figure></li><li><p>语法格式五 : Lambda需要两个或以上的参数,多条执行语句,并且可以有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;String&gt; c = (x,y) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">"this is comparator"</span>);</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x,y);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>语法格式六 : 当Lambda体只有一条语句时,return与大括号若有,都可以省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以简写为: Comparator&lt;Integer&gt; comparator = Integer::compare;</span></span><br><span class="line">Comparator&lt;Integer&gt; c = (x,y) -&gt; Integer.compare(x,y);</span><br></pre></td></tr></table></figure></li></ol><h4 id="程序示例"><a href="#程序示例" class="headerlink" title="程序示例"></a>程序示例</h4><ol><li><p><em>程序示例 : 语法格式一</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未使用Lambda表达式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"this is runnable"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    runnable.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Lambda表达式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runnableWithLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Runnable runnable = () -&gt; System.out.println(<span class="string">"this is runnable"</span>);</span><br><span class="line">    runnable.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序示例 : 语法格式二/三/四</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer&lt;String&gt; consumer = <span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer.accept(<span class="string">"this is consumer"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumerWithLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可以简写为: Consumer&lt;String&gt; consumer = (str) -&gt; System.out.println(str);</span></span><br><span class="line">    <span class="comment">//可以简写为:  Consumer&lt;String&gt; consumer = str -&gt; System.out.println(str);</span></span><br><span class="line">    <span class="comment">//可以简写为: Consumer&lt;String&gt; consumer = System.out::println;</span></span><br><span class="line">    Consumer&lt;String&gt; consumer = (String str) -&gt; System.out.println(str);</span><br><span class="line">    consumer.accept(<span class="string">"this is consumer"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序示例 : 语法格式五</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">comparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer x, Integer y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparator.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">comparatorWithLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; comparator = (x, y) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"this is comparator"</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparator.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序示例 : 语法格式六</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">comparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer x, Integer y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparator.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">comparatorWithLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可以简写为: Comparator&lt;Integer&gt; comparator = Integer::compare;</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator = (x, y) -&gt; Integer.compare(x, y);</span><br><span class="line">    System.out.println(comparator.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-JDK-8新特性之Lambda表达式的基本语法&quot;&gt;&lt;a href=&quot;#学习笔记-JDK-8新特性之Lambda表达式的基本语法&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : JDK 8新特性之Lambda表达式的基本语法&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="JDK8" scheme="http://yoursite.com/tags/JDK8/"/>
    
  </entry>
  
  <entry>
    <title>Java项目开发中PO,BO,VO,DTO,POJO,DAO的概念及其作用</title>
    <link href="http://yoursite.com/2019/08/15/Java%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%ADPO-BO-VO-DTO-POJO-DAO%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/15/Java项目开发中PO-BO-VO-DTO-POJO-DAO的概念及其作用/</id>
    <published>2019-08-15T07:39:18.000Z</published>
    <updated>2019-08-25T06:31:01.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Java项目开发中PO-BO-VO-DTO-POJO-DAO的概念及其作用"><a href="#学习笔记-Java项目开发中PO-BO-VO-DTO-POJO-DAO的概念及其作用" class="headerlink" title="学习笔记 : Java项目开发中PO,BO,VO,DTO,POJO,DAO的概念及其作用"></a>学习笔记 : Java项目开发中PO,BO,VO,DTO,POJO,DAO的概念及其作用</h2><p><em>最近参与了GitHub上的一个开源项目 : <a href="https://github.com/YUbuntu0109/springboot-shiro" target="_blank" rel="noopener">一个简洁优美的Springboot集成Shiro的权限管理系统</a>, 项目中无论是模块的划分,还是结构的分层,都让我眼前一亮! 既而代码的功能被理所当然地划分的非常有层次感,可见作者的编程设计水平实属厉害啊~ 下面来一起学习下Java项目开发中 <code>PO</code>, <code>BO</code>, <code>VO</code>, <code>DTO</code>, <code>POJO</code>, <code>DAO</code> 的概念及其作用吧~</em></p><h3 id="PO-bean、entity等命名"><a href="#PO-bean、entity等命名" class="headerlink" title="PO(bean、entity等命名)"></a>PO(bean、entity等命名)</h3><p><em><code>Persistant Object</code>持久对象 : 数据库表中的记录在Java对象中的显示状态. 最形象的理解就是一个<code>PO</code>就是数据库中的一条记录,好处是可以把一条记录作为一个对象处理,可以方便的转为其它对象</em></p><h3 id="BO-service、manager、business等命名"><a href="#BO-service、manager、business等命名" class="headerlink" title="BO(service、manager、business等命名)"></a>BO(service、manager、business等命名)</h3><p><em><code>Business Object</code>业务对象 : 主要作用是把业务逻辑封装为一个对象. 这个对象可以包括一个或多个其它的对象,形象描述为一个对象的形为和动作,当然也有涉及到基它对象的一些形为和动作. 比如处理一个人的业务逻辑,有睡觉,吃饭,工作,上班等等形为,这样处理业务逻辑时,我们就可以针对BO去处理</em></p><h3 id="VO-from也有此写法"><a href="#VO-from也有此写法" class="headerlink" title="VO(from也有此写法)"></a>VO(from也有此写法)</h3><p><em><code>Value Object</code>值对象 : 主要体现在视图的对象,对于一个<code>WEB</code>页面将整个页面的属性封装成一个对象,然后用一个VO对象在控制层与视图层进行传输交换</em></p><h3 id="DTO-经过处理后的PO-可能增加或者减少PO的属性"><a href="#DTO-经过处理后的PO-可能增加或者减少PO的属性" class="headerlink" title="DTO(经过处理后的PO,可能增加或者减少PO的属性)"></a>DTO(经过处理后的PO,可能增加或者减少PO的属性)</h3><p><em><code>Data Transfer Object</code>数据传输对象 : 主要用于远程调用等需要大量传输对象的地方. 比如我们一张表有100个字段,那么对应的PO就有100个属性,但是我们界面上只要显示10个字段,客户端用<code>WEB service</code>来获取数据,没有必要把整个PO对象传递到客户端,这时我们就可以用只有这10个属性的DTO来传递结果到客户端,这样也不会暴露服务端表结构. 到达客户端以后,如果用这个对象来对应界面显示,那此时它的身份就转为VO</em></p><h3 id="POJO-POJO是一种概念或者接口-身份及作用随环境变化而变化"><a href="#POJO-POJO是一种概念或者接口-身份及作用随环境变化而变化" class="headerlink" title="POJO(POJO是一种概念或者接口,身份及作用随环境变化而变化)"></a>POJO(POJO是一种概念或者接口,身份及作用随环境变化而变化)</h3><p><em><code>Plain Ordinary Java Object</code>简单Java对象 : 即POJO是一个简单的普通的Java对象,它不包含业务逻辑或持久逻辑等,但不是JavaBean、EntityBean等,不具有任何特殊角色和不继承或不实现任何其它Java框架的类或接口. POJO有一些Private的参数作为对象的属性. 然后针对每个参数定义了get和set方法作为访问的接口,POJO对象有时也被称为Data对象，大量应用于表现现实中的对象. <code>一个POJO持久化以后就是PO. 直接用它传递、传递过程中就是DTO. 直接用来对应表示层就是VO</code></em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/08/15/Java项目开发中PO-BO-VO-DTO-POJO-DAO的概念及其作用/Java-POJO-PO-DTO-VO.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="DAO-Data-Access-Object数据访问对象"><a href="#DAO-Data-Access-Object数据访问对象" class="headerlink" title="DAO(Data Access Object数据访问对象)"></a>DAO(Data Access Object数据访问对象)</h3><p><em>这个大家最熟悉,和上面几个O区别最大,基本没有互相转化的可能性和必要. 主要用来封装对数据库的访问,通过它可以把POJO持久化为PO,用PO组装出来VO、DTO</em></p><h3 id="Controller-控制层"><a href="#Controller-控制层" class="headerlink" title="Controller(控制层)"></a>Controller(控制层)</h3><p><em>控制层主要由<code>Action / Servlet</code>等构成( 目前Spring MVC则是通过@Controller标签使用 ),此层业务层与视图层打交道的中间层,负责传输VO对象和调用BO层的业务方法,负责视图层请求的数据处理后响应给视图层</em></p><h3 id="View-视图层"><a href="#View-视图层" class="headerlink" title="View(视图层)"></a>View(视图层)</h3><p><em>主要是指由JSP、HTML等文件形成的显示层,总结一下要用具体的X0需要看具体环境及项目架构,在不同的层、不同的应用场合,对象的身份也不一样,而且对象身份的转化也是很自然的. 就像你对老婆来说就是老公,对父母来说就是子女. 设计这些概念的初衷不是为了唬人而是为了更好的理解和处理各种逻辑,让大家能更好的去用面向对象的方式处理问题</em></p><h3 id="上述名词在实际项目的应用举例"><a href="#上述名词在实际项目的应用举例" class="headerlink" title="上述名词在实际项目的应用举例"></a>上述名词在实际项目的应用举例</h3><p><em><code>控制层</code>( controller-action ),<code>业务层/服务层</code>( bo-manager ),<code>实体层</code>( po-entity ),<code>数据访问</code>( dao ),<code>视图对象</code>( Vo-本项目省略 ),<code>视图层</code>( view-jsp/html )</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/08/15/Java项目开发中PO-BO-VO-DTO-POJO-DAO的概念及其作用/Java项目中各个层次的详细划分.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><em><code>在平时开发项目中大家记得要精细设计各层,既而避免后续项目开发中产生不必要的大量重复工作. 如果不是大型系统可简化一些层,毕竟技术是为应用服务哒~</code></em></p><p><em>🙏摘自(获益匪浅,非常感谢) : <a href="https://www.cnblogs.com/EasonJim/p/7967949.html" target="_blank" rel="noopener">https://www.cnblogs.com/EasonJim/p/7967949.html</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Java项目开发中PO-BO-VO-DTO-POJO-DAO的概念及其作用&quot;&gt;&lt;a href=&quot;#学习笔记-Java项目开发中PO-BO-VO-DTO-POJO-DAO的概念及其作用&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : J
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合FreeMarker</title>
    <link href="http://yoursite.com/2019/08/14/SpringBoot%E6%95%B4%E5%90%88FreeMarker/"/>
    <id>http://yoursite.com/2019/08/14/SpringBoot整合FreeMarker/</id>
    <published>2019-08-14T01:43:05.000Z</published>
    <updated>2019-08-25T06:31:01.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Spring-Boot整合FreeMarker"><a href="#学习笔记-Spring-Boot整合FreeMarker" class="headerlink" title="学习笔记 : Spring Boot整合FreeMarker"></a>学习笔记 : Spring Boot整合FreeMarker</h2><h3 id="FreeMarker官方简介"><a href="#FreeMarker官方简介" class="headerlink" title="FreeMarker官方简介"></a>FreeMarker官方简介</h3><p><em>Apache FreeMarker™ is a template engine: a Java library to generate text output (HTML web pages, e-mails, configuration files, source code, etc.) based on templates and changing data. Templates are written in the FreeMarker Template Language (FTL), which is a simple, specialized language (not a full-blown programming language like PHP). Usually, a general-purpose programming language (like Java) is used to prepare the data (issue database queries, do business calculations). Then, Apache FreeMarker displays that prepared data using templates. <code>In the template you are focusing on how to present the data, and outside the template you are focusing on what data to present.</code></em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/08/14/SpringBoot整合FreeMarker/FreeMarker-overview.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><em>This approach is often referred to as the MVC (Model View Controller) pattern, and is particularly popular for dynamic web pages. <code>It helps in separating web page designers (HTML authors) from developers (Java programmers usually). Designers won&#39;t face complicated logic in templates</code>, and can change the appearance of a page without programmers having to change or recompile code.</em></p><h3 id="引入Maven依赖"><a href="#引入Maven依赖" class="headerlink" title="引入Maven依赖"></a>引入Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- FreeMark --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写Controller"><a href="#编写Controller" class="headerlink" title="编写Controller"></a>编写Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.freemark.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: springboot-freemarker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: SpringBoot整合FreeMarker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8/14/2019-9:16 AM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hiFreeMark"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hiFreeMark</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"resource"</span>, <span class="string">"SringBoot is integrated with FreeMarker !"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写FreeMarker页面"><a href="#编写FreeMarker页面" class="headerlink" title="编写FreeMarker页面"></a>编写FreeMarker页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">style</span>=<span class="string">"color: blueviolet"</span>&gt;</span>$&#123;resource&#125; Date: $&#123;.now?string("yyyy-MM-dd HH:mm:ss.sss")&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>程序运行效果如下所示 :</em><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/08/14/SpringBoot整合FreeMarker/Hi-FreeMarker.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Spring-Boot整合FreeMarker&quot;&gt;&lt;a href=&quot;#学习笔记-Spring-Boot整合FreeMarker&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Spring Boot整合FreeMarker&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="FreeMarker" scheme="http://yoursite.com/tags/FreeMarker/"/>
    
  </entry>
  
  <entry>
    <title>Lombok简介及基本使用</title>
    <link href="http://yoursite.com/2019/08/13/Lombok%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/13/Lombok简介及基本使用/</id>
    <published>2019-08-13T12:46:07.000Z</published>
    <updated>2019-08-25T06:31:01.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Lombok简介及基本使用"><a href="#学习笔记-Lombok简介及基本使用" class="headerlink" title="学习笔记 : Lombok简介及基本使用"></a>学习笔记 : Lombok简介及基本使用</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><em>问题引入 : 开发中经常需要写的JavaBean,都需要花时间去添加相应的getter/setter,也许还要去写构造器、equals等方法,而且需要维护,当属性多时会出现大量的getter/setter方法,这些显得很冗长也没有太多技术含量,一旦修改属性,就容易出现忘记修改对应方法的失误哟~</em></p><p><em>Lombok能通过注解的方式,在编译时自动为属性生成<code>构造器</code>、<code>getter/setter</code>、<code>equals</code>、<code>hashcode</code>、<code>toString</code>方法. 出现的神奇就是在源码中没有getter和setter方法,但是在编译生成的字节码文件中有getter和setter方法. 这样就省去了手动重建这些代码的麻烦,既而达到简化代码,提高开发人员的开发效率的目的</em></p><ul><li>优点 :<ul><li>能通过注解的形式自动生成构造器、getter/setter、equals、hashcode、toString等方法,提高了一定的开发效率</li><li>让代码变得简洁,不用过多的去关注相应的方法</li><li>属性做修改时,也简化了维护为这些属性所生成的getter/setter方法等</li></ul></li><li>缺点 :<ul><li>不支持多种参数构造器的重载</li><li>虽然省去了手动创建getter/setter方法的麻烦,但大大降低了源代码的可读性和完整性,降低了阅读源代码的舒适度</li></ul></li><li>总结 : <ul><li>Lombok虽然有很多优点,但Lombok更类似于一种IDE插件,项目也需要依赖相应的jar包. Lombok依赖jar包是因为编译时要用它的注解,为什么说它又类似插件 ? 因为在使用时Eclipse或IntelliJ IDEA都需要安装相应的插件,<code>在编译器编译时通过操作AST( 抽象语法树 )改变字节码生成,变向的就是说它在改变Java语法. 它不像Spring的依赖注入或者MyBatis的ORM一样是运行时的特性,而是编译时的特性</code></li></ul></li></ul><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ol><li><p><em>添加Maven依赖 :</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>安装IDEA(<code>IntelliJ Lombok plugin</code>)插件</em></p></li></ol><h3 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h3><ol><li><p><em>(已添加<code>lombok</code>依赖情况下)抛出此异常,(IDEA环境)解决方案:安装<code>IntelliJ Lombok plugin</code>并启用<code>Enable annotation processing</code></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Warning:(49, 8) java: lombok.javac.apt.LombokProcessor could not be initialized. Lombok will not run during this compilation: java.lang.IllegalArgumentException: com.sun.tools.javac.main.DelegatingJavaFileManager$DelegatingSJFM extends com.sun.tools.javac.main.DelegatingJavaFileManager implements javax.tools.StandardJavaFileManager</span><br><span class="line">  at lombok.javac.apt.LombokFileObjects.getCompiler(LombokFileObjects.java:148)</span><br><span class="line">  at lombok.javac.apt.InterceptingJavaFileManager.&lt;init&gt;(InterceptingJavaFileManager.java:40)</span><br><span class="line">  at lombok.javac.apt.LombokProcessor.placePostCompileAndDontMakeForceRoundDummiesHook(LombokProcessor.java:165)</span><br><span class="line">  at lombok.javac.apt.LombokProcessor.init(LombokProcessor.java:87)</span><br><span class="line">  at lombok.core.AnnotationProcessor$JavacDescriptor.want(AnnotationProcessor.java:87)</span><br><span class="line">  at lombok.core.AnnotationProcessor.init(AnnotationProcessor.java:140)</span><br></pre></td></tr></table></figure></li><li><p><em>JDK版本bug,解决方案:重置JDK版本,Project Structure—&gt;Porject settings—&gt;Project : 将<code>Project SDK</code>设置为:<code>9(java version&quot;9.0.4&quot;)</code>, <code>language level</code>设置为<code>8</code>,详情操作请参考 : <a href="https://github.com/YUbuntu0109/YUbuntu0109.github.io/blob/ce0545de04d3cfc9b328a1760bb5f3c84d322362/source/_posts/%E8%AF%A6%E8%A7%A3%E5%9C%A8IDEA%E4%B8%AD%E5%A4%9A%E5%A4%84%E8%AE%BE%E7%BD%AEJDK%E5%8F%8A%E5%85%B6%E5%8C%BA%E5%88%AB.md" target="_blank" rel="noopener">IDEA为何多处设置JDK,有什么区别呢 ?</a></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Warning:(9, 8) java: lombok.javac.apt.LombokProcessor could not be initialized. Lombok will not run during this compilation: java.lang.IllegalArgumentException: com.sun.tools.javac.main.DelegatingJavaFileManager$DelegatingSJFM extends com.sun.tools.javac.main.DelegatingJavaFileManager implements javax.tools.StandardJavaFileManager</span><br><span class="line">  at lombok.javac.apt.LombokFileObjects.getCompiler(LombokFileObjects.java:148)</span><br><span class="line">  at lombok.javac.apt.InterceptingJavaFileManager.&lt;init&gt;(InterceptingJavaFileManager.java:40)</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用Lombok前后对比"><a href="#使用Lombok前后对比" class="headerlink" title="使用Lombok前后对比"></a>使用Lombok前后对比</h3><ol><li><p><em>一个未使用Lombok的普通JavaBean</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.lombok.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>一个使用Lombok的普通JavaBean( 使用Lombok注解达到与上述JavaBean同样的效果 )~</em></p></li></ol><ul><li><code>@Data</code> : 注解在类上,提供类所有属性的 getting 和 setting 方法,此外还提供了equals、canEqual、hashCode、toString方法</li><li><code>@Setter</code> : 注解在属性上,为属性提供 setting 方法</li><li><code>@Getter</code> : 注解在属性上,为属性提供 getting 方法</li><li><code>@Log4j</code> : 注解在类上,为类提供一个属性名为 log 的 log4j 日志对象</li><li><code>@ToString</code> : 注解在类上,为类提供一个 toString 方法</li><li><code>@NoArgsConstructor</code> : 注解在类上,为类提供一个无参的构造方法</li><li><code>@AllArgsConstructor</code> : 注解在类上,为类提供一个全参的构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.lombok.bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Log</span>4j</span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserWithLombok</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outLogInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"the message object to log ~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>参考链接 :</em></p><ul><li><a href="https://github.com/rzwitserloot/lombok" target="_blank" rel="noopener">https://github.com/rzwitserloot/lombok</a></li><li><a href="https://www.cnblogs.com/heyonggang/p/8638374.html" target="_blank" rel="noopener">https://www.cnblogs.com/heyonggang/p/8638374.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Lombok简介及基本使用&quot;&gt;&lt;a href=&quot;#学习笔记-Lombok简介及基本使用&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Lombok简介及基本使用&quot;&gt;&lt;/a&gt;学习笔记 : Lombok简介及基本使用&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Lombok" scheme="http://yoursite.com/tags/Lombok/"/>
    
  </entry>
  
</feed>
